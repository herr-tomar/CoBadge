3.3	Service-Design
Übersicht
Das Co-Badge Gateway ist eine interne Intranet-Anwendung, die auf der PKP (Kubernetes-Plattform) neu entwickelt wird. Da es sich um eine interne Anwendung handelt, sind Authentifizierung und Autorisierung nicht erforderlich. Die bestehende Datenbank bleibt unverändert, und der Fokus liegt auf der Modernisierung der Anwendungsarchitektur unter Verwendung von Microservices, Choreographie, Hazelcast, DB2, REST, ISO 8583, Java und Spring. Der DevOps-Stack umfasst Jenkins für CI/CD, Grafana für Monitoring und Splunk für Log-Analyse.
1. Service-Design & Microservice-Architektur

Philosophie
Das Co-Badge Gateway basiert auf einer Domain-Driven Design (DDD)-Strategie und nutzt eine ereignisgesteuerte Architektur (Choreographie), um Flexibilität und Skalierbarkeit zu gewährleisten. 
Die Anwendung ist in klar abgegrenzte Microservices unterteilt, die über Hazelcast als verteiltes In-Memory-Data-Grid kommunizieren. Dies ermöglicht eine optimale Performance und Lastverteilung.

Microservice-Ansatz

    Fachliche Funktionen wie Kartentransaktionen, Sperrverwaltung (Sperre 60, 61, 62) und Clearing werden in unabhängige Microservices aufgeteilt.

    Choreographie-basierte Kommunikation über Hazelcast für ereignisgesteuerte Verarbeitung.

    Zustandslose Dienste mit REST-API-Endpunkten für synchrone Operationen.

    ISO 8583-Nachrichtentransformation für die Integration mit Altsystemen.

Kern-Microservices & Verantwortlichkeiten

    Autorisierungsservice (Authorisierung)

        Bearbeitet Echtzeit-Transaktionsfreigaben (ISO 8583-Nachrichten).

        Integriert sich mit Kartennetzwerken (Visa, Mastercard).
Kartenservice

Bearbeitet Kartenbestellungen (Batch & Online).

Integriert sich mit internen und externen Kartenmanagementsystemen.

    Sperrservice (Sperre-Management)

        Verwaltet Sperrungen (Sperre 60, 61, 62).

        Synchronisiert mit externen Banksystemen.

    Clearing & Abrechnungsservice (Clearing & Nachweise)

        Verarbeitet nachträgliche Transaktionsabrechnungen.

        Führt asynchrone Abstimmungen mit Partnern durch.

    Helaba EZB Referenzkurs-Service

        Ruft Wechselkurs-Referenzdaten ab.

        Veröffentlicht Kurse zur Verarbeitung durch Finanztransaktionen.

    Helaba Datenbereitstellungsservice

        Stellt Helaba die notwendigen Dateien für Reporting & Abrechnung zur Verfügung.

Schnittstellen & API-Kommunikation

    Ereignisgesteuerte Nachrichtenübertragung über Hazelcast für serviceübergreifende Kommunikation.

    REST-APIs für externe Integrationen.

    ISO 8583-Unterstützung für die Integration mit Altsystemen im Bankenumfeld.

2. Skalierbarkeit & Performance-Optimierung

Horizontale Skalierung

    Kubernetes Horizontal Pod Autoscaling (HPA) zur dynamischen Skalierung basierend auf der Last.

    Effiziente Hazelcast-Partitionierung zur Vermeidung doppelter Verarbeitungen.

Optimierter Datenzugriff

    Hazelcast als verteiltes Caching zur Reduzierung von DB-Abfragen.

    Ereignisgesteuerte Aktualisierungen aus DB2 für Echtzeit-Transaktionsstatus.

Latenz- & Durchsatzverbesserungen

    Optimierte API-Antwortzeiten durch In-Memory-Verarbeitung.

    Lasttests zur Benchmarking von erwarteten Requests per Second (RPS).

3. Zuverlässigkeit & Fehlertoleranz

Strategien zur Fehlerbehebung

    Circuit Breaker mit Resilience4j zur Handhabung externer Fehler.

    Dead-Letter-Queue (DLQ) zur Wiederverarbeitung fehlgeschlagener Nachrichten.

Selbstheilungsmechanismen

    Kubernetes Liveness & Readiness Probes zur Sicherstellung der Dienstverfügbarkeit.

    Automatisierte Wiederholungsversuche bei temporären Fehlern.

4. Deployment & DevOps

CI/CD-Pipeline

    Jenkins zur Automatisierung von Builds und Deployments.

    Helm-Charts für Kubernetes-Deployments.

Monitoring & Log-Management

    Grafana für Echtzeit-Monitoring der Performance.

    Splunk zur zentralen Log-Analyse und Debugging-Unterstützung.

5. Compliance & Auditierbarkeit

Logging & Audit-Trail

    Vollständige Transaktionsprotokollierung zur Nachverfolgbarkeit.

    Audit-Daten in DB2 gespeichert für Compliance-Berichterstattung.

ISO 8583-Konformität

    Unterstützung für verschiedene Nachrichtentypen (Autorisierungen, Stornierungen, Abrechnungen).

    Sicherstellung der Abwärtskompatibilität mit Altsystemen.

6. Business Continuity & Notfallwiederherstellung

Hochverfügbarkeitssetup

    Multi-Node-Deployment in Kubernetes zur Vermeidung von Single Points of Failure.

    Hazelcast-basierte verteilte Zustandsverwaltung.

Disaster Recovery & Failover

    Die bestehende Failover-Strategie für DB2 bleibt unverändert und wird weiterhin genutzt. Es sind keine Anpassungen oder Erweiterungen erforderlich, da die Datenbank nicht Teil der Neuentwicklung ist.

    Automatisierte Backups und Wiederherstellungsmechanismen.

Text

3.4	Nutzungsmessung
WIP Vivek
WIP brauchen wir das?
Die Nutzung der in der Fachlichen Spezifikation dargestellten Funktionalitäten / Prozesse / Anwendungen soll für einen Bericht zu OSPlus-Nutzungskennzahlen anhand folgender Nutzungskennzahlen messbar gemacht werden:
Kennzahl 1 (Erläuterung inkl. Angabe der „Kennzahlenquelle“ wie z.B. ET3 des DSGV oder IT-nahes Fachkonzept) der SR
Kennzahl 2 (Erläuterung inkl. Angabe der „Kennzahlenquelle“ wie z.B. ET3 des DSGV oder IT-nahes Fachkonzept) der SR
Kennzahl n (Erläuterung inkl. Angabe der „Kennzahlenquelle“ wie z.B. ET3 des DSGV oder IT-nahes Fachkonzept) der SR
Wenn das Thema Nutzungsmessung für die vorliegende Fachliche Spezifikation keine Relevanz besitzt, ist der folgende Satz mit dem Standard-Format zu formatieren und der Rest des Textes zum Thema Nutzung zu löschen. 
„Für die vorliegende Fachliche Spezifikation ist das Thema Nutzungsmessung nicht relevant.“

3.5	Nicht-funktionale Anforderungen
WIP Vivek
3.5.1.1	Performance
cobGW Autorisierung <100ms


3.5.1.2	Verfügbarkeit
WIP Vivek
[Hinweis: Bitte orientieren Sie sich bei der Befüllung an dem in PMOplus als Inputdokument für die Fachliche Spezifikation ausgewiesenem Leitfaden für nicht-funktionale Anforderungen für OSPlus (siehe Leitfaden nicht-funktionale Anforderungen im PMOplus-Wiki).
Der Gliederungspunkt ist zwingend zu befüllen und darf nicht gelöscht werden!
Für den Fall, dass es sich bei dem Projekt um eine Erweiterung von Funktionalitäten einer bestehenden Anwendung handelt und es keine Veränderungen der vorliegenden nicht-funktionalen Anforderungen gibt, ist der Hinweis wie folgt auszuweisen:
Im Rahmen des Projekts werden Anpassungen an bestehenden IT-Systemen durchgeführt, es besteht kein Anpassungsbedarf an den vorliegenden nicht-funktionalen Anforderungen.
In allen anderen Fällen sind die nicht-funktionalen Anforderungen auszuweisen / zu dokumentieren.]
