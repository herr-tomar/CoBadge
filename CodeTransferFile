private static void generateMapper(Template mapperTemplate, File outputDir, ProtoMessageModel model) throws IOException {
    String protoPackage = model.getProtoPackageName();
    String restPackage = insertRestInPackage(protoPackage);
    String mapperPackage = restPackage + ".mapper";

    Set<String> fullMapperClassSet = new HashSet<>();
    Set<String> simpleMapperClassSet = new HashSet<>();

    // For mapping repeated fields
    List<Map<String, String>> repeatedFieldMappings = new ArrayList<>();
    // For mapping normal fields
    List<Map<String, String>> normalFieldMappings = new ArrayList<>();

    for (ProtoFieldModel field : model.getFields()) {
        if (field.isCustomType()) {
            fullMapperClassSet.add(mapperPackage + "." + field.getProtoType() + "Mapper");
            simpleMapperClassSet.add(field.getProtoType() + "Mapper");
        }

        if (field.isRepeated()) {
            Map<String, String> mapping = new HashMap<>();
            mapping.put("source", field.getName() + "List");
            mapping.put("target", field.getName());
            repeatedFieldMappings.add(mapping);
        } else {
            Map<String, String> mapping = new HashMap<>();
            mapping.put("source", field.getName());
            mapping.put("target", field.getName());
            normalFieldMappings.add(mapping);
        }
    }

    Map<String, Object> mapperData = new HashMap<>();
    mapperData.put(KEY_MAPPER_PACKAGE, mapperPackage);
    mapperData.put(KEY_PROTO_DTO_PACKAGE, protoPackage);
    mapperData.put(KEY_PROTO_DTO_CLASS_NAME, model.getClassName());
    mapperData.put(KEY_REST_DTO_PACKAGE, restPackage);
    mapperData.put(KEY_REST_DTO_CLASS_NAME, model.getClassName());
    mapperData.put(KEY_MAPPER_INTERFACE_NAME, model.getClassName() + "Mapper");
    mapperData.put(KEY_CUSTOM_IMPORTS, new ArrayList<>(fullMapperClassSet));
    mapperData.put(KEY_CUSTOM_SIMPLE_NAMES, new ArrayList<>(simpleMapperClassSet));
    mapperData.put(KEY_REPEATED_MAPPINGS, repeatedFieldMappings);
    mapperData.put("normalFieldMappings", normalFieldMappings); // <-- new

    File mapperDir = new File(outputDir, mapperPackage.replace('.', '/'));
    mapperDir.mkdirs();

    File mapperFile = new File(mapperDir, model.getClassName() + "Mapper.java");
    TemplateWriterUtil.writeTemplate(mapperTemplate, mapperData, mapperFile);
}
