package osplus.pkptuna.flows.handlers;

import jakarta.annotation.PostConstruct;
import osplus.apl.core.api.AplComponent;
import osplus.fi.core.logging.api.Logger;
import osplus.fi.core.logging.api.LoggerFactory;
import osplus.pkptuna.dispute.create.model.DisputeCreateRequestDto;
import osplus.pkptuna.dispute.create.model.DisputeCreateRequestWrapperDto;
import osplus.pkptuna.dispute.create.model.DisputeCreateResponseDto;
import osplus.pkptuna.dispute.create.model.DisputeCreateResponseWrapperDto;
import osplus.pkptuna.dispute.service.DisputeService;
import osplus.pkptuna.hazelcast.flows.AbstractFlowHandler;
import osplus.pkptuna.hazelcast.protobuf.impl.ProtobufDeserializer;
import osplus.pkptuna.hazelcast.pubsub.ReliableTopicPublisher;

@AplComponent("dispute-create")
public class DisputeCreateFlowHandler extends
        AbstractFlowHandler<DisputeCreateRequestWrapperDto, DisputeCreateResponseDto, DisputeCreateResponseWrapperDto> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DisputeCreateFlowHandler.class);
    private static final String FLOW_NAME = "dispute-create";
    private static final String TRACE_CODE = "DISPUTE-CREATE";
    private final DisputeService disputeService;

    public DisputeCreateFlowHandler(ReliableTopicPublisher<DisputeCreateResponseWrapperDto> reliableTopicPublisher, ProtobufDeserializer<DisputeCreateRequestWrapperDto> deserializer, DisputeService disputeService) {
        super(FLOW_NAME, TRACE_CODE, reliableTopicPublisher, deserializer);
        this.disputeService = disputeService;
    }

    @Override
    public String extractCorrelationId(DisputeCreateRequestWrapperDto request) {
        return request.getCorrelationId();
    }

    @Override
    public DisputeCreateResponseDto handleRequest(DisputeCreateRequestWrapperDto request) {
        DisputeCreateRequestDto dto = request.getPayload();
        return disputeService.createDispute(dto);
    }

    @Override
    public DisputeCreateResponseWrapperDto wrapResponse(String correlationId, DisputeCreateResponseDto result) {
        return DisputeCreateResponseWrapperDto.newBuilder()
                .setCorrelationId(correlationId)
                .setResponse(result)
                .build();
    }

    @PostConstruct
    void init() {
        LOGGER.info("DisputeCreateFlowHandler loaded and initialised.");
    }
}

