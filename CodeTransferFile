package osplus.pkptuna.hazelcast.pubsub;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import com.hazelcast.topic.ITopic;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import osplus.pkptuna.hazelcast.config.FlowConfig;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;
import osplus.pkptuna.hazelcast.test.config.FlowHandlerTestConfiguration;

import java.util.Map;

import static java.util.concurrent.TimeUnit.MILLISECONDS;
import static org.awaitility.Awaitility.await;
import static org.junit.jupiter.api.Assertions.*;

public class GenericHazelcastRouterTest extends BaseHazelcastTest {

    @Autowired
    private HazelcastInstance hazelcastInstance;

    @Autowired
    private FlowHandlerRegistry<String, FlowHandler> handlerRegistry;

    @Autowired
    private FlowHandler sampleFlowHandler;

    @Autowired
    private FlowConfig flowConfig;

    @Autowired
    private GenericHazelcastRouter router;

    @Autowired
    private FlowHandlerTestConfiguration.TestCollector testCollector;

    private IMap<String, String> leaderMap;
    private IMap<String, Long> heartbeatMap;
    private IMap<String, String> routerMap;
    private IMap<Object, Object> targetMap;
    private ITopic<byte[]> topic;

    private final String routerInstanceId = "test-router-instance";

    @BeforeEach
    public void setup() {
        leaderMap = hazelcastInstance.getMap("router-leader-map");
        heartbeatMap = hazelcastInstance.getMap("router-heartbeat-map");
        routerMap = hazelcastInstance.getMap("router-claim-map");
        targetMap = hazelcastInstance.getMap("map-0");

        leaderMap.clear();
        heartbeatMap.clear();
        routerMap.clear();
        targetMap.clear();
        testCollector.clear();

        router.setRouterInstanceId(routerInstanceId);
        topic = hazelcastInstance.getReliableTopic(flowConfig.requestTopic());
    }

    @Test
    public void testMessageRoutedSuccessfully() {
        router.initRouters();

        topic.publish("{\"key\":\"value\"}".getBytes());

        await().atMost(500, MILLISECONDS)
                .until(() -> testCollector.wasSent("res-topic"));

        assertEquals("wrappedResponse", testCollector.getSent("res-topic"));
    }

    @Test
    public void testDuplicateMessageNotProcessed() throws Exception {
        router.initRouters();

        Map<String, Object> requestMap = Map.of("dup", "check");
        byte[] rawMessage = new ObjectMapper().writeValueAsBytes(requestMap);
        String corrId = sampleFlowHandler.extractCorrelationId(requestMap);

        routerMap.put("route-lock-" + corrId, "existing"); // Simulate existing lock
        topic.publish(rawMessage);

        await().during(300, MILLISECONDS)
                .atMost(500, MILLISECONDS)
                .until(() -> !testCollector.wasSent("res-topic"));

        assertFalse(testCollector.wasSent("res-topic"), "Duplicate message should not be routed or responded to");
    }

    @Test
    public void testRoutingHandlerThrowsException() {
        router.initRouters();

        byte[] rawMessage = "faultyRequest".getBytes();
        topic.publish(rawMessage);

        await().during(300, MILLISECONDS)
                .atMost(500, MILLISECONDS)
                .until(() -> !testCollector.wasSent("res-topic"));

        assertFalse(testCollector.wasSent("res-topic"), "No response should be sent for faulty request");
    }

    @Test
    public void testNotLeaderDoesNotSubscribeToTopics() {
        long now = System.currentTimeMillis();
        heartbeatMap.put("heartbeat", now);
        leaderMap.put("active-router", "another-instance"); // simulate another leader

        router.initRouters();

        topic.publish("{\"key\":\"value\"}".getBytes());

        await().during(300, MILLISECONDS)
                .atMost(500, MILLISECONDS)
                .until(() -> !testCollector.wasSent("res-topic"));

        assertFalse(testCollector.wasSent("res-topic"), "Non-leader router should not route or respond");
    }
}
