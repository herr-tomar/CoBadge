package osplus.pkptuna.flows.handlers;

import com.hazelcast.core.HazelcastInstance;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;
import osplus.apl.core.test.utils.AplTestRunner;
import osplus.apl.core.test.utils.BaseAplTest;
import osplus.pkptuna.dispute.model.DisputeDetailRequestDto;
import osplus.pkptuna.dispute.model.DisputeDetailRequestWrapperDto;
import osplus.pkptuna.dispute.model.DisputeDetailResponseWrapperDto;
import osplus.pkptuna.dispute.model.DisputeResponseDto;
import osplus.pkptuna.dispute.service.DisputeDetailService;
import osplus.pkptuna.hazelcast.protobuf.impl.ProtobufDeserializer;
import osplus.pkptuna.hazelcast.pubsub.ReliableTopicPublisher;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * Integrationstest f√ºr {@link DisputeDetailFlowHandler}.
 */
@SpringBootTest(classes = {
        AplTestRunner.class,
        DisputeDetailFlowHandlerTest.TestConfig.class
        },
        properties = {
                "spring.main.allow-bean-definition-overriding=true",
                "apl.application.name=uui",
                "apl.application.version=0.0.1-TEST"
        }
)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class DisputeDetailFlowHandlerTest extends BaseAplTest {

    @Autowired
    private DisputeDetailFlowHandler handler;

    @Autowired
    private DisputeDetailService disputeDetailService;

    /**
     * Testet die Extraktion der Korrelation-ID aus dem Request.
     */
    @Test
    void shouldExtractCorrelationId() {
        DisputeDetailRequestWrapperDto request = DisputeDetailRequestWrapperDto.newBuilder()
                .setCorrelationId("12345")
                .build();

        String result = handler.extractCorrelationId(request);

        assertEquals("12345", result);
    }

    /**
     * Testet, ob der Handler den Service mit korrekten Parametern aufruft.
     */
    @Test
    void shouldHandleRequestAndCallService() {
        DisputeDetailRequestDto payload = DisputeDetailRequestDto.newBuilder()
                .setIssuerId("issuer")
                .setDisputeFolderReference("ref")
                .build();

        DisputeDetailRequestWrapperDto request = DisputeDetailRequestWrapperDto.newBuilder()
                .setPayload(payload)
                .build();

        DisputeResponseDto expectedResponse = DisputeResponseDto.newBuilder().build();
        when(disputeDetailService.getDisputeFolderDetails("issuer", "ref", List.of("x")))
                .thenReturn(expectedResponse);

        DisputeResponseDto response = handler.handleRequest(request);

        assertEquals(expectedResponse, response);
    }

    /**
     * Testet, ob das Response-Objekt korrekt verpackt wird.
     */
    @Test
    void shouldWrapResponseCorrectly() {
        DisputeResponseDto response = DisputeResponseDto.newBuilder().build();
        Object wrapped = handler.wrapResponse("abc", response);

        assertTrue(wrapped instanceof DisputeDetailResponseWrapperDto);
        assertEquals("abc", ((DisputeDetailResponseWrapperDto) wrapped).getCorrelationId());
    }

    /**
     * Testkonfiguration zur Bereitstellung von Mock-Beans.
     */
    @TestConfiguration
    static class TestConfig {

        @Bean
        @Primary
        public DisputeDetailService disputeDetailService() {
            return mock(DisputeDetailService.class);
        }

        @Bean
        @Primary
        public ReliableTopicPublisher reliableTopicPublisher() {
            return mock(ReliableTopicPublisher.class);
        }

        @Bean
        @Primary
        public ProtobufDeserializer<DisputeDetailRequestWrapperDto> protobufDeserializer() {
            return mock(ProtobufDeserializer.class);
        }

        @Bean
        @Primary
        public HazelcastInstance hazelcastInstance() {
            return mock(HazelcastInstance.class);
        }

        @Bean
        public DisputeDetailFlowHandler disputeDetailFlowHandler(
                DisputeDetailService service,
                ReliableTopicPublisher publisher,
                ProtobufDeserializer<DisputeDetailRequestWrapperDto> deserializer
        ) {
            return new DisputeDetailFlowHandler(publisher, deserializer, service);
        }
    }
}
