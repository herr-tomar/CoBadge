package osplus.pkppuma.flows.handlers;

import com.hazelcast.core.HazelcastInstance;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;
import osplus.pkppuma.card.lookup.model.*;
import osplus.pkppuma.card.service.MappingService;
import osplus.pkppuma.hazelcast.protobuf.impl.ProtobufDeserializer;
import osplus.pkppuma.hazelcast.pubsub.ReliableTopicPublisher;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@SpringBootTest(classes = {
        CardLookupByFriendFlowHandlerTest.TestConfig.class
})
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class CardLookupByFriendFlowHandlerTest {

    @Autowired
    private CardLookupByFriendFlowHandler handler;

    @Autowired
    private MappingService mappingService;

    @Autowired
    private FriendDto friend;

    @Autowired
    private CardDto card;

    @Autowired
    private CardLookupByFriendRequestWrapperDto requestWrapperDto;

    @Autowired
    private CardLookupByFriendRequestDto requestDto;

    @Test
    void shouldExtractCorrelationId() {
        when(requestWrapperDto.getCorrelationId()).thenReturn("corr-id-123");
        String result = handler.extractCorrelationId(requestWrapperDto);
        assertEquals("corr-id-123", result);
    }

    @Test
    void shouldHandleRequestAndCallService() {
        when(requestWrapperDto.getPayload()).thenReturn(requestDto);
        when(requestDto.getFriend()).thenReturn(friend);
        when(mappingService.findCardByFriend(friend)).thenReturn(card);

        CardLookupResponseDto result = handler.handleRequest(requestWrapperDto);
        assertEquals(card, result.getCard());
    }

    @Test
    void shouldWrapResponseCorrectly() {
        CardLookupResponseDto response = CardLookupResponseDto.newBuilder().setCard(card).build();
        Object wrapped = handler.wrapResponse("corr-id-789", response);

        assertTrue(wrapped instanceof CardLookupByFriendResponseWrapperDto);

        var actual = (CardLookupByFriendResponseWrapperDto) wrapped;
        assertEquals("corr-id-789", actual.getCorrelationId());
        assertEquals(card, actual.getResponse().getCard());
    }

    @TestConfiguration
    static class TestConfig {

        @Bean
        @Primary
        public MappingService mappingService() {
            return mock(MappingService.class);
        }

        @Bean
        @Primary
        public ReliableTopicPublisher reliableTopicPublisher() {
            return mock(ReliableTopicPublisher.class);
        }

        @Bean
        @Primary
        public ProtobufDeserializer<CardLookupByFriendRequestWrapperDto> protobufDeserializer() {
            return mock(ProtobufDeserializer.class);
        }

        @Bean
        public CardLookupByFriendFlowHandler handler(MappingService mappingService,
                                                     ReliableTopicPublisher publisher,
                                                     ProtobufDeserializer<CardLookupByFriendRequestWrapperDto> deserializer) {
            return new CardLookupByFriendFlowHandler(mappingService, publisher, deserializer);
        }

        @Bean public CardLookupByFriendRequestWrapperDto requestWrapperDto() {
            return mock(CardLookupByFriendRequestWrapperDto.class);
        }

        @Bean public CardLookupByFriendRequestDto requestDto() {
            return mock(CardLookupByFriendRequestDto.class);
        }

        @Bean public FriendDto friendDto() {
            return mock(FriendDto.class);
        }

        @Bean public CardDto cardDto() {
            return mock(CardDto.class);
        }

        @Bean public HazelcastInstance hazelcastInstance() {
            return mock(HazelcastInstance.class);
        }
    }
}


@SpringBootTest(classes = {
        CardLookupByPanFlowHandlerTest.TestConfig.class
})
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class CardLookupByPanFlowHandlerTest {

    @Autowired
    private CardLookupByPanFlowHandler handler;

    @Autowired private MappingService mappingService;
    @Autowired private CardDto cardDto;
    @Autowired private PanDto panDto;
    @Autowired private CardLookupByPanRequestWrapperDto requestWrapperDto;
    @Autowired private CardLookupByPanRequestDto requestDto;

    @Test
    void shouldExtractCorrelationId() {
        when(requestWrapperDto.getCorrelationId()).thenReturn("pan-corr-456");
        String result = handler.extractCorrelationId(requestWrapperDto);
        assertEquals("pan-corr-456", result);
    }

    @Test
    void shouldHandleRequestAndCallService() {
        when(requestWrapperDto.getPayload()).thenReturn(requestDto);
        when(requestDto.getPan()).thenReturn(panDto);
        when(mappingService.findCardByPan(panDto)).thenReturn(cardDto);

        CardLookupResponseDto result = handler.handleRequest(requestWrapperDto);
        assertEquals(cardDto, result.getCard());
    }

    @Test
    void shouldWrapResponseCorrectly() {
        CardLookupResponseDto response = CardLookupResponseDto.newBuilder().setCard(cardDto).build();
        Object wrapped = handler.wrapResponse("corr-id-pan", response);

        assertTrue(wrapped instanceof CardLookupByPanResponseWrapperDto);

        var actual = (CardLookupByPanResponseWrapperDto) wrapped;
        assertEquals("corr-id-pan", actual.getCorrelationId());
        assertEquals(cardDto, actual.getResponse().getCard());
    }

    @TestConfiguration
    static class TestConfig {

        @Bean
        @Primary
        public MappingService mappingService() {
            return mock(MappingService.class);
        }

        @Bean
        @Primary
        public ReliableTopicPublisher reliableTopicPublisher() {
            return mock(ReliableTopicPublisher.class);
        }

        @Bean
        @Primary
        public ProtobufDeserializer<CardLookupByPanRequestWrapperDto> protobufDeserializer() {
            return mock(ProtobufDeserializer.class);
        }

        @Bean
        public CardLookupByPanFlowHandler handler(MappingService mappingService,
                                                  ReliableTopicPublisher publisher,
                                                  ProtobufDeserializer<CardLookupByPanRequestWrapperDto> deserializer) {
            return new CardLookupByPanFlowHandler(mappingService, publisher, deserializer);
        }

        @Bean public CardLookupByPanRequestWrapperDto requestWrapperDto() {
            return mock(CardLookupByPanRequestWrapperDto.class);
        }

        @Bean public CardLookupByPanRequestDto requestDto() {
            return mock(CardLookupByPanRequestDto.class);
        }

        @Bean public PanDto panDto() {
            return mock(PanDto.class);
        }

        @Bean public CardDto cardDto() {
            return mock(CardDto.class);
        }

        @Bean public HazelcastInstance hazelcastInstance() {
            return mock(HazelcastInstance.class);
        }
    }
}
