package osplus.pkptuna.dispute.service.impl;

import org.springframework.http.HttpHeaders;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import osplus.fi.core.logging.api.Logger;
import osplus.fi.core.logging.api.LoggerFactory;
import osplus.pkptuna.dispute.config.DisputeServiceProperties;
import osplus.pkptuna.dispute.lookup.model.DisputeFolderEntryDto;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupResponseDto;
import osplus.pkptuna.dispute.lookup.model.FullDisputeLookupResponseDto;
import osplus.pkptuna.dispute.service.DisputeService;
import osplus.pkptuna.protobuf.util.ProtobufJsonUtil;

import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Implementierung des {@link DisputeService} zur Abfrage von Dispute-Ordnern
 * über eine externe Issuer-API mithilfe von WebClient (Spring WebFlux).
 */
public class DisputeServiceImpl implements DisputeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DisputeServiceImpl.class);
    private final WebClient webClient;
    private final String username;
    private final String password;
    private final String disputePath;

    /**
     * Konstruktor für {@code DisputeServiceImpl}.
     *
     * @param webClient WebClient zur Erstellung des REST-Clients
     * @param props            Konfigurationseigenschaften für Authentifizierung und Endpunkte
     */
    public DisputeServiceImpl(final WebClient webClient, final DisputeServiceProperties props) {
        this.username = props.auth().username();
        this.password = props.auth().password();
        this.disputePath = props.paths().lookupDisputes();
        this.webClient = webClient;
    }

    /**
     * {@inheritDoc}
     * Führt eine Abfrage eines Dispute-Ordners anhand der übergebenen Issuer-ID und Kartenreferenz durch.
     */
    @Override
    public DisputeLookupResponseDto lookupDisputeFolder(String issuerId, String cardReference) {
        try {
            String basicAuth = Base64.getEncoder().encodeToString(
                    (username + ":" + password).getBytes(StandardCharsets.UTF_8)
            );

            String json = webClient.get()
                    .uri(uriBuilder -> {
                        URI builder = uriBuilder
                                .path(disputePath)
                                .build(issuerId, cardReference);
                        return builder;
                    })
                    .header("WL-Correlation-ID", "pkptuna-" + System.currentTimeMillis())
                    .header("WL-Origin", "pkptuna-service")
                    .header(HttpHeaders.AUTHORIZATION, "Basic " + basicAuth)
                    .retrieve()
                    .bodyToMono(String.class)
                    .block();

            FullDisputeLookupResponseDto.Builder fullBuilder = FullDisputeLookupResponseDto.newBuilder();
            ProtobufJsonUtil.parseJsonToProto(json, fullBuilder);

            List<DisputeFolderEntryDto> folderEntries = fullBuilder.getDataList().stream()
                    .map(data -> DisputeFolderEntryDto.newBuilder()
                            .setDisputeFolderReference(data.getDisputeFolderIdentifier().getDisputeFolderReference())
                            .setStatusCode(data.getStatusCode())
                            .build())
                    .collect(Collectors.toList());

            return DisputeLookupResponseDto.newBuilder()
                    .setDisputeFolderExists(!folderEntries.isEmpty())
                    .addAllDisputeFolders(folderEntries)
                    .build();

        } catch (WebClientResponseException e) {
            LOGGER.warn("External API returned error: {}", e.getStatusCode());
        } catch (Exception e) {
            LOGGER.error("Exception during dispute lookup", e);
        }

        return DisputeLookupResponseDto.newBuilder()
                .setDisputeFolderExists(false)
                .build();
    }
}
