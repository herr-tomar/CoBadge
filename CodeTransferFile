for (String key : map.keySet()) {
    Object value = map.remove(key);
    if (value != null) {
        processEntry(key, value, flowName, responseTopic, mapName);
    }
}


------

private void processEntry(
        String correlationId,
        Object rawRequest,
        String flowName,
        String responseTopic,
        String mapName
) {
    try {
        FlowHandler<Object, Object> handler = handlerRegistry.getHandler(flowName);
        if (handler == null) {
            LOGGER.warn("No FlowHandler registered for flow '{}'. Skipping.", flowName);
            metricsService.increaseCounter("hazelcast.message.consume.missingFlowHandler",
                    MetricTag.create("flowName", flowName)
            );
        } else {
            Object response = handler.handleRequest(rawRequest);
            Object wrapped = handler.wrapResponse(correlationId, response);
            handler.sendResponse(hazelcastInstance, responseTopic, wrapped);

            LOGGER.info("Processed and removed entry from {} with correlationId={}", mapName, correlationId);
            metricsService.increaseCounter("hazelcast.message.consume.success",
                    MetricTag.create("flowName", flowName)
            );
        }
    } catch (Exception e) {
        LOGGER.error("Error processing request from {} for flow '{}': {}", mapName, flowName, e.getMessage(), e);
        metricsService.increaseCounter(
                "hazelcast.message.consume.error",
                MetricTag.create("flowName", flowName),
                MetricTag.create("exceptionClass", e.getClass().getCanonicalName())
        );
    }
}
