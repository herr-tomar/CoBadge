package pkppuma.service;

import com.hazelcast.config.Config;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.topic.ITopic;
import com.hazelcast.topic.MessageListener;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import osplus.apl.core.test.utils.AplTestRunner;
import osplus.apl.core.test.utils.BaseAplTest;
import osplus.pkptuna.configprops.HazelRelTopicConfigProps;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupRequestWrapperDto;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupResponseDto;
import osplus.pkptuna.dispute.model.DisputeDetailRequestWrapperDto;
import osplus.pkptuna.dispute.model.DisputeResponseDto;
import osplus.pkptuna.rest.dispute.lookup.model.mapper.DisputeLookupResponseDtoMapper;
import osplus.pkptuna.rest.dispute.model.mapper.DisputeResponseDtoMapper;
import osplus.pkptuna.util.GenericResponseTracker;

import java.util.UUID;

import static org.mockito.Mockito.mock;

@SpringBootTest(classes = {
        AplTestRunner.class,
        CardOrcaServiceTest.TestConfig.class
}, properties = {
        "hazelcast.topic.dispute-detail-lookup-req=DisputeDetailRequestReliableTopic",
        "hazelcast.topic.dispute-detail-lookup-res=DisputeDetailResponseReliableTopic",
        "hazelcast.topic.disputes-lookup-req=DisputeLookupRequestReliableTopic",
        "hazelcast.topic.disputes-lookup-res=DisputeLookupResponseReliableTopic",
        "apl.application.name=uui",
        "apl.application.version=0.0.1-TEST"
})
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class CardOrcaServiceTest extends BaseAplTest {

    @Autowired
    private DisputeOrcaService disputeOrcaService;

    @Autowired
    private HazelcastInstance hazelcastInstance;

    @Autowired
    private GenericResponseTracker<DisputeLookupResponseDto> disputeLookupResponseTracker;

    @Autowired
    private GenericResponseTracker<DisputeResponseDto> disputeDetailResponseTracker;

    @Autowired
    private HazelRelTopicConfigProps hazelRelTopicConfigProps;

    private ITopic<byte[]> lookupTopic;
    private ITopic<byte[]> detailTopic;

    @BeforeEach
    void setupTopics() {
        lookupTopic = hazelcastInstance.getReliableTopic(hazelRelTopicConfigProps.disputesLookupReq());
        detailTopic = hazelcastInstance.getReliableTopic(hazelRelTopicConfigProps.disputeDetailLookupReq());
    }

    @Test
    void lookupDisputeFolder_shouldSendAndReceiveRealProto() {
        lookupTopic.addMessageListener((MessageListener<byte[]>) message -> {
            try {
                var req = DisputeLookupRequestWrapperDto.parseFrom(message.getMessageObject());
                var res = DisputeLookupResponseDto.newBuilder()
                        .setDisputeFolderExists(false)
                        .build();
                disputeLookupResponseTracker.complete(req.getCorrelationId(), res);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });

        var response = disputeOrcaService.lookupDisputeFolder("issuer-001", "card-abc");

        assertEquals(200, response.getStatusCodeValue());
        assertEquals("success", response.getBody().getStatus());
    }

    @Test
    void publishDisputeDetailRequest_shouldSendAndReceiveRealProto() {
        detailTopic.addMessageListener((MessageListener<byte[]>) message -> {
            try {
                var req = DisputeDetailRequestWrapperDto.parseFrom(message.getMessageObject());
                var res = DisputeResponseDto.newBuilder()
                        .build();
                disputeDetailResponseTracker.complete(req.getCorrelationId(), res);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });

        var response = disputeOrcaService.publishDisputeDetailRequest("issuer-002", "folder123", "events,documents");

        assertEquals(200, response.getStatusCodeValue());
        assertEquals("success", response.getBody().getStatus());
    }

    @TestConfiguration
    @EnableConfigurationProperties(HazelRelTopicConfigProps.class)
    static class TestConfig {

        @Bean(destroyMethod = "shutdown")
        public HazelcastInstance hazelcastInstance() {
            Config config = new Config();
            config.setClusterName("test-cluster-" + UUID.randomUUID());
            config.getNetworkConfig().setPortAutoIncrement(true);
            config.setProperty("hazelcast.logging.type", "slf4j");
            return Hazelcast.newHazelcastInstance(config);
        }

        @Bean
        public DisputeLookupResponseDtoMapper lookupMapper() {
            return mock(DisputeLookupResponseDtoMapper.class);
        }

        @Bean
        public DisputeResponseDtoMapper detailMapper() {
            return mock(DisputeResponseDtoMapper.class);
        }

        @Bean
        public GenericResponseTracker<DisputeLookupResponseDto> lookupResponseTracker() {
            return new GenericResponseTracker<>();
        }

        @Bean
        public GenericResponseTracker<DisputeResponseDto> detailResponseTracker() {
            return new GenericResponseTracker<>();
        }

        @Bean
        public DisputeOrcaService disputeOrcaService(
                HazelcastInstance hazelcastInstance,
                DisputeLookupResponseDtoMapper lookupMapper,
                DisputeResponseDtoMapper detailMapper,
                GenericResponseTracker<DisputeResponseDto> detailTracker,
                GenericResponseTracker<DisputeLookupResponseDto> lookupTracker,
                HazelRelTopicConfigProps props
        ) {
            return new DisputeOrcaService(
                    hazelcastInstance,
                    lookupMapper,
                    detailMapper,
                    detailTracker,
                    lookupTracker,
                    props
            );
        }
    }
}



--------------------------


package osplus.pkppuma.service;

import com.google.protobuf.Message;
import com.google.protobuf.util.JsonFormat;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.topic.ITopic;
import jakarta.annotation.PostConstruct;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import osplus.apl.core.api.AplComponent;
import osplus.fi.core.logging.api.Logger;
import osplus.fi.core.logging.api.LoggerFactory;
import osplus.pkppuma.api.ApiResponse;
import osplus.pkppuma.card.lookup.model.CardLookupByFriendRequestDto;
import osplus.pkppuma.card.lookup.model.CardLookupByFriendRequestWrapperDto;
import osplus.pkppuma.card.lookup.model.CardLookupByFriendResponseWrapperDto;
import osplus.pkppuma.card.lookup.model.CardLookupByPanRequestDto;
import osplus.pkppuma.card.lookup.model.CardLookupByPanRequestWrapperDto;
import osplus.pkppuma.card.lookup.model.CardLookupByPanResponseWrapperDto;
import osplus.pkppuma.card.lookup.model.CardLookupResponseDto;
import osplus.pkppuma.card.lookup.model.FriendDto;
import osplus.pkppuma.card.lookup.model.PanDto;
import osplus.pkppuma.configprops.HazelRelTopicConfigProps;
import osplus.pkppuma.rest.card.lookup.model.mapper.CardLookupResponseDtoMapper;
import osplus.pkppuma.util.GenericResponseTracker;
import osplus.pkppuma.util.HazelcastListenerUtils;

import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

@AplComponent
public class CardOrcaService {
    private static final Logger LOGGER = LoggerFactory.getLogger(CardOrcaService.class);
    public static final String CARD_LOOKUP_BY_PAN = "CARD_LOOKUP_BY_PAN";
    public static final String CARD_LOOKUP_BY_FRIEND = "CARD_LOOKUP_BY_FRIEND";
    public static final int EXECUTOR_THREAD_POOL_SIZE = 4;

    private ExecutorService executorService = Executors.newFixedThreadPool(EXECUTOR_THREAD_POOL_SIZE);
    private final HazelcastInstance hazelcastInstance;
    private final GenericResponseTracker<CardLookupResponseDto> cardByPanResponseTracker;
    private final GenericResponseTracker<CardLookupResponseDto> cardByFriendResponseTracker;
    private final CardLookupResponseDtoMapper cardLookupResponseDtoMapper;
    private final HazelRelTopicConfigProps hazelRelTopicConfigProps;

    public CardOrcaService(HazelcastInstance hazelcastInstance,
                           GenericResponseTracker<CardLookupResponseDto> cardByPanResponseTracker,
                           GenericResponseTracker<CardLookupResponseDto> cardByFriendResponseTracker,
                           CardLookupResponseDtoMapper cardLookupResponseDtoMapper,
                           HazelRelTopicConfigProps hazelRelTopicConfigProps
                           ) {
        this.hazelcastInstance = hazelcastInstance;
        this.cardByPanResponseTracker = cardByPanResponseTracker;
        this.cardByFriendResponseTracker = cardByFriendResponseTracker;
        this.cardLookupResponseDtoMapper = cardLookupResponseDtoMapper;
        this.hazelRelTopicConfigProps = hazelRelTopicConfigProps;
    }

    public ResponseEntity<ApiResponse<osplus.pkppuma.rest.card.lookup.model.CardLookupResponseDto>> publishCardByPanRequest(String requestPayload) {
        try {
            String correlationId = UUID.randomUUID().toString();

            PanDto.Builder builder = PanDto.newBuilder();
            JsonFormat.parser().ignoringUnknownFields().merge(requestPayload, builder);
            PanDto panDto = builder.build();

            CardLookupByPanRequestDto cardLookupByPanRequestDto = CardLookupByPanRequestDto.newBuilder().
                    setPan(panDto).build();

            CardLookupByPanRequestWrapperDto wrapper =
                    CardLookupByPanRequestWrapperDto.newBuilder()
                                    .setCorrelationId(correlationId)
                                            .setPayload(cardLookupByPanRequestDto).build();


            sendMessage(hazelRelTopicConfigProps.panToCardReq(),
                    CARD_LOOKUP_BY_PAN, wrapper);

            cardByPanResponseTracker.register(correlationId);

            CompletableFuture<CardLookupResponseDto> future = cardByPanResponseTracker.await(correlationId);

            CardLookupResponseDto protoResponse = future.get(5, TimeUnit.SECONDS);

            osplus.pkppuma.rest.card.lookup.model.CardLookupResponseDto restResponse =
                    cardLookupResponseDtoMapper.toRestDto(protoResponse);

            return ResponseEntity.ok(new ApiResponse<>("success", null, restResponse));

        } catch (TimeoutException te) {
            return ResponseEntity.status(HttpStatus.REQUEST_TIMEOUT)
                    .body(new ApiResponse<>("timeout", "No response in 5 seconds", null));

        } catch (Exception e) {
            LOGGER.error("Failed to process publishCardByPanRequest", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>("error", "Internal server error", null));
        }
    }

    public ResponseEntity<ApiResponse<osplus.pkppuma.rest.card.lookup.model.CardLookupResponseDto>> publishCardByFriendRequest(String requestPayload) {
        try {
            String correlationId = UUID.randomUUID().toString();

            FriendDto.Builder builder = FriendDto.newBuilder();
            JsonFormat.parser().ignoringUnknownFields().merge(requestPayload, builder);
            FriendDto friendDto = builder.build();

            CardLookupByFriendRequestDto cardLookupByFriendRequestDto = CardLookupByFriendRequestDto.newBuilder().
                    setFriend(friendDto).build();

            CardLookupByFriendRequestWrapperDto wrapper =
                    CardLookupByFriendRequestWrapperDto.newBuilder()
                            .setCorrelationId(correlationId)
                            .setPayload(cardLookupByFriendRequestDto).build();


            sendMessage(hazelRelTopicConfigProps.friendToCardReq(),
                    CARD_LOOKUP_BY_FRIEND, wrapper);

            cardByFriendResponseTracker.register(correlationId);

            CompletableFuture<CardLookupResponseDto> future = cardByFriendResponseTracker.await(correlationId);

            CardLookupResponseDto protoResponse = future.get(5, TimeUnit.SECONDS);

            osplus.pkppuma.rest.card.lookup.model.CardLookupResponseDto restResponse =
                    cardLookupResponseDtoMapper.toRestDto(protoResponse);

            return ResponseEntity.ok(new ApiResponse<>("success", null, restResponse));

        } catch (TimeoutException te) {
            return ResponseEntity.status(HttpStatus.REQUEST_TIMEOUT)
                    .body(new ApiResponse<>("timeout", "No response in 5 seconds", null));

        } catch (Exception e) {
            LOGGER.error("Failed to process publishCardByFriendRequest", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>("error", "Internal server error", null));
        }
    }


    /**
     * Initialisiert nach dem Start der Bean die Listener für eingehende Antworten auf Hazelcast-Themen.
     */
    @PostConstruct
    public void initResponseListeners() {
        HazelcastListenerUtils.registerGenericResponseListener(
                hazelcastInstance,
                hazelRelTopicConfigProps.panToCardRes(),
                CardLookupByPanResponseWrapperDto.parser(),
                CardLookupByPanResponseWrapperDto::getCorrelationId,
                CardLookupByPanResponseWrapperDto::getResponse,
                cardByPanResponseTracker::complete,
                LOGGER,
                executorService
        );

        HazelcastListenerUtils.registerGenericResponseListener(
                hazelcastInstance,
                hazelRelTopicConfigProps.friendToCardRes(),
                CardLookupByFriendResponseWrapperDto.parser(),
                CardLookupByFriendResponseWrapperDto::getCorrelationId,
                CardLookupByFriendResponseWrapperDto::getResponse,
                cardByFriendResponseTracker::complete,
                LOGGER,
                executorService
        );
    }


    private void sendMessage(String topicName, String traceCode, Message payload) {
        try {
            ITopic<byte[]> topic = hazelcastInstance.getReliableTopic(topicName);
            topic.publish(payload.toByteArray());
            LOGGER.info("Published to topic [" + topicName + "] for trace " + traceCode);
        } catch (Exception e) {
            throw new RuntimeException("Failed to publish to topic " + topicName, e);
        }
    }
}
