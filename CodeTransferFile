// --- FlowHandlerTestConfiguration.java ---
package osplus.pkptuna.hazelcast.test.config;

import com.google.protobuf.InvalidProtocolBufferException;
import com.hazelcast.core.HazelcastInstance;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
osplus.apl.core.api.administration.metrics.MetricsService;
osplus.fi.core.logging.api.Logger;
osplus.fi.core.logging.api.LoggerFactory;
osplus.pkptuna.hazelcast.config.FlowConfig;
osplus.pkptuna.hazelcast.config.FlowHandlerInitializer;
osplus.pkptuna.hazelcast.config.HazelcastFlowBootstrap;
osplus.pkptuna.hazelcast.flows.FlowHandler;
osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;
osplus.pkptuna.hazelcast.pubsub.GenericHazelcastConsumer;
osplus.pkptuna.hazelcast.pubsub.GenericHazelcastRouter;

import java.util.*;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@TestConfiguration
public class FlowHandlerTestConfiguration {

    private static final Logger LOGGER = LoggerFactory.getLogger(FlowHandlerTestConfiguration.class);

    @Bean
    public FlowHandlerRegistry<DummyMessage, DummyMessage, DummyMessage> handlerRegistry() throws InvalidProtocolBufferException {
        FlowHandlerRegistry<DummyMessage, DummyMessage, DummyMessage> registry = new FlowHandlerRegistry<>();
        registry.register("myFlow", sampleFlowHandler());
        return registry;
    }

    @Bean
    public FlowHandlerInitializer flowHandlerInitializer(List<FlowConfig> configs,
                                                         Map<String, FlowHandler> handlerMap,
                                                         FlowHandlerRegistry registry,
                                                         HazelcastFlowBootstrap bootstrap) {
        return new FlowHandlerInitializer(configs, handlerMap, registry, bootstrap);
    }

    @Bean
    public FlowConfig flowConfig() {
        return new FlowConfig("myFlow",
                "req-topic" + UUID.randomUUID(),
                "res-topic" + UUID.randomUUID(),
                "map-", 1);
    }

    @Bean
    public List<FlowConfig> flowConfigs(FlowConfig flowConfig) {
        return List.of(flowConfig);
    }

    @Bean
    public Map<String, FlowHandler> handlerMap() throws InvalidProtocolBufferException {
        return Map.of("myFlow", sampleFlowHandler());
    }

    @Bean
    public FlowHandler<DummyMessage, DummyMessage, DummyMessage> sampleFlowHandler() throws InvalidProtocolBufferException {
        FlowHandler<DummyMessage, DummyMessage, DummyMessage> handler = mock(FlowHandler.class);

        DummyMessage dummyRequest = new DummyMessage();
        DummyMessage dummyResponse = new DummyMessage();

        when(handler.getFlowName()).thenReturn("myFlow");
        when(handler.deserializeRequest(any())).thenReturn(dummyRequest);
        when(handler.extractCorrelationId(any())).thenReturn("corr-" + dummyRequest.hashCode());
        when(handler.handleRequest(any())).thenReturn(dummyResponse);
        when(handler.wrapResponse(anyString(), any())).thenReturn(dummyResponse);

        doAnswer(invocation -> {
            String topic = invocation.getArgument(1);
            Object response = invocation.getArgument(2);
            testCollector().recordSent(topic, response);
            return null;
        }).when(handler).sendResponse(any(HazelcastInstance.class), anyString(), any());

        return handler;
    }

    @Bean
    public HazelcastFlowBootstrap hazelcastFlowBootstrap(GenericHazelcastRouter router,
                                                         GenericHazelcastConsumer consumer) {
        return new HazelcastFlowBootstrap(router, consumer);
    }

    @Bean
    public GenericHazelcastRouter<DummyMessage, DummyMessage, DummyMessage> hazelcastRouter(
            MetricsService metricsService,
            HazelcastInstance hazelcastInstance,
            List<FlowConfig> flowConfigs,
            FlowHandlerRegistry<DummyMessage, DummyMessage, DummyMessage> registry) {
        return new GenericHazelcastRouter<>(metricsService, hazelcastInstance, flowConfigs, registry);
    }

    @Bean
    public GenericHazelcastConsumer<DummyMessage, DummyMessage, DummyMessage> hazelcastConsumer(
            MetricsService metricsService,
            HazelcastInstance hazelcastInstance,
            List<FlowConfig> flowConfigs,
            FlowHandlerRegistry<DummyMessage, DummyMessage, DummyMessage> registry) {
        return new GenericHazelcastConsumer<>(metricsService, hazelcastInstance, flowConfigs, registry);
    }

    @Bean("flowTaskScheduler")
    public ThreadPoolTaskScheduler taskScheduler() {
        ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
        scheduler.setPoolSize(1);
        scheduler.setThreadNamePrefix("hazelcast-scheduler-");
        scheduler.initialize();
        return scheduler;
    }

    @Bean
    public TestCollector testCollector() {
        return new TestCollector();
    }

    @Bean
    @Primary
    public MetricsService metricsService() {
        return mock(MetricsService.class);
    }

    public static class TestCollector {
        private final Map<String, Object> sentResponses = new HashMap<>();

        public void recordSent(String topic, Object response) {
            sentResponses.put(topic, response);
        }

        public Object getSent(String topic) {
            return sentResponses.get(topic);
        }

        public boolean wasSent(String topic) {
            return sentResponses.containsKey(topic);
        }

        public void clear() {
            sentResponses.clear();
        }
    }
}



