Hintergrund
Die zukünftigen Payment-Anwendungen im Globalkonzept der Container-Plattform müssen auf die DB2-Tabellen der POS- bzw. GA-Kopfstelle (mit statischem SQL) zugreifen.

Aus Sicht der Entwicklung erfolgt die Implementierung unter Verwendung von SQLj und dem existierenden maven-Plugin (SQLJ-Maven-Plugin - DynS Entwicklerhandbuch - Wiki-System).

Beistellungsanforderung
Es ist ein Verfahren zu entwickeln, mit dem die Bind-Dateien an das entsprechende DB2 gebunden werden. Die Bereitstellung soll zu Rel. 25.0 erfolgen.

Lösungsidee
Es gibt potenziell zwei Optionen. Einerseits könnte sich das Verfahren an den Prozessen von OSPE (inkl. Code-Pipeline) orientieren.

→ Potenziell großer Aufwand.

Alternativ könnte MiWe die Beauftragung von UNX ohne Code-Pipeline durchführen. Ist das überhaupt erlaubt?→ Als Subtask vermutlich ja 

Ablauf des Verfahrens ohne Code-Pipeline:
Vorbedingung

Vor dem Deployment in Produktion (bzw. ab Stage Abnahme) muss mit DBIQ ein Quality-Check erfolgt sein. Das muss im Build-Prozess integriert sein.
Es ist weiterhin zwingend erforderlich, dass die*.jdbrm-Dateien, die durch Maven im Build erzeugt werden, eine spezifische Namenskonvention aufweisen, die bisher von keinen bestehenden Membern genutzt wird.
(Das *.jdbrm ist ein zip-Archiv mit DBRM-Dateien und dbrm.binding.info)



Build

Beim Build durch jenkins ist die *.jdbrm-Datei in einem für UNX zugänglichem Verzeichnis zu speichern. Entweder direkt auf der MT00 oder an einem anderen Übergabepunkt, von dem UNX die Datei herunterladen kann.


Deployment

MiWe bekommt im Rahmen des Depoyments die Anforderung Vorarbeiten als Subtask durchzuführen (aka DB2-Bind)
Hierzu erstellt MiWe einen UNX-Auftrag (Per REST-Service) mit den folgenden Informationen:
Wo liegen die Dateien
Wohin müssen die Dateien Deployed werden (Potenzielle Zielsysteme sind in ETAPS G030, G050, G012, G094 und in Produktion WL04, WL05,IM01).
UNX verteilt (per File-Transfer) die Dateien auf die angegebenen Zielsysteme und führt dort das Binding (installieren) durch den Aufruf der entsprechenden Prozesse auf den Zielsystemen auf.
In ETAPS betrifft das die DB2T,DB2R,DB2Q und in Produktion DB2C/DB2B und DL2A
UNX meldet an MiWe das Ergebnis der Installation zurück.
Das geschieht entweder als Aufruf des bestehenden REST-Service oder durch Versand einer Nachricht via MQ
MiWe führt die Installation der Anwendungen mit dem etablierten Verfahren fort.


Offene Punkte
Wie kommen die Dateien auf den Host ()?
Andreas Wagner und Matthias Kutz prüfen ob ein Download mit curl möglich ist.
Nico Enking müsste prüfen, ob über Jenkins die Dateien auf der MT00 abgelegt werden können
Jakobs, Marcel legt Dateien (jdbrm) auf dem webdav ab (im Zweifel per winscp)
Wie wird die Rückmeldung an MiWe übertragen?
Option REST-Service: Kutz, Matthias  erstellt eine Aufwandsschätzung - Haug, Nils verteilt die Schnittstellenspezifikation (REST-API für Subtask Status Rückmeldungen)
Option MQ: Nils Haug, Matthias Kutz, Marcel Grosser und Stephan Söder Service-Now-Plattform
Ist ein Remote-Binding möglich?
Sascha Rogmann müsste klären, ob ein Binding auf der Stage1 auch remote (im Rahmen des Builds) möglich ist.
Wie ist das Mapping der Gruppenbezeichnungen zwischen MiWe und UNX abzubilden?
Zeitplan
Die MKP-Anwendungen, die die Funktionalitäten benötigen, müssen zu Rel. 25.0 in Produktion gehen.

UNX/MiWe:

Das Verfahren zum 22.3. (FISP 25b) bereitzustellen ist sportlich.



Potenziell benötigte OEn und Aufwandsindikation
5234 Deploment-Verfahren/MiWe (Entwicklung) - 20 PT
5312 UNX (Entwicklung) - 40 PT
5562 Datenmanagement (fachliche Unterstützung/Test) - 5PT
5610 Jenkins (fachliche Unterstützung/Test) - 5PT
5653 DynS (fachliche Unterstützung/Test) - 5PT
Rücksprache am 27.09.2024
Teilnehmer
Matthias Kutz (5312)
Nils Haug (5234)
Andreas Wagner (5562)
Mirko Reinken (4600)
Timm Caporale (4654)
