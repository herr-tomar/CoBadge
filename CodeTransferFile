package osplus.pkptuna.service;

import com.hazelcast.config.Config;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.topic.ITopic;
import com.hazelcast.topic.MessageListener;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import osplus.apl.core.test.utils.AplTestRunner;
import osplus.apl.core.test.utils.BaseAplTest;
import osplus.pkptuna.configprops.HazelRelTopicConfigProps;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupRequestDto;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupRequestWrapperDto;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupResponseDto;
import osplus.pkptuna.dispute.model.DisputeDetailRequestDto;
import osplus.pkptuna.dispute.model.DisputeDetailRequestWrapperDto;
import osplus.pkptuna.dispute.model.DisputeResponseDto;
import osplus.pkptuna.rest.dispute.lookup.model.mapper.DisputeLookupResponseDtoMapper;
import osplus.pkptuna.rest.dispute.model.mapper.DisputeResponseDtoMapper;
import osplus.pkptuna.util.GenericResponseTracker;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;

@SpringBootTest(classes = {
        AplTestRunner.class,
        DisputeOrcaServiceTest.TestConfig.class
}, properties = {
        "hazelcast.topic.dispute-detail-lookup-req=DisputeDetailRequestReliableTopic",
        "hazelcast.topic.dispute-detail-lookup-res=DisputeDetailResponseReliableTopic",
        "hazelcast.topic.disputes-lookup-req=DisputeLookupRequestReliableTopic",
        "hazelcast.topic.disputes-lookup-res=DisputeLookupResponseReliableTopic",
        "apl.application.name=uui",
        "apl.application.version=0.0.1-TEST"
})
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class DisputeOrcaServiceTest extends BaseAplTest {

    @Autowired
    private DisputeOrcaService disputeOrcaService;

    @Autowired
    private HazelcastInstance hazelcastInstance;

    @Autowired
    private GenericResponseTracker<DisputeLookupResponseDto> disputeLookupResponseTracker;

    @Autowired
    private GenericResponseTracker<DisputeResponseDto> disputeDetailResponseTracker;

    @Autowired
    private HazelRelTopicConfigProps hazelRelTopicConfigProps;

    private ITopic<byte[]> lookupTopic;
    private ITopic<byte[]> detailTopic;

    @BeforeEach
    void setupTopics() {
        lookupTopic = hazelcastInstance.getReliableTopic(hazelRelTopicConfigProps.disputesLookupReq());
        detailTopic = hazelcastInstance.getReliableTopic(hazelRelTopicConfigProps.disputeDetailLookupReq());
    }

    @Test
    void lookupDisputeFolder_shouldSendAndReceiveRealProto() {
        lookupTopic.addMessageListener((MessageListener<byte[]>) message -> {
            try {
                var req = DisputeLookupRequestWrapperDto.parseFrom(message.getMessageObject());
                var res = DisputeLookupResponseDto.newBuilder()
                        .setIssuerId(req.getPayload().getIssuerId())
                        .setCardReference(req.getPayload().getCardReference())
                        .build();
                disputeLookupResponseTracker.complete(req.getCorrelationId(), res);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });

        var response = disputeOrcaService.lookupDisputeFolder("issuer-001", "card-abc");

        assertEquals(200, response.getStatusCodeValue());
        assertEquals("success", response.getBody().getStatus());
        assertEquals("issuer-001", response.getBody().getData().getIssuerId());
    }

    @Test
    void publishDisputeDetailRequest_shouldSendAndReceiveRealProto() {
        detailTopic.addMessageListener((MessageListener<byte[]>) message -> {
            try {
                var req = DisputeDetailRequestWrapperDto.parseFrom(message.getMessageObject());
                var res = DisputeResponseDto.newBuilder()
                        .setIssuerId(req.getPayload().getIssuerId())
                        .setDisputeFolderReference(req.getPayload().getDisputeFolderReference())
                        .build();
                disputeDetailResponseTracker.complete(req.getCorrelationId(), res);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });

        var response = disputeOrcaService.publishDisputeDetailRequest("issuer-002", "folder123", "events,documents");

        assertEquals(200, response.getStatusCodeValue());
        assertEquals("success", response.getBody().getStatus());
        assertEquals("issuer-002", response.getBody().getData().getIssuerId());
    }

    @TestConfiguration
    @EnableConfigurationProperties(HazelRelTopicConfigProps.class)
    static class TestConfig {

        @Bean(destroyMethod = "shutdown")
        public HazelcastInstance hazelcastInstance() {
            Config config = new Config();
            config.setClusterName("test-cluster-" + UUID.randomUUID());
            config.getNetworkConfig().setPortAutoIncrement(true);
            config.setProperty("hazelcast.logging.type", "slf4j");
            return Hazelcast.newHazelcastInstance(config);
        }

        @Bean
        public DisputeLookupResponseDtoMapper lookupMapper() {
            return new DisputeLookupResponseDtoMapper();
        }

        @Bean
        public DisputeResponseDtoMapper detailMapper() {
            return new DisputeResponseDtoMapper();
        }

        @Bean
        public GenericResponseTracker<DisputeLookupResponseDto> lookupResponseTracker() {
            return new GenericResponseTracker<>();
        }

        @Bean
        public GenericResponseTracker<DisputeResponseDto> detailResponseTracker() {
            return new GenericResponseTracker<>();
        }

        @Bean
        public DisputeOrcaService disputeOrcaService(
                HazelcastInstance hazelcastInstance,
                DisputeLookupResponseDtoMapper lookupMapper,
                DisputeResponseDtoMapper detailMapper,
                GenericResponseTracker<DisputeResponseDto> detailTracker,
                GenericResponseTracker<DisputeLookupResponseDto> lookupTracker,
                HazelRelTopicConfigProps props
        ) {
            return new DisputeOrcaService(
                    hazelcastInstance,
                    lookupMapper,
                    detailMapper,
                    detailTracker,
                    lookupTracker,
                    props
            );
        }
    }
}
