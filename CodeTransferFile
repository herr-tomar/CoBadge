package osplus.pkptuna.hazelcast.config;

import com.hazelcast.config.Config;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;
import osplus.pkptuna.hazelcast.pubsub.GenericHazelcastConsumer;
import osplus.pkptuna.hazelcast.pubsub.GenericHazelcastRouter;
import osplus.pkptuna.hazelcast.pubsub.ReliableTopicPublisher;

import java.util.List;
import java.util.Map;

@Configuration
public class RealFlowHandlerTestConfiguration {

    @Bean(destroyMethod = "shutdown")
    public HazelcastInstance hazelcastInstance() {
        return Hazelcast.newHazelcastInstance(new Config());
    }

    @Bean
    public ReliableTopicPublisher reliableTopicPublisher(HazelcastInstance hazelcastInstance) {
        return new ReliableTopicPublisher(hazelcastInstance);
    }

    @Bean
    public FlowHandlerRegistry<String, FlowHandler<?, ?>> flowHandlerRegistry() {
        return new FlowHandlerRegistry<>();
    }

    @Bean
    public FlowHandler<String, String> testFlowHandler() {
        return new FlowHandler<>() {
            @Override
            public String deserializeRequest(byte[] data) {
                return new String(data);
            }

            @Override
            public String extractCorrelationId(String request) {
                return "corr-id-" + request.hashCode();
            }

            @Override
            public String handleRequest(String request) {
                return request.toUpperCase();
            }

            @Override
            public Object wrapResponse(String correlationId, String result) {
                return correlationId + ":" + result;
            }

            @Override
            public void sendResponse(HazelcastInstance hazelcastInstance, String topicName, Object response) {
                hazelcastInstance.getReliableTopic(topicName).publish(response);
            }

            @Override
            public String getFlowName() {
                return "myFlow";
            }
        };
    }

    @Bean
    public GenericHazelcastRouter genericHazelcastRouter(
            FlowHandlerRegistry<String, FlowHandler<?, ?>> registry,
            ReliableTopicPublisher publisher
    ) {
        return new GenericHazelcastRouter(registry, publisher);
    }

    @Bean
    public GenericHazelcastConsumer genericHazelcastConsumer(
            FlowHandlerRegistry<String, FlowHandler<?, ?>> registry,
            HazelcastInstance hazelcastInstance
    ) {
        return new GenericHazelcastConsumer(registry, hazelcastInstance);
    }

    @Bean
    public HazelcastFlowBootstrap hazelcastFlowBootstrap(GenericHazelcastRouter router,
                                                         GenericHazelcastConsumer consumer) {
        return new HazelcastFlowBootstrap(router, consumer);
    }

    @Bean
    public FlowHandlerInitializer flowHandlerInitializer(
            FlowHandlerRegistry<String, FlowHandler<?, ?>> registry,
            HazelcastFlowBootstrap bootstrap,
            FlowHandler<String, String> testFlowHandler
    ) {
        FlowConfig config = new FlowConfig("myFlow", "req", "res", "map-", 1);
        Map<String, FlowHandler<?, ?>> handlerMap = Map.of("myFlow", testFlowHandler);
        return new FlowHandlerInitializer(List.of(config), handlerMap, registry, bootstrap);
    }
}
---

package osplus.pkptuna.hazelcast.config;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(classes = { RealFlowHandlerTestConfiguration.class })
class FlowHandlerInitializerTest {

    @Autowired
    FlowHandlerInitializer initializer;

    @Autowired
    FlowHandlerRegistry<String, FlowHandler<?, ?>> registry;

    @Test
    void testRegisterHandlers_successfulRegistration() {
        assertDoesNotThrow(initializer::registerHandlers);
        assertTrue(registry.contains("myFlow"));  // Flow name defined in test config
    }

    @Test
    void testRegisterHandlers_missingHandlerThrowsException() {
        FlowConfig config = new FlowConfig("missingFlow", "req", "res", "map-", 1);
        FlowHandlerInitializer missingInit = new FlowHandlerInitializer(
                java.util.List.of(config), java.util.Map.of(), registry, null
        );

        Exception ex = assertThrows(IllegalArgumentException.class, missingInit::registerHandlers);
        assertTrue(ex.getMessage().contains("No FlowHandler registered for flow: missingFlow"));
    }
}
