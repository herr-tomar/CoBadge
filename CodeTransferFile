@Test
void assertThatDisputeFolderDetailsReturnsExpectedResult() throws Exception {
    // Arrange – prepare expected response
    DisputeResponseDto expectedResponse = DisputeResponseDto.newBuilder()
            .setResponseMetadata(ResponseMetadataDto.newBuilder()
                    .setCorrelationId("test-correlation-id")
                    .setLinks(LinksDto.newBuilder()
                            .setSelf("/x/{x}?x=x")
                            .setNext("/x/{x}?page[offset]=2"))
                    .setStatusMessage("Executed successfully")
                    .setStatusCode(200)
                    .setResponseDateTime(Timestamps.parse("2025-06-20T08:27:48.516Z"))
                    .setTimeTakenMs(40))
            .setData(DataDto.newBuilder()
                    .setIssuerId("1001")
                    .setDisputeFolderIdentifier(DisputeFolderIdentifierDto.newBuilder()
                            .setDisputeFolderReference("116855")
                            .setIssuerDisputeExternalReference(""))
                    .setTransactionAmount(AmountDto.newBuilder()
                            .setValue(4100)
                            .setExponent(2)
                            .setIsoCode("EUR"))
                    .setTransactionTime(Timestamps.parse("2024-12-09T23:00:00Z"))
                    .setAcquirerReferenceData("02012704346316430260382")
                    .setStatusCode("OPEN")
                    .setCreationDate(Timestamps.parse("2024-12-11T08:56:48.490Z"))
                    .setLastMessageDate(Timestamps.parse("2024-12-11T08:56:48.472Z"))
                    .setTransmissionDate(Timestamps.parse("2024-12-09T23:00:00Z")))
            .build();

    String jsonResponse = JsonFormat.printer()
            .includingDefaultValueFields()
            .print(expectedResponse);

    mockWebServer.enqueue(new MockResponse()
            .setResponseCode(200)
            .setHeader("Content-Type", "application/json")
            .setBody(jsonResponse));

    // Act
    DisputeResponseDto result = disputeDetailService.getDisputeFolderDetails("1001", "116855", null);

    // Assert
    assertThat(result).as("Response should not be null").isNotNull();
    assertThat(result.hasData()).as("Expected data section").isTrue();

    DataDto data = result.getData();

    assertThat(data.getIssuerId()).as("Issuer ID mismatch").isEqualTo("1001");
    assertThat(data.getStatusCode()).as("Status Code mismatch").isEqualTo("OPEN");
    assertThat(data.getDisputeFolderIdentifier().getDisputeFolderReference())
            .as("Folder reference mismatch")
            .isEqualTo("116855");
}


----


@Test
void assertThatDisputeFolderDetailsReturnsEmptyOnNullResponse() {
    // Arrange – simulate an empty response
    mockWebServer.enqueue(new MockResponse()
            .setResponseCode(200)
            .setHeader("Content-Type", "application/json")
            .setBody(""));

    // Act
    DisputeResponseDto result = disputeDetailService.getDisputeFolderDetails("1001", "116855", null);

    // Assert – expect fallback empty response
    assertThat(result).as("Response should not be null").isNotNull();
    assertThat(result.hasData()).as("Expected no data in response").isFalse();
}
