@Test
public void testMessageRoutedSuccessfully() throws Exception {
    // Clear maps and allow router to become leader
    leaderMap.clear();
    heartbeatMap.clear();

    router.setRouterInstanceId(routerInstanceId);
    router.initRouters();

    // Prepare a valid request
    Map<String, Object> request = Map.of("key", "value");
    String corrId = sampleFlowHandler.extractCorrelationId(request);
    topic.publish(new ObjectMapper().writeValueAsBytes(request));

    await()
        .atMost(2, TimeUnit.SECONDS)
        .pollInterval(50, TimeUnit.MILLISECONDS)
        .untilAsserted(() -> {
            // 1. Entry should exist in target map
            assertTrue(targetMap.containsKey(corrId), "Expected message to be written to map");

            // 2. Claim should be registered for router
            assertEquals(routerInstanceId, routerMap.get("route-lock-" + corrId), "Claim should be recorded by router");
        });
}

@Test
public void testDuplicateMessageNotProcessed() throws Exception {
    router.setRouterInstanceId(routerInstanceId);
    leaderMap.put("active-router", routerInstanceId);
    heartbeatMap.put("heartbeat", System.currentTimeMillis());

    router.initRouters();

    Map<String, Object> requestMap = Map.of("dup", "check");
    String corrId = sampleFlowHandler.extractCorrelationId(requestMap);
    routerMap.put("route-lock-" + corrId, "existing"); // Simulate pre-existing claim

    topic.publish(new ObjectMapper().writeValueAsBytes(requestMap));

    await()
        .during(1, TimeUnit.SECONDS)
        .atMost(2, TimeUnit.SECONDS)
        .untilAsserted(() -> {
            assertFalse(targetMap.containsKey(corrId), "Duplicate message should not be processed");
        });
}


@Test
public void testRoutingHandlerThrowsException() throws Exception {
    router.setRouterInstanceId(routerInstanceId);
    leaderMap.put("active-router", routerInstanceId);
    heartbeatMap.put("heartbeat", System.currentTimeMillis());

    router.initRouters();

    Map<String, Object> faulty = Map.of("key", "faultyRequest"); // triggers handler failure
    String corrId = sampleFlowHandler.extractCorrelationId(faulty);
    topic.publish(new ObjectMapper().writeValueAsBytes(faulty));

    await()
        .during(1, TimeUnit.SECONDS)
        .atMost(2, TimeUnit.SECONDS)
        .untilAsserted(() -> {
            assertFalse(targetMap.containsKey(corrId), "Faulty message should not be routed");
        });
}

