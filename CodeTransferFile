@Test
void assertThatDisputeFolderDetailsReturnsExpectedResult() throws Exception {
    // Given
    DisputeFolderIdentifierDto folderId = DisputeFolderIdentifierDto.newBuilder()
            .setDisputeFolderReference("116855")
            .build();

    AmountDto transactionAmount = AmountDto.newBuilder()
            .setValue(4100)
            .setExponent(2)
            .setIsoCode("EUR")
            .build();

    DataDto data = DataDto.newBuilder()
            .setIssuerId("1001")
            .setDisputeFolderIdentifier(folderId)
            .setTransactionAmount(transactionAmount)
            .setTransactionTime(Timestamps.parse("2024-12-09T23:00:00Z"))
            .setStatusCode("OPEN")
            .build();

    ResponseMetadataDto metadata = ResponseMetadataDto.newBuilder()
            .setCorrelationId("test-correlation-id")
            .setStatusCode(200)
            .build();

    DisputeResponseDto expectedResponse = DisputeResponseDto.newBuilder()
            .setResponseMetadata(metadata)
            .setData(data)
            .build();

    String jsonResponse = JsonFormat.printer()
            .includingDefaultValueFields()
            .print(expectedResponse);

    System.out.println("Sending Mock JSON: " + jsonResponse);

    mockWebServer.enqueue(new MockResponse()
            .setResponseCode(200)
            .setBody(jsonResponse)
            .addHeader("Content-Type", "application/json"));

    // When
    DisputeResponseDto result = disputeDetailService.getDisputeFolderDetails("1001", "116855", null);

    // Then
    System.out.println("Parsed Result: " + result);
    assertThat(result).isNotNull();
    assertThat(result.hasData()).as("Expected data section").isTrue();
    assertThat(result.getData().getDisputeFolderIdentifier().getDisputeFolderReference())
            .as("Expected disputeFolderReference").isEqualTo("116855");
    assertThat(result.getData().getIssuerId()).isEqualTo("1001");
    assertThat(result.getData().getStatusCode()).isEqualTo("OPEN");
}
