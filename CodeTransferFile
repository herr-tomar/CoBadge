package osplus.pkptuna.flows.handlers;

import jakarta.annotation.PostConstruct;
import osplus.apl.core.api.AplComponent;
import osplus.fi.core.logging.api.Logger;
import osplus.fi.core.logging.api.LoggerFactory;
import osplus.pkptuna.dispute.create.model.DisputeCreateRequestDto;
import osplus.pkptuna.dispute.create.model.DisputeCreateRequestWrapperDto;
import osplus.pkptuna.dispute.create.model.DisputeCreateResponseDto;
import osplus.pkptuna.dispute.create.model.DisputeCreateResponseWrapperDto;
import osplus.pkptuna.dispute.service.DisputeService;
import osplus.pkptuna.hazelcast.flows.AbstractFlowHandler;
import osplus.pkptuna.hazelcast.protobuf.impl.ProtobufDeserializer;
import osplus.pkptuna.hazelcast.pubsub.ReliableTopicPublisher;

@AplComponent("dispute-create")
public class DisputeCreateFlowHandler extends
        AbstractFlowHandler<DisputeCreateRequestWrapperDto, DisputeCreateResponseDto, DisputeCreateResponseWrapperDto> {

    private static final Logger LOGGER = LoggerFactory.getLogger(DisputeCreateFlowHandler.class);
    private static final String FLOW_NAME = "dispute-create";
    private static final String TRACE_CODE = "DISPUTE-CREATE";
    private final DisputeService disputeService;

    public DisputeCreateFlowHandler(ReliableTopicPublisher<DisputeCreateResponseWrapperDto> reliableTopicPublisher, ProtobufDeserializer<DisputeCreateRequestWrapperDto> deserializer, DisputeService disputeService) {
        super(FLOW_NAME, TRACE_CODE, reliableTopicPublisher, deserializer);
        this.disputeService = disputeService;
    }

    @Override
    public String extractCorrelationId(DisputeCreateRequestWrapperDto request) {
        return request.getCorrelationId();
    }

    @Override
    public DisputeCreateResponseDto handleRequest(DisputeCreateRequestWrapperDto request) {
        DisputeCreateRequestDto dto = request.getPayload();
        return disputeService.createDispute(dto);
    }

    @Override
    public DisputeCreateResponseWrapperDto wrapResponse(String correlationId, DisputeCreateResponseDto result) {
        return DisputeCreateResponseWrapperDto.newBuilder()
                .setCorrelationId(correlationId)
                .setResponse(result)
                .build();
    }

    @PostConstruct
    void init() {
        LOGGER.info("DisputeCreateFlowHandler loaded and initialised.");
    }
}



------


package osplus.pkptuna.flows.handlers;

import com.hazelcast.core.HazelcastInstance;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import osplus.apl.core.test.utils.AplTestRunner;
import osplus.apl.core.test.utils.BaseAplTest;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupRequestDto;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupRequestWrapperDto;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupResponseDto;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupResponseWrapperDto;
import osplus.pkptuna.dispute.service.DisputeService;
import osplus.pkptuna.hazelcast.protobuf.impl.ProtobufDeserializer;
import osplus.pkptuna.hazelcast.pubsub.ReliableTopicPublisher;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@SpringBootTest(classes = {
        AplTestRunner.class,
        DisputeLookupFlowHandlerTest.TestConfig.class
},
        properties = {
                "spring.main.allow-bean-definition-overriding=true",
                "apl.application.name=uui",
                "apl.application.version=0.0.1-TEST"
        }
)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class DisputeLookupFlowHandlerTest extends BaseAplTest {

    @Autowired
    private DisputeLookupFlowHandler handler;

    @Autowired
    private DisputeService disputeService;

    /**
     * Testet die Extraktion der Korrelation-ID aus dem Wrapper.
     */
    @Test
    void shouldExtractCorrelationId() {
        DisputeLookupRequestWrapperDto request = DisputeLookupRequestWrapperDto.newBuilder()
                .setCorrelationId("lookup-001")
                .build();

        String result = handler.extractCorrelationId(request);

        assertEquals("lookup-001", result);
    }

    /**
     * Testet, ob der Lookup-Service korrekt aufgerufen wird.
     */
    @Test
    void shouldCallLookupService() {
        DisputeLookupRequestDto dto = DisputeLookupRequestDto.newBuilder()
                .setIssuerId("issuer")
                .setCardReference("cardRef")
                .build();

        DisputeLookupRequestWrapperDto request = DisputeLookupRequestWrapperDto.newBuilder()
                .setPayload(dto)
                .build();

        DisputeLookupResponseDto expected = DisputeLookupResponseDto.newBuilder().build();
        when(disputeService.lookupDisputeFolder("issuer", "cardRef")).thenReturn(expected);

        DisputeLookupResponseDto actual = handler.handleRequest(request);

        assertEquals(expected, actual);
    }

    /**
     * Testet das korrekte Verpacken des Lookup-Antwortobjekts.
     */
    @Test
    void shouldWrapResponseCorrectly() {
        DisputeLookupResponseDto response = DisputeLookupResponseDto.newBuilder().build();
        Object wrapped = handler.wrapResponse("corr-id", response);

        assertTrue(wrapped instanceof DisputeLookupResponseWrapperDto);
        assertEquals("corr-id", ((DisputeLookupResponseWrapperDto) wrapped).getCorrelationId());
    }

    @TestConfiguration
    static class TestConfig {
        @Bean
        public DisputeLookupFlowHandler disputeLookupFlowHandler(
                DisputeService disputeService,
                ReliableTopicPublisher reliableTopicPublisher,
                ProtobufDeserializer<DisputeLookupRequestWrapperDto> deserializer
        ) {
            return new DisputeLookupFlowHandler(reliableTopicPublisher, deserializer,disputeService);
        }

        @Bean
        public DisputeService disputeService() {
            return mock(DisputeService.class);
        }

        @Bean
        public ReliableTopicPublisher reliableTopicPublisher() {
            return mock(ReliableTopicPublisher.class);
        }

        @Bean
        public ProtobufDeserializer<DisputeLookupRequestWrapperDto> deserializer() {
            return mock(ProtobufDeserializer.class);
        }

        @Bean
        public HazelcastInstance hazelcastInstance() {
            return mock(HazelcastInstance.class);
        }
    }
}


