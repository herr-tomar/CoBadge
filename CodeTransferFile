@Test
public void testMessageRoutedSuccessfully() throws Exception {
    // Clear and re-init
    leaderMap.clear();
    heartbeatMap.clear();
    routerMap.clear();
    targetMap.clear();
    testCollector.clear();

    router.setRouterInstanceId(routerInstanceId);
    router.initRouters();

    Thread.sleep(500); // Let router subscribe

    // Wait for leadership
    await().atMost(5, TimeUnit.SECONDS)
           .pollInterval(100, TimeUnit.MILLISECONDS)
           .until(() -> routerInstanceId.equals(leaderMap.get("active-router")));

    // Prepare request
    Map<String, Object> request = Map.of("key", "value");
    String corrId = sampleFlowHandler.extractCorrelationId(request);

    // Assert no pre-existing claim
    assertFalse(routerMap.containsKey("route-lock-" + corrId));

    topic.publish(new ObjectMapper().writeValueAsBytes(request));

    await().atMost(5, TimeUnit.SECONDS)
           .pollInterval(100, TimeUnit.MILLISECONDS)
           .untilAsserted(() -> {
               assertTrue(testCollector.wasSent(flowConfig.responseTopic()));
               assertEquals("wrappedResponse", testCollector.getSent(flowConfig.responseTopic()));
               assertTrue(targetMap.containsKey(corrId));
           });
}
@Test
public void testDuplicateMessageNotProcessed() throws Exception {
    leaderMap.clear();
    heartbeatMap.clear();
    routerMap.clear();
    targetMap.clear();
    testCollector.clear();

    router.setRouterInstanceId(routerInstanceId);
    router.initRouters();

    Thread.sleep(500); // Let router subscribe

    Map<String, Object> requestMap = Map.of("dup", "check");
    String corrId = sampleFlowHandler.extractCorrelationId(requestMap);
    routerMap.put("route-lock-" + corrId, "existing"); // Simulate duplicate

    topic.publish(new ObjectMapper().writeValueAsBytes(requestMap));

    await().atMost(2, TimeUnit.SECONDS)
           .untilAsserted(() -> assertFalse(targetMap.containsKey(corrId)));
}
@Test
public void testRoutingHandlerThrowsException() throws Exception {
    leaderMap.clear();
    heartbeatMap.clear();
    routerMap.clear();
    targetMap.clear();
    testCollector.clear();

    router.setRouterInstanceId(routerInstanceId);
    router.initRouters();

    Thread.sleep(500); // Let router subscribe

    Map<String, Object> faulty = Map.of("key", "faultyRequest"); // Triggers exception
    String corrId = sampleFlowHandler.extractCorrelationId(faulty);

    topic.publish(new ObjectMapper().writeValueAsBytes(faulty));

    await().atMost(2, TimeUnit.SECONDS)
           .untilAsserted(() -> assertFalse(targetMap.containsKey(corrId)));
}

@Override
public String extractCorrelationId(Object request) {
    Map<?, ?> map = (Map<?, ?>) request;
    if (map.containsKey("key") && "faultyRequest".equals(map.get("key"))) {
        return "corr-fault";
    } else if (map.containsKey("key")) {
        return "corr-key";
    } else if (map.containsKey("dup")) {
        return "corr-dup";
    }
    return "corr-" + request.hashCode();
}
