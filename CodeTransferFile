package osplus.pkppuma.flows.handlers;

import com.hazelcast.core.HazelcastInstance;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import osplus.pkppuma.card.lookup.model.*;
import osplus.pkppuma.card.service.MappingService;
import osplus.pkppuma.hazelcast.protobuf.impl.ProtobufDeserializer;
import osplus.pkppuma.hazelcast.pubsub.ReliableTopicPublisher;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

/**
 * Testklasse f√ºr {@link CardLookupByPanFlowHandler}.
 */
@ExtendWith(MockitoExtension.class)
class CardLookupByPanFlowHandlerTest {

    @Mock
    private MappingService mappingService;

    @Mock
    private ReliableTopicPublisher reliableTopicPublisher;

    @Mock
    private ProtobufDeserializer<CardLookupByPanRequestWrapperDto> deserializer;

    @Mock
    private HazelcastInstance hazelcastInstance;

    @Mock
    private CardLookupByPanRequestWrapperDto requestWrapperDto;

    @Mock
    private CardLookupByPanRequestDto requestDto;

    @Mock
    private PanDto panDto;

    @Mock
    private CardDto cardDto;

    private CardLookupByPanFlowHandler handler;

    @BeforeEach
    void setUp() {
        handler = new CardLookupByPanFlowHandler(mappingService, reliableTopicPublisher, deserializer);
    }

    @Test
    void shouldExtractCorrelationId() {
        when(requestWrapperDto.getCorrelationId()).thenReturn("pan-corr-456");

        String result = handler.extractCorrelationId(requestWrapperDto);

        assertEquals("pan-corr-456", result);
    }

    @Test
    void shouldHandleRequestAndCallService() {
        when(requestWrapperDto.getPayload()).thenReturn(requestDto);
        when(requestDto.getPan()).thenReturn(panDto);
        when(mappingService.findCardByPan(panDto)).thenReturn(cardDto);

        CardLookupResponseDto result = handler.handleRequest(requestWrapperDto);

        assertEquals(cardDto, result.getCard());
    }

    @Test
    void shouldWrapResponseCorrectly() {
        CardLookupResponseDto response = CardLookupResponseDto.newBuilder()
                .setCard(cardDto)
                .build();

        Object wrapped = handler.wrapResponse("corr-id-pan", response);

        assertTrue(wrapped instanceof CardLookupByPanResponseWrapperDto);

        CardLookupByPanResponseWrapperDto actual = (CardLookupByPanResponseWrapperDto) wrapped;

        assertEquals("corr-id-pan", actual.getCorrelationId());
        assertEquals(cardDto, actual.getResponse().getCard());
    }
}
