package osplus.pkptuna.uimodule;

import com.hazelcast.core.HazelcastInstance;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import osplus.apl.uui.api.MethodType;
import osplus.apl.uui.api.ServiceParam;
import osplus.apl.uui.api.UiModule;
import osplus.apl.uui.api.UiService;
import osplus.fi.core.logging.api.Logger;
import osplus.fi.core.logging.api.LoggerFactory;
import osplus.pkptuna.api.ApiResponse;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupResponseDto;
import osplus.pkptuna.dispute.model.DisputeResponseDto;
import osplus.pkptuna.dispute.service.DisputeDetailService;
import osplus.pkptuna.dispute.service.DisputeService;
import osplus.pkptuna.rest.dispute.lookup.model.mapper.DisputeLookupResponseDtoMapper;
import osplus.pkptuna.rest.dispute.model.mapper.DisputeResponseDtoMapper;
import osplus.pkptuna.service.DisputeOrcaService;
import osplus.pkptuna.util.GenericResponseTracker;

import java.util.Arrays;
import java.util.List;

/**
 * APL UI-Modul zur Bereitstellung von Funktionen zur Streitfallabfrage und Detailanzeige
 * über das APL Runtime-Framework. Nutzt Hazelcast zur asynchronen Kommunikation mit Backend-Services.
 */
@UiModule("dispute")
public class DisputeUiModule {

    private static final Logger LOGGER = LoggerFactory.getLogger(DisputeUiModule.class);

    private final DisputeService disputeService;
    private final DisputeDetailService disputeDetailService;
    private final HazelcastInstance hazelcastInstance;

    private GenericResponseTracker<DisputeResponseDto> disputeDetailResponseTracker;

    private GenericResponseTracker<DisputeLookupResponseDto> disputeLookupResponseTracker;

    private final DisputeLookupResponseDtoMapper disputeLookupResponseDtoMapper;
    private final DisputeResponseDtoMapper disputeResponseDtoMapper;

    private final DisputeOrcaService disputeOrcaService;

    /**
     * Konstruktor zur Initialisierung mit benötigten Services.
     *
     * @param hazelcastInstance    Hazelcast-Instanz
     * @param disputeService       Service für Streitfall-Suchlogik
     * @param disputeDetailService Service für Detailabrufe zu Streitfällen
     */
    public DisputeUiModule(HazelcastInstance hazelcastInstance,
                           DisputeService disputeService,
                           DisputeDetailService disputeDetailService,
                           GenericResponseTracker disputeDetailResponseTracker,
                           GenericResponseTracker disputeLookupResponseTracker,
                           DisputeLookupResponseDtoMapper disputeLookupResponseDtoMapper,
                           DisputeResponseDtoMapper disputeResponseDtoMapper,
                           DisputeOrcaService disputeOrcaService
    ) {
        this.disputeService = disputeService;
        this.disputeDetailService = disputeDetailService;
        this.hazelcastInstance = hazelcastInstance;
        this.disputeDetailResponseTracker = disputeDetailResponseTracker;
        this.disputeLookupResponseTracker = disputeLookupResponseTracker;
        this.disputeLookupResponseDtoMapper = disputeLookupResponseDtoMapper;
        this.disputeResponseDtoMapper = disputeResponseDtoMapper;
        this.disputeOrcaService = disputeOrcaService;
    }

    /**
     * UI-Service-Endpunkt zur Prüfung, ob ein Streitfallordner existiert, und Rückgabe seiner Metadaten.
     *
     * @param issuerId      Die Kennung des Kartenherausgebers (Issuer)
     * @param cardReference Die Referenznummer der Karte
     * @return {@link ResponseEntity}, das eine {@link ApiResponse} mit einem
     * {@link osplus.pkptuna.rest.dispute.lookup.model.DisputeLookupResponseDto} enthält
     */
    @UiService(value = "disputeLookup", method = MethodType.GET, requiresAuthentication = false)
    @Deprecated
    public ResponseEntity<ApiResponse<osplus.pkptuna.rest.dispute.lookup.model.DisputeLookupResponseDto>> lookupDisputeFolder(
            @ServiceParam("issuerId") String issuerId,
            @ServiceParam("cardReference") String cardReference) {

        LOGGER.info("Received lookupDisputeFolder request for issuerId={} and cardReference={}", issuerId, cardReference);

        try {
            DisputeLookupResponseDto protoResponse = disputeService.lookupDisputeFolder(issuerId, cardReference);

            osplus.pkptuna.rest.dispute.lookup.model.DisputeLookupResponseDto restResponse =
                    disputeLookupResponseDtoMapper.toRestDto(protoResponse);

            return ResponseEntity.ok(new ApiResponse<>("success", null, restResponse));
        } catch (Exception e) {
            LOGGER.error("Failed to lookup dispute folder", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>("error", "Internal server error", null));
        }
    }

    /**
     * UI-Service-Endpunkt zum Abrufen von Detailinformationen zu einem bestimmten Streitfallordner.
     *
     * @param issuerId               Die ID des Herausgebers
     * @param disputeFolderReference Die Referenznummer des Streitfallordners
     * @param embed                  Kommagetrennte Liste (z.B. "events,documents"), was eingebettet werden soll
     * @return {@link ResponseEntity}, das eine {@link ApiResponse} mit einem
     * {@link osplus.pkptuna.rest.dispute.model.DisputeResponseDto} enthält
     */
    @UiService(value = "disputeDetails", method = MethodType.GET, requiresAuthentication = false)
    @Deprecated
    public ResponseEntity<ApiResponse<osplus.pkptuna.rest.dispute.model.DisputeResponseDto>> getDisputeDetails(
            @ServiceParam("issuerId") String issuerId,
            @ServiceParam("disputeFolderReference") String disputeFolderReference,
            @ServiceParam(value = "embed") String embed) {

        LOGGER.info("Fetching dispute folder details for issuerId={} and folderRef={} with embed={}",
                issuerId, disputeFolderReference, embed);

        try {
            List<String> embedList = (embed != null && !embed.isBlank())
                    ? Arrays.asList(embed.split("\\s*,\\s*"))
                    : null;

            DisputeResponseDto protoResponse = disputeDetailService.getDisputeFolderDetails(issuerId, disputeFolderReference, embedList);
            osplus.pkptuna.rest.dispute.model.DisputeResponseDto restResponse =
                    disputeResponseDtoMapper.toRestDto(protoResponse);

            return ResponseEntity.ok(new ApiResponse<>("success", null, restResponse));
        } catch (Exception e) {
            LOGGER.error("Failed to fetch dispute folder details", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>("error", "Internal server error", null));
        }
    }

    /**
     * UI-Service-Endpunkt zur asynchronen Übermittlung einer Dispute-Lookup-Anfrage über Hazelcast.
     * Antwort wird innerhalb von 5 Sekunden erwartet.
     *
     * @param issuerId      Herausgeberkennung
     * @param cardReference Kartenreferenz
     * @return {@link ResponseEntity}, das eine {@link ApiResponse} mit einem
     * {@link osplus.pkptuna.rest.dispute.lookup.model.DisputeLookupResponseDto} enthält
     */

    @UiService(value = "publishDisputesLookupRequest", method = MethodType.GET, requiresAuthentication = false)
    public ResponseEntity<ApiResponse<osplus.pkptuna.rest.dispute.lookup.model.DisputeLookupResponseDto>> publishDisputesLookupRequest(
            @ServiceParam("issuerId") String issuerId,
            @ServiceParam("cardReference") String cardReference) {

        return disputeOrcaService.publishLookupDisputeFolder(issuerId, cardReference);
    }

    /**
     * UI-Service-Endpunkt zur asynchronen Detailabfrage eines Streitfallordners über Hazelcast.
     *
     * @param issuerId               Herausgeberkennung
     * @param disputeFolderReference Referenznummer des Streitfallordners
     * @param embed                  Einzubettende Zusatzdaten (z.B. "events,documents")
     * @return {@link ResponseEntity}, das eine {@link ApiResponse} mit einem
     * {@link osplus.pkptuna.rest.dispute.model.DisputeResponseDto} enthält
     */
    @UiService(value = "publishDisputeDetailRequest", method = MethodType.GET, requiresAuthentication = false)
    public ResponseEntity<ApiResponse<osplus.pkptuna.rest.dispute.model.DisputeResponseDto>> publishDisputeDetailRequest(
            @ServiceParam("issuerId") String issuerId,
            @ServiceParam("disputeFolderReference") String disputeFolderReference,
            @ServiceParam(value = "embed") String embed) {

        return disputeOrcaService.publishDisputeDetailRequest(issuerId, disputeFolderReference, embed);
    }

}


-----------------------


package osplus.pkptuna.service;

import com.google.protobuf.Message;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.topic.ITopic;
import jakarta.annotation.PostConstruct;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import osplus.apl.core.api.AplComponent;
import osplus.fi.core.logging.api.Logger;
import osplus.fi.core.logging.api.LoggerFactory;
import osplus.pkptuna.api.ApiResponse;
import osplus.pkptuna.configprops.HazelRelTopicConfigProps;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupRequestDto;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupRequestMetadataDto;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupRequestWrapperDto;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupResponseDto;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupResponseWrapperDto;
import osplus.pkptuna.dispute.model.DisputeDetailRequestDto;
import osplus.pkptuna.dispute.model.DisputeDetailRequestMetadataDto;
import osplus.pkptuna.dispute.model.DisputeDetailRequestWrapperDto;
import osplus.pkptuna.dispute.model.DisputeDetailResponseWrapperDto;
import osplus.pkptuna.dispute.model.DisputeResponseDto;
import osplus.pkptuna.rest.dispute.lookup.model.mapper.DisputeLookupResponseDtoMapper;
import osplus.pkptuna.rest.dispute.model.mapper.DisputeResponseDtoMapper;
import osplus.pkptuna.util.GenericResponseTracker;
import osplus.pkptuna.util.HazelcastListenerUtils;

import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

@AplComponent
public class DisputeOrcaService {
    private static final Logger LOGGER = LoggerFactory.getLogger(DisputeOrcaService.class);
    public static final String DISPUTES_LOOKUP = "DISPUTES-LOOKUP";
    public static final String DISPUTE_DETAIL_LOOKUP = "DISPUTE-DETAIL-LOOKUP";
    public static final int EXECUTOR_THREAD_POOL_SIZE = 4;


    private ExecutorService executorService = Executors.newFixedThreadPool(EXECUTOR_THREAD_POOL_SIZE);
    private final HazelcastInstance hazelcastInstance;
    private final DisputeLookupResponseDtoMapper disputeLookupResponseDtoMapper;
    private final DisputeResponseDtoMapper disputeResponseDtoMapper;
    private GenericResponseTracker<DisputeResponseDto> disputeDetailResponseTracker;
    private GenericResponseTracker<osplus.pkptuna.dispute.lookup.model.DisputeLookupResponseDto> disputeLookupResponseTracker;
    private final HazelRelTopicConfigProps hazelRelTopicConfigProps;

    public DisputeOrcaService(HazelcastInstance hazelcastInstance,
                              DisputeLookupResponseDtoMapper disputeLookupResponseDtoMapper,
                              DisputeResponseDtoMapper disputeResponseDtoMapper,
                              GenericResponseTracker<DisputeResponseDto> disputeDetailResponseTracker,
                              GenericResponseTracker<osplus.pkptuna.dispute.lookup.model.DisputeLookupResponseDto> disputeLookupResponseTracker,
                              HazelRelTopicConfigProps hazelRelTopicConfigProps) {
        this.hazelcastInstance = hazelcastInstance;
        this.disputeLookupResponseDtoMapper = disputeLookupResponseDtoMapper;
        this.disputeResponseDtoMapper = disputeResponseDtoMapper;
        this.disputeDetailResponseTracker = disputeDetailResponseTracker;
        this.disputeLookupResponseTracker = disputeLookupResponseTracker;
        this.hazelRelTopicConfigProps = hazelRelTopicConfigProps;
    }

    public ResponseEntity<ApiResponse<osplus.pkptuna.rest.dispute.lookup.model.DisputeLookupResponseDto>> publishLookupDisputeFolder(String issuerId, String cardReference) {
        try {
            String correlationId = UUID.randomUUID().toString();

            DisputeLookupRequestMetadataDto metadataDto = DisputeLookupRequestMetadataDto.newBuilder()
                    .setRequestChannel("APL-UI")
                    .setMessageType("DISPUTE_LOOKUP")
                    .setRequestedBy("UI-MANUAL-TEST")
                    .setBusinessContext("test")
                    .build();

            DisputeLookupRequestDto request = DisputeLookupRequestDto.newBuilder()
                    .setIssuerId(issuerId)
                    .setCardReference(cardReference)
                    .build();

            DisputeLookupRequestWrapperDto wrapper = DisputeLookupRequestWrapperDto.newBuilder()
                    .setCorrelationId(correlationId)
                    .setPayload(request)
                    .setMetadata(metadataDto)
                    .build();

            sendMessage(hazelRelTopicConfigProps.disputesLookupReq(),
                    DISPUTES_LOOKUP, wrapper);

            disputeLookupResponseTracker.register(correlationId);
            CompletableFuture<DisputeLookupResponseDto> future = disputeLookupResponseTracker.await(correlationId);

            DisputeLookupResponseDto protoResponse = future.get(5, TimeUnit.SECONDS);

            osplus.pkptuna.rest.dispute.lookup.model.DisputeLookupResponseDto restResponse =
                    disputeLookupResponseDtoMapper.toRestDto(protoResponse);

            return ResponseEntity.ok(new ApiResponse<>("success", null, restResponse));

        } catch (TimeoutException te) {
            return ResponseEntity.status(HttpStatus.REQUEST_TIMEOUT)
                    .body(new ApiResponse<>("timeout", "No response in 5 seconds", null));

        } catch (Exception e) {
            LOGGER.error("Failed to process publishDisputesLookupRequest", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>("error", "Internal server error", null));
        }
    }

    public ResponseEntity<ApiResponse<osplus.pkptuna.rest.dispute.model.DisputeResponseDto>> publishDisputeDetailRequest(
            String issuerId,
            String disputeFolderReference,
            String embed) {
        try {

            String correlationId = UUID.randomUUID().toString();

            DisputeDetailRequestMetadataDto.Builder metaBuilder = DisputeDetailRequestMetadataDto.newBuilder()
                    .setRequestChannel("APL-UI")
                    .setMessageType("DISPUTE_FOLDER_DETAIL")
                    .setRequestedBy("UI-MANUAL-TEST")
                    .setBusinessContext("test");


            DisputeDetailRequestDto request = DisputeDetailRequestDto.newBuilder()
                    .setIssuerId(issuerId)
                    .setDisputeFolderReference(disputeFolderReference)
                    .addEmbed("")
                    .build();

            DisputeDetailRequestWrapperDto wrapper = DisputeDetailRequestWrapperDto.newBuilder()
                    .setCorrelationId(correlationId)
                    .setPayload(request)
                    .setMetadata(metaBuilder.build())
                    .build();

            sendMessage(hazelRelTopicConfigProps.disputeDetailLookupReq(),
                    DISPUTE_DETAIL_LOOKUP, wrapper);

            disputeDetailResponseTracker.register(correlationId);
            CompletableFuture<DisputeResponseDto> future = disputeDetailResponseTracker.await(correlationId);

            DisputeResponseDto protoResponse = future.get(5, TimeUnit.SECONDS);
            osplus.pkptuna.rest.dispute.model.DisputeResponseDto restResponse =
                    disputeResponseDtoMapper.toRestDto(protoResponse);

            return ResponseEntity.ok(new ApiResponse<>("success", null, restResponse));

        } catch (TimeoutException te) {
            return ResponseEntity.status(HttpStatus.REQUEST_TIMEOUT)
                    .body(new ApiResponse<>("timeout", "No response in 5 seconds", null));

        } catch (Exception e) {
            LOGGER.error("Failed to process publishDisputeDetailRequest", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>("error", "Internal server error", null));
        }
    }


    /**
     * Initialisiert nach dem Start der Bean die Listener für eingehende Antworten auf Hazelcast-Themen.
     */
    @PostConstruct
    public void initResponseListeners() {
        HazelcastListenerUtils.registerGenericResponseListener(
                hazelcastInstance,
                hazelRelTopicConfigProps.disputeDetailLookupRes(),
                DisputeDetailResponseWrapperDto.parser(),
                DisputeDetailResponseWrapperDto::getCorrelationId,
                DisputeDetailResponseWrapperDto::getResponse,
                disputeDetailResponseTracker::complete,
                LOGGER,
                executorService
        );

        HazelcastListenerUtils.registerGenericResponseListener(
                hazelcastInstance,
                hazelRelTopicConfigProps.disputesLookupRes(),
                DisputeLookupResponseWrapperDto.parser(),
                DisputeLookupResponseWrapperDto::getCorrelationId,
                DisputeLookupResponseWrapperDto::getResponse,
                disputeLookupResponseTracker::complete,
                LOGGER,
                executorService
        );
    }

    private void sendMessage(String topicName, String traceCode, Message payload) {
        try {
            ITopic<byte[]> topic = hazelcastInstance.getReliableTopic(topicName);
            topic.publish(payload.toByteArray());
            LOGGER.info("Published to topic [" + topicName + "] for trace " + traceCode);
        } catch (Exception e) {
            throw new RuntimeException("Failed to publish to topic " + topicName, e);
        }
    }

}
