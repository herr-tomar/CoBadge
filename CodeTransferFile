package osplus.pkptuna.hazelcast.pubsub;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import com.hazelcast.topic.ITopic;
import com.hazelcast.topic.Message;
import com.hazelcast.topic.MessageListener;
import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Autowired;
import osplus.apl.core.api.AplComponent;
import osplus.fi.core.logging.api.Logger;
import osplus.fi.core.logging.api.LoggerFactory;
import osplus.pkptuna.hazelcast.config.FlowConfig;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;

import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Der {@code GenericHazelcastRouter} ist verantwortlich f√ºr das zentrale Routing eingehender Nachrichten
 * aus ReliableTopics in partitionierte IMaps. Der Router verwendet eine zentrale Leader Election mit Heartbeat,
 * um sicherzustellen, dass nur eine Instanz im Cluster aktiv routet.
 */
@AplComponent
public class GenericHazelcastRouter {

    private static final Logger LOGGER = LoggerFactory.getLogger(GenericHazelcastRouter.class);

    private final HazelcastInstance hazelcastInstance;
    private final List<FlowConfig> flowConfigs;
    private final FlowHandlerRegistry handlerRegistry;
    private final String routerInstanceId;
    private final Map<String, AtomicInteger> roundRobinCounters = new ConcurrentHashMap<>();

    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();

    @Autowired
    public GenericHazelcastRouter(HazelcastInstance hazelcastInstance,
                                  List<FlowConfig> flowConfigs,
                                  FlowHandlerRegistry handlerRegistry) {
        this(hazelcastInstance, flowConfigs, handlerRegistry, UUID.randomUUID().toString());
    }

    public GenericHazelcastRouter(HazelcastInstance hazelcastInstance,
                                  List<FlowConfig> flowConfigs,
                                  FlowHandlerRegistry handlerRegistry,
                                  String routerInstanceId) {
        this.hazelcastInstance = hazelcastInstance;
        this.flowConfigs = flowConfigs;
        this.handlerRegistry = handlerRegistry;
        this.routerInstanceId = routerInstanceId;
    }

    @PostConstruct
    public void initRouters() {
        try {
            IMap<String, String> leaderMap = hazelcastInstance.getMap("router-leader-map");
            IMap<String, Long> heartbeatMap = hazelcastInstance.getMap("router-heartbeat-map");

            Long lastHeartbeat = heartbeatMap.get("heartbeat");
            boolean heartbeatStale = lastHeartbeat == null || System.currentTimeMillis() - lastHeartbeat > 5000;

            String currentLeader = leaderMap.get("active-router");

            if (heartbeatStale && (currentLeader == null || currentLeader.isBlank())) {
                String claimed = leaderMap.putIfAbsent("active-router", routerInstanceId);
                if (claimed == null || claimed.equals(routerInstanceId)) {
                    LOGGER.info("This node is elected as the ACTIVE router (ID={})", routerInstanceId);
                    startHeartbeat();
                    subscribeToTopics();
                } else {
                    LOGGER.info("Another node won the leadership (ID={})", claimed);
                }
            } else {
                LOGGER.info("Leadership already exists or heartbeat is alive (Leader={}, LastBeat={})",
                        currentLeader, lastHeartbeat);
            }

        } catch (Exception e) {
            LOGGER.error("Failed to initialize router", e);
        }
    }

    private void startHeartbeat() {
        IMap<String, Long> heartbeatMap = hazelcastInstance.getMap("router-heartbeat-map");
        scheduler.scheduleAtFixedRate(() -> {
            heartbeatMap.put("heartbeat", System.currentTimeMillis());
        }, 0, 3, TimeUnit.SECONDS);
        LOGGER.info("Heartbeat started for router ID={}", routerInstanceId);
    }

    private void subscribeToTopics() {
        if (flowConfigs == null || flowConfigs.isEmpty()) {
            LOGGER.warn("No Hazelcast flow configurations found.");
            return;
        }

        for (FlowConfig config : flowConfigs) {
            String flowName = config.name();
            roundRobinCounters.putIfAbsent(flowName, new AtomicInteger(0));

            @SuppressWarnings("unchecked")
            FlowHandler<Object, Object> handler = (FlowHandler<Object, Object>) handlerRegistry.getHandler(flowName);

            if (handler == null) {
                LOGGER.warn("No FlowHandler registered for flow: {}", flowName);
                continue;
            }

            ITopic<byte[]> topic = hazelcastInstance.getReliableTopic(config.requestTopic());
            topic.addMessageListener(new RoutingListener(flowName, config, handler));
            LOGGER.info("Listening on topic={} for flow={}", config.requestTopic(), flowName);
        }
    }

    private class RoutingListener<T> implements MessageListener<byte[]> {

        private final String flowName;
        private final FlowConfig config;
        private final FlowHandler<T, ?> handler;

        RoutingListener(String flowName, FlowConfig config, FlowHandler<T, ?> handler) {
            this.flowName = flowName;
            this.config = config;
            this.handler = handler;
        }

        @Override
        public void onMessage(Message<byte[]> message) {
            try {
                T request = handler.deserializeRequest(message.getMessageObject());
                String correlationId = handler.extractCorrelationId(request);
                String lockKey = "route-lock-" + correlationId;

                IMap<String, String> routerMap = hazelcastInstance.getMap("router-claim-map");
                String uniqueId = UUID.randomUUID().toString();

                String existing = routerMap.putIfAbsent(lockKey, uniqueId);
                if (existing != null) {
                    LOGGER.info("Skipped duplicate routing for correlationId={}", correlationId);
                    return;
                }

                int index = roundRobinCounters.get(flowName).getAndIncrement() % config.partitions();
                String mapKey = config.mapBase() + index;

                hazelcastInstance.getMap(mapKey).put(correlationId, request);
                LOGGER.info("Routed correlationId='{}' to map '{}'", correlationId, mapKey);

            } catch (Exception e) {
                LOGGER.error("Routing failure for flow '{}': {}", flowName, e.getMessage(), e);
            }
        }
    }
}
