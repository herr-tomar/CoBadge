package osplus.pkptuna.hazelcast.pubsub;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import osplus.pkptuna.hazelcast.config.FlowConfig;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;
import osplus.pkptuna.hazelcast.test.config.BaseHazelcastTest;
import osplus.pkptuna.hazelcast.test.config.FlowHandlerTestConfiguration;

import static org.junit.jupiter.api.Assertions.*;

public class GenericHazelcastConsumerTest extends BaseHazelcastTest {

    @Autowired
    private FlowHandlerRegistry handlerRegistry;

    @Autowired
    private FlowHandler sampleFlowHandler;

    @Autowired
    private HazelcastInstance hazelcastInstance;

    @Autowired
    private GenericHazelcastConsumer consumer;

    @Autowired
    private FlowHandlerTestConfiguration.TestCollector testCollector;

    @Autowired
    private FlowConfig flowConfig;

    @BeforeEach
    public void setup() {
        testCollector.clear();
        hazelcastInstance.getMap("map-0").clear();
        hazelcastInstance.getMap("map00").clear();
    }

    @Test
    public void testPollRequestMaps_PositiveFlow() {
        IMap<Object, Object> testMap = hazelcastInstance.getMap("map-0");
        testMap.put("corrId1", Map.of("key", "value"));

        consumer.pollRequestMaps();

        assertTrue(testCollector.wasSent("res-topic"), "Expected response to be sent on topic");
        assertEquals("wrappedResponse", testCollector.getSent("res-topic"));
    }

    @Test
    public void testPollRequestMaps_NoHandlerFound() {
        // Intentionally use a map with an unknown flow prefix (not registered in flowConfigs)
        IMap<Object, Object> testMap = hazelcastInstance.getMap("unknown-map-0");
        testMap.put("id1", Map.of("key", "value"));

        consumer.pollRequestMaps();

        assertFalse(testCollector.wasSent("res-topic"), "No response should be sent for unknown flow");
    }

    @Test
    public void testPollRequestMaps_HandlerThrowsException() {
        IMap<Object, Object> testMap = hazelcastInstance.getMap("map-0");
        testMap.put("faultyId", "faultyRequest");

        consumer.pollRequestMaps();

        assertFalse(testCollector.wasSent("res-topic"), "No response should be sent when handler throws exception");
    }
}
