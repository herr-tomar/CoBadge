    // ------------------- Hilfsmethoden -------------------

    /**
     * Baut ein {@link AmountDto}-Objekt aus einem numerischen Wert und einem Währungscode.
     * <p>
     * Falls entweder {@code val} {@code null} ist oder {@code ws} leer/blank,
     * wird {@code null} zurückgegeben.
     *
     * @param val numerischer Wert (in Major Units, z. B. 10.50 für 10 EUR 50 Cent)
     * @param ws  ISO-Währungscode (z. B. "EUR")
     * @return aufgebautes {@link AmountDto} oder {@code null}, falls Eingaben fehlen
     */
    private AmountDto buildAmount(Double val, String ws) {
        if (val == null || isBlank(ws)) return null;
        AmountDto a = new AmountDto();
        a.setValue(DisputeBusinessLogic.toCents(val));
        a.setExponent(2);
        a.setIsoCode(DisputeBusinessLogic.normalizeCurrency(ws));
        return a;
    }

    /**
     * Prüft, ob der übergebene String gleich 'J' ist (Groß-/Kleinschreibung egal).
     *
     * @param v Eingabestring
     * @return {@code true}, falls v = 'J' (ignoring case), sonst {@code false}
     */
    default boolean isJ(String v) {
        return v != null && v.trim().equalsIgnoreCase("J");
    }

    /**
     * Prüft, ob ein String {@code null} oder nur aus Leerzeichen besteht.
     *
     * @param v Eingabestring
     * @return {@code true}, wenn leer oder {@code null}, sonst {@code false}
     */
    private boolean isBlank(String v) {
        return v == null || v.trim().isEmpty();
    }

    /**
     * Liefert einen sicheren int-Wert zurück.
     * <p>
     * Falls der Eingabewert {@code null} ist, wird 0 zurückgegeben.
     *
     * @param i Eingabe-Integer
     * @return Wert oder 0 bei {@code null}
     */
    private int safeInt(Integer i) {
        return i == null ? 0 : i;
    }

    /**
     * Liefert einen sicheren double-Wert zurück.
     * <p>
     * Falls der Eingabewert {@code null} ist, wird 0.0 zurückgegeben.
     *
     * @param d Eingabe-Double
     * @return Wert oder 0.0 bei {@code null}
     */
    private double safeDouble(Double d) {
        return d == null ? 0.0 : d;
    }




--------



