default String calcRefundIndicator(DisputeCreateRequestDto s) {
    if (s == null) return "N";

    DisputeBusinessLogic.AutoErstattungResult res =
            DisputeBusinessLogic.ermittelnAutoErst(
                    safeInt(s.getAnzahlAutoErstattungen()),
                    safeInt(s.getAutoErstMaxAnzahl()),
                    safeDouble(s.getAutoErstMaxBetrag()),
                    safeDouble(s.getReklaBetrag()),
                    s.getCrdVfggOrigWs(),
                    safeDouble(s.getCrdVfggOrigKurs()),
                    safeDouble(s.getCrdEntBtrg()),
                    s.getReklaTeilbetragKz()
            );

    if ("N".equals(res.getKennzeichen())) return "N";
    if ("J".equals(res.getKennzeichen()) && isJ(s.getReklaTeilbetragKz())) return "P";
    return "Y";
}

default AmountDto calcRefundAmount(DisputeCreateRequestDto s) {
    if (s == null) return null;

    DisputeBusinessLogic.AutoErstattungResult res =
            DisputeBusinessLogic.ermittelnAutoErst(
                    safeInt(s.getAnzahlAutoErstattungen()),
                    safeInt(s.getAutoErstMaxAnzahl()),
                    safeDouble(s.getAutoErstMaxBetrag()),
                    safeDouble(s.getReklaBetrag()),
                    s.getCrdVfggOrigWs(),
                    safeDouble(s.getCrdVfggOrigKurs()),
                    safeDouble(s.getCrdEntBtrg()),
                    s.getReklaTeilbetragKz()
            );

    if ("N".equals(res.getKennzeichen())) return null;

    AmountDto a = new AmountDto();
    a.setValue(DisputeBusinessLogic.toCents(res.getBetrag())); // safely converted inside
    a.setExponent(2);
    a.setIsoCode(DisputeBusinessLogic.normalizeCurrency(s.getReklaBetragWs()));
    return a;
}

default AmountDto buildRefundAmount(DisputeCreateRequestDto s) {
    if (!isJ(s.getReklaTeilbetragKz())) return null;
    if (s.getReklaBetrag() == null || isBlank(s.getReklaBetragWs())) return null;

    AmountDto a = new AmountDto();
    a.setValue(DisputeBusinessLogic.toCents(safeDouble(s.getReklaBetrag())));
    a.setExponent(2);
    a.setIsoCode(DisputeBusinessLogic.normalizeCurrency(s.getReklaBetragWs()));
    return a;
}

default List<DisputeEventRequestDto> buildEvents(DisputeCreateRequestDto s) {
    if (!isJ(s.getReklaTeilbetragKz())) return Collections.emptyList();
    if (s.getReklaBetrag() == null || isBlank(s.getReklaBetragWs())) return Collections.emptyList();

    DisputeEventRequestDto ev = new DisputeEventRequestDto();
    ev.setType("COMMENT");
    ev.setMessage("Reklamation mit Teilbetrag i.H.v. " +
            s.getReklaBetrag() + " " + s.getReklaBetragWs());
    return List.of(ev);
}

private AmountDto buildAmount(Double val, String ws) {
    if (val == null || isBlank(ws)) return null;
    AmountDto a = new AmountDto();
    a.setValue(DisputeBusinessLogic.toCents(val));
    a.setExponent(2);
    a.setIsoCode(DisputeBusinessLogic.normalizeCurrency(ws));
    return a;
}

// --- Safe conversion helpers ---
private int safeInt(Integer i) { return i == null ? 0 : i; }
private double safeDouble(Double d) { return d == null ? 0.0 : d; }
