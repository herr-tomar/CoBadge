Weitere Dokumente
Ausgangssituation Multikanalplattform (MKP) und DB2 (Relationales Datenbanksystem von IBM)
Erklärung sqlj-maven-plugin
Nutzung sqlj-maven-plugin
Vorgehen
Schritt 1 - Workspace einrichten
BUILD Modul
Lokalisierung des Build Moduls
Build - pom.xml
DAO Modul
Lokalisierung des DAO Moduls
Schritt 2 - Lokaler Test
Schritt 3 - Binding Überprüfen
Tar im Jenkins bereitstellen (Optional)
Bindings lokal überprüfen
Weitere Dokumente
Weitere Wiki-Einträge
Ausgangssituation Multikanalplattform (MKP) und DB2 (Relationales Datenbanksystem von IBM)
Auf DB2 unter z/OS darf nur mittels statischem SQL zugegriffen werden. Um mittelt statischem SQL aus der MKP auf die DB2 (JAVA) zuzugreifen, setzen wir deshalb das plugin sqlj-maven-Plugin ein. Die Konfiguration dieses Plugins für eine erfolgreiche Verbindung der MKP mit der DB2 wird in diesem Artikel behandelt. 

Erklärung sqlj-maven-plugin
Das "sqlj-maven-plugin" ist ein Maven-Plugin, das für die Verarbeitung von SQLJ-Dateien verwendet wird. SQLJ-Dateien sind Java-Dateien, die SQL-Anweisungen enthalten. Das Plugin wird verwendet, um DBRM-Dateien zu sammeln, die von SQLJ-Dateien erzeugt werden. Weitere Informationen hierzu in dem oben genannten Link (Weitere Dokumente #4)

Nutzung sqlj-maven-plugin
In den folgenden Schritten wird erklärt, wie das sqlj-maven-plugin in einem MKP-Projekt (Multikanalplattform) verwendet werden kann.

Vorgehen
Schritt 1 - Workspace einrichten
Um SQLJ im Standard Workspace der MKP zu verwenden benötigen wir zusätzlich ein BUILD und ein DAO Modul, diese Module sind unter dem Parent (oberste Ebene des Projektes) anzulegen.

BUILD Modul
Lokalisierung des Build Moduls
Projektbezeichnung (Parent)
Build
/src
/main
/resources
bkm_dbrm.xml (Informationen weiter unten)
/target (wird beim ausführen von Maven Install generiert)
pom.xml (Informationen weiter unten)
BUILD Modul Struktur (Screenshot)
Build - pom.xml
Hier sind im unteren Beispiel die entsprechenden Pfade und Bezeichner anzupassen.


Build - pom.xml Quelle erweitern
WICHTIG

In der Parent pom.xml muss zwingend bei der Moduleinbindung das DAO-Modul als erstes eingebunden sein, da es von den weiteren eingebundenen Modulen genutzt wird und dies sonst ggf. zu Fehlern führt.

Parent pom.xml Quelle erweitern




Build/Resource/bkm_bdrm.xml

Um ein tar-File zu erzeugen muss unter dem obenstehenden Pfad folgendes .xml-file angelegt werden. Durch dieses .xml-File wird das Dateiformat festgelegt (tar)

Build - bkm_bdrm.xml Quelle erweitern
DAO Modul
Wichtige Informationen

Es gelten folgende Vorschriften für die Benennung der Module/Packages: 

Module/Jar-Info: J<Komponentenkürzel aus Rochade><3-stellige Nummer>0M
Packages/jdbrm.tar/Po-Files: J<Komponentenkürzel aus Rochade><3-stellige Nummer><0-9>M
SQLJ-Package Beispiel : JKA2011M
Lokalisierung des DAO Moduls
 Projektbezeichnung
/dao
/pkg
/SQLJ-Package z.B. JXX0000M (Muss ebenfalls angelegt werden, weitere Informationen zum Inhalt weiter unten)
/src
/main
/java
/dao
/sqlj
ggf. Java Dateien
/resources
/dbrm-gen (Enthält generierte Datenbank Dateien)
/ser (Das Verzeichnis muss manuell hinzugefügt werden, die Inhalte werden durch das Plugin generiert.)
/sqlj 
/osplus
/Projektbezeichnung
/dao
/sqlj (Enthält die SQLJ-Datenbankoperationen)
DAO Modul Struktur (Screenshot)
Wie in OSPE auch muss auch auf der MKP eine pom.xml für das DAO-Modul angelegt werden. Dieses File dient dazu die SQLJ-Packages zu Klammern.

Die Package Bezeichnungen, je nach Anzahl, müssen in der pom.xml entsprechend angepasst werden.

DAO - pom.xml Quelle erweitern
Generierung des Inhalts des SQLJ Packages

Hier für erzeugen wir eine pom.xml innerhalb des SQLJ-Packages welches wir angelegt haben und befüllen es mit folgendem Code.

SQLJ-Package pom.xml Quelle erweitern


Schritt 2 - Lokaler Test
Um das SQL-Binding lokal zu testen ist es erforderlich das Profil rebind auszuwählen vor dem Maven-Install, da sonst kein lokales Binding stattfindet. Dieses Profil ist zwingend hierfür erforderlich, da auf dem Jenkins kein Binding stattfinden darf. Das Profil PROD ist zu ignorieren, da dieses Profil den Default-Wert für den Jenkins darstellt.

Das SQLJ-Binding muss lokal immer nach der Änderung eines SQLJs ausgeführt werden ansonsten ist es optional.

Profil anschalten (Screenshot)


Schritt 3 - Binding Überprüfen
Tar im Jenkins bereitstellen (Optional)
Um eine .tar-Datei durch Jenkins als eigenes Artefakt bereitzustellen muss die JenkinsConfig.json  im Parent um eine weitere Zeile Code erweitert werden.

JenkinsConfig.json Quelle erweitern
Jetzt kann im Jenkins das .tar-File unter Last Successful Artefacts  gefunden werden. 

Jenkins TAR (Screenshot)
Bindings lokal überprüfen
Um zu überprüfen ob das Binding erfolgreich durchgeführt werden würde, kann nach dem Maven Install ein Blick in das generierte .tar-File geworfen werden. Hierzu kann sich das die Datei jdbrm.tar unter build/target/ angeschaut werden (einfach als Plain Text öffnen, siehe Screenshot weiter unten). Hier sehen wir nun die Bindung der Kennungen mit den Packages.

jdbrm.tar anzeigen (Screenshot)


