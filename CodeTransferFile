package osplus.pkptuna.hazelcast.flows;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class FlowHandlerRegistryTest {

    private FlowHandlerRegistry<String, String> registry;
    private FlowHandler<String, String> mockHandler;

    @BeforeEach
    void setUp() {
        registry = new FlowHandlerRegistry<>();
        mockHandler = mock(FlowHandler.class);
    }

    /**
     * Positiver Test: Handler wird registriert und erfolgreich zurückgegeben.
     */
    @Test
    void testRegisterAndRetrieveHandler() {
        registry.register("myFlow", mockHandler);
        FlowHandler<String, String> result = registry.getHandler("myFlow");

        assertNotNull(result);
        assertEquals(mockHandler, result);
    }

    /**
     * Positiver Test: contains() gibt true zurück für registrierten Handler.
     */
    @Test
    void testContainsReturnsTrue() {
        registry.register("myFlow", mockHandler);
        assertTrue(registry.contains("myFlow"));
    }

    /**
     * Negativer Test: contains() gibt false zurück für nicht registrierten Flow.
     */
    @Test
    void testContainsReturnsFalse() {
        assertFalse(registry.contains("unknownFlow"));
    }

    /**
     * Negativer Test: Zugriff auf nicht registrierten Handler wirft Exception.
     */
    @Test
    void testGetHandlerThrowsWhenNotFound() {
        Exception exception = assertThrows(IllegalArgumentException.class, () ->
                registry.getHandler("unregisteredFlow")
        );
        assertTrue(exception.getMessage().contains("No FlowHandler registered for flow"));
    }
}
