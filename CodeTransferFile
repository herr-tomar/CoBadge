// inside GenericHazelcastConsumerTest.LocalTestConfig (tests only)
import com.google.protobuf.Message;
import com.hazelcast.config.SerializerConfig;
import com.hazelcast.nio.serialization.StreamSerializer;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;

@Bean(destroyMethod = "shutdown")
public HazelcastInstance hazelcastInstance() {
    Config config = new Config();
    config.setClusterName("test-cluster-" + UUID.randomUUID());
    config.getNetworkConfig().setPortAutoIncrement(true);
    config.setProperty("hazelcast.logging.type", "slf4j");

    // Register protobuf serializer for ALL Message subtypes â€” TESTS ONLY
    SerializerConfig pbSer = new SerializerConfig()
        .setTypeClass(Message.class)
        .setImplementation(new StreamSerializer<Message>() {
            @Override public void write(ObjectDataOutput out, Message obj) throws IOException {
                out.writeString(obj.getClass().getName());
                byte[] bytes = obj.toByteArray();
                out.writeInt(bytes.length);
                out.write(bytes);
            }
            @Override public Message read(ObjectDataInput in) throws IOException {
                String className = in.readString();
                int len = in.readInt();
                byte[] bytes = new byte[len];
                in.readFully(bytes);
                try {
                    Class<?> clazz = Class.forName(className);
                    // Try getDefaultInstance().getParserForType()
                    try {
                        var gdi = clazz.getMethod("getDefaultInstance");
                        var def = (Message) gdi.invoke(null);
                        var parser = def.getParserForType();
                        if (parser != null) return parser.parseFrom(bytes);
                    } catch (NoSuchMethodException ignore) {}
                    // Try parser()
                    try {
                        var pm = clazz.getMethod("parser");
                        var parser = (com.google.protobuf.Parser<? extends Message>) pm.invoke(null);
                        return parser.parseFrom(bytes);
                    } catch (NoSuchMethodException ignore) {}
                    // Fallback for skeletal DummyMessage
                    return (Message) clazz.getDeclaredConstructor().newInstance();
                } catch (Exception e) {
                    throw new IOException("Failed to deserialize protobuf " + className, e);
                }
            }
            @Override public int getTypeId() { return 100_001; }
            @Override public void destroy() {}
        });
    config.getSerializationConfig().addSerializerConfig(pbSer);

    return Hazelcast.newHazelcastInstance(config);
}
