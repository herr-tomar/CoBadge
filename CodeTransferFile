package osplus.pkptuna.flows.handlers;

import com.google.protobuf.GeneratedMessage;
import com.google.protobuf.InvalidProtocolBufferException;
import com.hazelcast.core.HazelcastInstance;
import osplus.fi.core.logging.api.Logger;
import osplus.fi.core.logging.api.LoggerFactory;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.protobuf.impl.ProtobufDeserializer;
import osplus.pkptuna.hazelcast.pubsub.ReliableTopicPublisher;

import java.io.IOException;

public abstract class GenericFlowHandler<Req extends GeneratedMessage,Res extends GeneratedMessage> implements FlowHandler<Req, Res> {

    private static final Logger LOGGER = LoggerFactory.getLogger(GenericFlowHandler.class);
    private final String flowName;
    private final String traceCode;
    private final ReliableTopicPublisher<Res> reliableTopicPublisher;
    private final ProtobufDeserializer<Req> deserializer;

    public GenericFlowHandler(String flowName, String traceCode, ReliableTopicPublisher<Res> reliableTopicPublisher, ProtobufDeserializer<Req> deserializer) {
        this.flowName = flowName;
        this.traceCode = traceCode;
        this.reliableTopicPublisher = reliableTopicPublisher;
        this.deserializer = deserializer;
    }

    @Override
    public Req deserializeRequest(byte[] data) throws InvalidProtocolBufferException {
        try {
            return deserializer.deserialize(data);
        } catch (IOException e) {
            LOGGER.error("Failed to deserialize request", e);
            return null; // TODO error handling
            //  return Req.newBuilder().build();
        }
    }

    @Override
    public void sendResponse(HazelcastInstance hazelcastInstance, String topicName, Res response) {
        reliableTopicPublisher.sendMessage(topicName, traceCode, response);
    }

    // TODO add more generic implementations of interface methods

    @Override
    public String getFlowName() {
        return flowName;
    }
}
