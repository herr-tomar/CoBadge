@Bean
public TestCollector testCollector() {
    return new TestCollector();
}

@Bean
public FlowHandler sampleFlowHandler(TestCollector testCollector) {
    return new FlowHandler() {

        @Override
        public Object handleRequest(Object request) {
            if ("faultyRequest".equals(request)) {
                throw new RuntimeException("Expected failure");
            }
            return "response1";
        }

        @Override
        public Object wrapResponse(Object correlationId, Object response) {
            return "wrappedResponse";
        }

        @Override
        public void sendResponse(HazelcastInstance instance, String topic, Object response) {
            testCollector.recordSent(topic, response);
        }
    };
}

public static class TestCollector {
    private final Map<String, Object> sentResponses = new HashMap<>();

    public void recordSent(String topic, Object response) {
        sentResponses.put(topic, response);
    }

    public Object getSent(String topic) {
        return sentResponses.get(topic);
    }

    public boolean wasSent(String topic) {
        return sentResponses.containsKey(topic);
    }

    public void clear() {
        sentResponses.clear();
    }
}


------

@Autowired
private FlowHandlerTestConfiguration.TestCollector testCollector;



-----


@Test
public void testPollRequestMaps_PositiveFlow() {
    testCollector.clear();
    FlowConfig config = new FlowConfig("sampleFlow", "requestTopic", "responseTopic", "map0", 1);

    consumer = new GenericHazelcastConsumer(null, hazelcastInstance, null, List.of(config), handlerRegistry, hazelcastConfigProps);
    consumer.pollRequestMaps();

    assertTrue(testCollector.wasSent("responseTopic"), "Expected response to be sent on topic");
    assertEquals("wrappedResponse", testCollector.getSent("responseTopic"));
}

@Test
public void testPollRequestMaps_NoHandlerFound() {
    testCollector.clear();
    FlowConfig config = new FlowConfig("unknownFlow", "requestTopic", "responseTopic", "map0", 1);

    consumer = new GenericHazelcastConsumer(null, hazelcastInstance, null, List.of(config), handlerRegistry, hazelcastConfigProps);
    consumer.pollRequestMaps();

    assertFalse(testCollector.wasSent("responseTopic"), "No response should be sent for unknown flow");
}

@Test
public void testPollRequestMaps_HandlerThrowsException() {
    testCollector.clear();
    FlowConfig config = new FlowConfig("sampleFlow", "requestTopic", "responseTopic", "map0", 1);

    // Add test data for failure scenario
    // Assuming your HazelcastInstance is preloaded in TestConfig
    FlowHandler originalHandler = handlerRegistry.getHandler("sampleFlow");
    assertNotNull(originalHandler);

    // Simulate faulty request via test config bean logic
    consumer = new GenericHazelcastConsumer(null, hazelcastInstance, null, List.of(config), handlerRegistry, hazelcastConfigProps);
    consumer.pollRequestMaps();

    assertFalse(testCollector.wasSent("responseTopic"), "No response should be sent when handler fails");
}
