package osplus.pkptuna.protobuf.util;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupRequestDto;

/**
 * Unit-Tests für die Hilfsklasse {@link ProtobufJsonUtil}.
 */
class ProtobufJsonUtilTest {

    @Test
    void shouldConvertProtoToJsonAndBack() {
        // Protobuf-Objekt erzeugen
        DisputeLookupRequestDto original = DisputeLookupRequestDto.newBuilder()
                .setIssuerId("issuer-001")
                .setCardReference("card-XYZ")
                .build();

        // In JSON konvertieren
        String json = ProtobufJsonUtil.printProtoToJson(original);
        Assertions.assertTrue(json.contains("issuerId"));
        Assertions.assertTrue(json.contains("cardReference"));

        // Zurück in Protobuf parsen
        DisputeLookupRequestDto.Builder builder = DisputeLookupRequestDto.newBuilder();
        ProtobufJsonUtil.parseJsonToProto(json, builder);
        DisputeLookupRequestDto parsed = builder.build();

        Assertions.assertEquals(original, parsed);
    }

    @Test
    void shouldFixTimestampsInJson() {
        String raw = "{\"timestamp\":\"2024-12-10T15:30:00.000+0200\"}";
        String fixed = ProtobufJsonUtil.fixTimestamps(raw);
        Assertions.assertTrue(fixed.contains("+02:00"));
    }

    @Test
    void shouldThrowExceptionOnInvalidJson() {
        DisputeLookupRequestDto.Builder builder = DisputeLookupRequestDto.newBuilder();
        Assertions.assertThrows(IllegalArgumentException.class, () ->
                ProtobufJsonUtil.parseJsonToProto("{invalid_json}", builder)
        );
    }
}
