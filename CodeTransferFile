package osplus.pkptuna.hazelcast.pubsub;

import com.hazelcast.config.Config;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import com.hazelcast.topic.ITopic;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import osplus.apl.core.test.utils.AplTestRunner;
import osplus.apl.core.test.utils.BaseAplTest;
import osplus.pkptuna.hazelcast.config.FlowConfig;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.test.config.DummyMessage;
import osplus.pkptuna.hazelcast.test.config.FlowHandlerTestConfiguration;

import java.util.UUID;
import java.util.concurrent.TimeUnit;

import static org.awaitility.Awaitility.await;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

@SpringBootTest(classes = {
        AplTestRunner.class,
        GenericHazelcastRouterTest.LocalTestConfig.class,
        FlowHandlerTestConfiguration.class
},
        webEnvironment = SpringBootTest.WebEnvironment.MOCK,
        properties = {
                "spring.main.allow-bean-definition-overriding=true",
                "generichazelcast.polling-rate=20",
                "apl.application.name=uui",
                "apl.application.version=0.0.1-TEST"
        })
@AutoConfigureMockMvc
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class GenericHazelcastRouterTest extends BaseAplTest {

    @Autowired private HazelcastInstance hazelcastInstance;
    @Autowired private FlowConfig flowConfig;
    @Autowired private FlowHandlerTestConfiguration.TestCollector testCollector;

    @Autowired
    private FlowHandler<DummyMessage, DummyMessage, DummyMessage> sampleFlowHandler;

    @Autowired
    private GenericHazelcastRouter<DummyMessage, DummyMessage, DummyMessage> router;

    private IMap<String, String> leaderMap;
    private IMap<String, Long> heartbeatMap;
    private IMap<String, String> routerMap;
    private IMap<Object, Object> targetMap;
    private ITopic<byte[]> topic;

    private final String routerInstanceId = "test-router-instance";

    @BeforeEach
    public void setup() {
        leaderMap = hazelcastInstance.getMap("router-leader-map");
        heartbeatMap = hazelcastInstance.getMap("router-heartbeat-map");
        routerMap = hazelcastInstance.getMap("router-claim-map");
        targetMap = hazelcastInstance.getMap("map-0");

        leaderMap.clear();
        heartbeatMap.clear();
        routerMap.clear();
        targetMap.clear();
        testCollector.clear();

        router.setRouterInstanceId(routerInstanceId);
        leaderMap.put("active-router", routerInstanceId);
        heartbeatMap.put("heartbeat", System.currentTimeMillis() - 10_000);
        topic = hazelcastInstance.getReliableTopic(flowConfig.requestTopic());
        router.initRouters();
    }

    @Test
    public void testMessageRoutedSuccessfully() {
        DummyMessage mockRequest = mock(DummyMessage.class);
        when(mockRequest.toByteArray()).thenReturn(new byte[]{1, 2, 3});
        when(mockRequest.hashCode()).thenReturn(42);

        String corrId = sampleFlowHandler.extractCorrelationId(mockRequest);
        assertFalse(routerMap.containsKey("route-lock-" + corrId));

        topic.publish(mockRequest.toByteArray());

        await().atMost(5, TimeUnit.SECONDS)
                .untilAsserted(() -> assertTrue(testCollector.wasSent(flowConfig.responseTopic())));
    }

    @Test
    public void testDuplicateMessageNotProcessed() {
        DummyMessage mockRequest = mock(DummyMessage.class);
        when(mockRequest.toByteArray()).thenReturn(new byte[]{4, 5, 6});
        when(mockRequest.hashCode()).thenReturn(99);

        String corrId = sampleFlowHandler.extractCorrelationId(mockRequest);
        routerMap.put("route-lock-" + corrId, "existing");

        topic.publish(mockRequest.toByteArray());

        await().atMost(2, TimeUnit.SECONDS)
                .untilAsserted(() -> assertFalse(targetMap.containsKey(corrId)));
    }

    @Test
    public void testRoutingHandlerThrowsException() {
        DummyMessage mockRequest = mock(DummyMessage.class);
        when(mockRequest.toByteArray()).thenReturn(new byte[]{9, 9, 9});
        when(mockRequest.hashCode()).thenReturn(999);

        String corrId = sampleFlowHandler.extractCorrelationId(mockRequest);

        // You may need to further mock `sampleFlowHandler.handleRequest` to throw if needed

        topic.publish(mockRequest.toByteArray());

        await().atMost(2, TimeUnit.SECONDS)
                .untilAsserted(() -> assertFalse(targetMap.containsKey(corrId)));
    }

    @TestConfiguration
    static class LocalTestConfig {
        @Bean(destroyMethod = "shutdown")
        public HazelcastInstance hazelcastInstance() {
            Config config = new Config();
            config.setClusterName("test-cluster" + UUID.randomUUID());
            config.getNetworkConfig().setPortAutoIncrement(true);
            config.setProperty("hazelcast.logging.type", "slf4j");
            return Hazelcast.newHazelcastInstance(config);
        }
    }
}


----------


package osplus.pkptuna.hazelcast.test.config;

import com.hazelcast.core.HazelcastInstance;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import osplus.apl.core.api.administration.metrics.MetricsService;
import osplus.fi.core.logging.api.Logger;
import osplus.fi.core.logging.api.LoggerFactory;
import osplus.pkptuna.hazelcast.config.FlowConfig;
import osplus.pkptuna.hazelcast.config.FlowHandlerInitializer;
import osplus.pkptuna.hazelcast.config.HazelcastFlowBootstrap;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;
import osplus.pkptuna.hazelcast.pubsub.GenericHazelcastConsumer;
import osplus.pkptuna.hazelcast.pubsub.GenericHazelcastRouter;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@TestConfiguration
public class FlowHandlerTestConfiguration {

    private static final Logger LOGGER = LoggerFactory.getLogger(FlowHandlerTestConfiguration.class);

    @Bean
    public FlowHandlerRegistry<DummyMessage, DummyMessage> handlerRegistry() {
        FlowHandlerRegistry<DummyMessage, DummyMessage> registry = new FlowHandlerRegistry<>();
        registry.register("myFlow", sampleFlowHandler());
        return registry;
    }

    @Bean
    public FlowHandlerInitializer flowHandlerInitializer(List<FlowConfig> configs,
                                                         Map<String, FlowHandler> handlerMap,
                                                         FlowHandlerRegistry registry,
                                                         HazelcastFlowBootstrap bootstrap) {
        return new FlowHandlerInitializer(configs, handlerMap, registry, bootstrap);
    }

    @Bean
    public FlowConfig flowConfig() {
        return new FlowConfig("myFlow",
                "req-topic" + UUID.randomUUID(),
                "res-topic" + UUID.randomUUID(),
                "map-", 1);
    }

    @Bean
    public List<FlowConfig> flowConfigs(FlowConfig flowConfig) {
        return List.of(flowConfig);
    }

    @Bean
    public Map<String, FlowHandler> handlerMap() {
        return Map.of("myFlow", sampleFlowHandler());
    }

    @Bean
    public FlowHandler<DummyMessage, DummyMessage, DummyMessage> sampleFlowHandler() {
        @SuppressWarnings("unchecked")
        FlowHandler<DummyMessage, DummyMessage, DummyMessage> handler = mock(FlowHandler.class);

        when(handler.getFlowName()).thenReturn("myFlow");

        // Deserialization just returns a mock DummyMessage
        DummyMessage dummyRequest = mock(DummyMessage.class);
        when(handler.deserializeRequest(any())).thenReturn(dummyRequest);

        // Extract correlation ID based on mocked request
        when(handler.extractCorrelationId(any())).thenReturn("corr-42");

        // Return a mock response
        DummyMessage dummyResponse = mock(DummyMessage.class);
        when(handler.handleRequest(any())).thenReturn(dummyResponse);
        when(handler.wrapResponse(anyString(), any())).thenReturn(dummyResponse);

        // Log and record response
        doAnswer(invocation -> {
            String topic = invocation.getArgument(1);
            Object response = invocation.getArgument(2);
            testCollector().recordSent(topic, response);
            return null;
        }).when(handler).sendResponse(any(HazelcastInstance.class), anyString(), any());

        return handler;
    }

    @Bean
    public HazelcastFlowBootstrap hazelcastFlowBootstrap(GenericHazelcastRouter router,
                                                         GenericHazelcastConsumer consumer) {
        return new HazelcastFlowBootstrap(router, consumer);
    }

    @Bean
    public GenericHazelcastRouter<DummyMessage, DummyMessage, DummyMessage> hazelcastRouter(
            MetricsService metricsService,
            HazelcastInstance hazelcastInstance,
            List<FlowConfig> flowConfigs,
            FlowHandlerRegistry<DummyMessage, DummyMessage> registry) {
        return new GenericHazelcastRouter<>(metricsService, hazelcastInstance, flowConfigs, registry);
    }

    @Bean
    public GenericHazelcastConsumer<DummyMessage, DummyMessage, DummyMessage> hazelcastConsumer(
            MetricsService metricsService,
            HazelcastInstance hazelcastInstance,
            List<FlowConfig> flowConfigs,
            FlowHandlerRegistry<DummyMessage, DummyMessage> registry) {
        return new GenericHazelcastConsumer<>(metricsService, hazelcastInstance, flowConfigs, registry);
    }

    @Bean("flowTaskScheduler")
    public ThreadPoolTaskScheduler taskScheduler() {
        ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
        scheduler.setPoolSize(1);
        scheduler.setThreadNamePrefix("hazelcast-scheduler-");
        scheduler.initialize();
        return scheduler;
    }

    @Bean
    public TestCollector testCollector() {
        return new TestCollector();
    }

    @Bean
    @Primary
    public MetricsService metricsService() {
        return mock(MetricsService.class);
    }

    public static class TestCollector {
        private final Map<String, Object> sentResponses = new HashMap<>();

        public void recordSent(String topic, Object response) {
            sentResponses.put(topic, response);
        }

        public Object getSent(String topic) {
            return sentResponses.get(topic);
        }

        public boolean wasSent(String topic) {
            return sentResponses.containsKey(topic);
        }

        public void clear() {
            sentResponses.clear();
        }
    }
}


