package osplus.pkptuna.util;

import osplus.apl.core.api.AplComponent;

import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Generischer Antwort-Tracker basierend auf Korrelations-IDs.
 * Ermöglicht asynchrone Zuordnung von Antworten zu Anfragen in verteilten Systemen.
 *
 * @param <T> Typ der erwarteten Antwort
 */
@AplComponent
public class GenericResponseTracker<T> {

    // Thread-sichere Map zur Speicherung aller laufenden Anfragen
    private final Map<String, CompletableFuture<?>> pending = new ConcurrentHashMap<>();

    /**
     * Registriert eine neue erwartete Antwort anhand ihrer Korrelations-ID.
     *
     * @param correlationId Die eindeutige ID, die zur späteren Zuordnung der Antwort verwendet wird
     * @param <T>           Der erwartete Typ der Antwort
     */
    public <T> void register(String correlationId) {
        pending.put(correlationId, new CompletableFuture<T>());
    }

    /**
     * Markiert eine Antwort als empfangen und löst das zugehörige Future aus.
     *
     * @param correlationId Die ID, mit der die Antwort zugeordnet wird
     * @param response      Die empfangene Antwort vom Typ T
     * @param <T>           Der Typ der Antwort
     */
    public <T> void complete(String correlationId, T response) {
        @SuppressWarnings("unchecked")
        CompletableFuture<T> future = (CompletableFuture<T>) pending.remove(correlationId);
        if (future != null) {
            future.complete(response);
        }
    }

    /**
     * Gibt das Future-Objekt zurück, das auf die Antwort wartet.
     *
     * @param correlationId Die zugehörige Korrelations-ID
     * @param <T>           Der erwartete Typ der Antwort
     * @return              CompletableFuture, das bei Antwort abgeschlossen wird
     */
    @SuppressWarnings("unchecked")
    public <T> CompletableFuture<T> await(String correlationId) {
        return (CompletableFuture<T>) pending.get(correlationId);
    }
    
    public static boolean hasTrackerFor(String correlationId) {
        return instanceMap.containsKey(correlationId);
    }
}
