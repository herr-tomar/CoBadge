package osplus.pkp.dto.model;

import java.util.ArrayList;
import java.util.List;

/**
 * Modellklasse, die eine Protobuf-Message beschreibt.
 * Enthält den Namen der Message, das zugehörige Paket sowie die enthaltenen Felder.
 */
public class ProtoMessageModel {

    /** Klassenname der Protobuf-Message. */
    private String className;

    /** Java-Paketname, in den die REST-Klasse generiert wird. */
    private String packageName;

    /** Ursprünglicher Paketname aus der .proto-Datei. */
    private String protoPackageName;

    /** Liste der enthaltenen Felder der Message. */
    private final List<ProtoFieldModel> fields = new ArrayList<>();

    /**
     * Konstruktor zur Initialisierung mit dem Klassennamen.
     *
     * @param className Name der Protobuf-Message
     */
    public ProtoMessageModel(String className) {
        this.className = className;
    }

    /**
     * Gibt den Klassennamen zurück.
     *
     * @return Name der Protobuf-Message
     */
    public String getClassName() {
        return className;
    }

    /**
     * Setzt den Klassennamen der Message.
     *
     * @param className Klassenname
     */
    public void setClassName(String className) {
        this.className = className;
    }

    /**
     * Gibt den Ziel-Paketnamen für das REST-Modell zurück.
     *
     * @return Paketname
     */
    public String getPackageName() {
        return packageName;
    }

    /**
     * Setzt den Ziel-Paketnamen für das REST-Modell.
     *
     * @param packageName Paketname
     */
    public void setPackageName(String packageName) {
        this.packageName = packageName;
    }

    /**
     * Gibt den ursprünglichen Protobuf-Paketnamen zurück.
     *
     * @return Protobuf-Paketname
     */
    public String getProtoPackageName() {
        return protoPackageName;
    }

    /**
     * Setzt den ursprünglichen Protobuf-Paketnamen.
     *
     * @param protoPackageName Protobuf-Paketname
     */
    public void setProtoPackageName(String protoPackageName) {
        this.protoPackageName = protoPackageName;
    }

    /**
     * Gibt die Liste der Felder zurück, die zur Message gehören.
     *
     * @return Liste der {@link ProtoFieldModel}
     */
    public List<ProtoFieldModel> getFields() {
        return fields;
    }

    /**
     * Fügt ein neues Feld zur Message hinzu.
     *
     * @param field Feldmodell, das hinzugefügt werden soll
     */
    public void addField(ProtoFieldModel field) {
        this.fields.add(field);
    }
}


----------------------

package osplus.pkp.dto.model;

/**
 * Modellklasse, die ein einzelnes Feld innerhalb einer Protobuf-Message beschreibt.
 * Enthält den Typ, Namen und ob das Feld mehrfach vorkommen kann (repeated).
 */
public class ProtoFieldModel {

    /** Ursprünglicher Protobuf-Datentyp (z. B. string, int32, CustomDto etc.) */
    private final String protoType;

    /** Feldname in der Message. */
    private final String name;

    /** Gibt an, ob es sich um ein wiederholtes Feld handelt (repeated). */
    private final boolean repeated;

    /**
     * Konstruktor zur Initialisierung eines Protobuf-Feldes.
     *
     * @param protoType Typ des Feldes
     * @param name Name des Feldes
     * @param repeated true, wenn es sich um ein wiederholtes Feld handelt
     */
    public ProtoFieldModel(String protoType, String name, boolean repeated) {
        this.protoType = protoType;
        this.name = name;
        this.repeated = repeated;
    }

    /**
     * Gibt den Protobuf-Typ des Feldes zurück.
     *
     * @return Protobuf-Datentyp
     */
    public String getProtoType() {
        return protoType;
    }

    /**
     * Gibt den Namen des Feldes zurück.
     *
     * @return Feldname
     */
    public String getName() {
        return name;
    }

    /**
     * Gibt an, ob das Feld wiederholt ist (repeated).
     *
     * @return true, wenn das Feld wiederholt ist
     */
    public boolean isRepeated() {
        return repeated;
    }

    /**
     * Gibt den entsprechenden Java-Typ für den Protobuf-Typ zurück.
     * Berücksichtigt dabei auch, ob das Feld repeated ist.
     *
     * @return Java-Typ als String
     */
    public String getJavaType() {
        String javaType = switch (protoType) {
            case "string" -> "String";
            case "bool" -> "Boolean";
            case "int32", "sint32", "uint32", "fixed32" -> "Integer";
            case "int64", "sint64", "uint64", "fixed64" -> "Long";
            case "float" -> "Float";
            case "double" -> "Double";
            case "bytes" -> "byte[]";
            case "google.protobuf.Timestamp" -> "java.time.Instant";
            default -> protoType.endsWith("Dto") ? protoType : "Object";
        };

        return repeated ? "List<" + javaType + ">" : javaType;
    }

    /**
     * Prüft, ob es sich beim Typ um einen benutzerdefinierten Typ handelt
     * (also nicht um einen eingebauten Protobuf-Typ).
     *
     * @return true, wenn es ein benutzerdefinierter Typ ist
     */
    public boolean isCustomType() {
        return !protoType.matches(
                "string|bool|int32|sint32|uint32|fixed32|int64|sint64|uint64|fixed64|float|double|bytes|google.protobuf.Timestamp"
        );
    }

    /**
     * Gibt den einfachen Java-Typnamen ohne Paketpfad zurück.
     *
     * @return einfacher Typname
     */
    public String getSimpleJavaType() {
        String type = protoType;
        if (protoType.endsWith("Dto")) {
            type = protoType;
        }
        return type.replaceAll(".*\\.", ""); // Entfernt Paketnamen
    }
}


