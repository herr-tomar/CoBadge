package osplus.pkptuna.flows.handlers;

import com.hazelcast.core.HazelcastInstance;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import osplus.apl.core.test.utils.AplTestRunner;
import osplus.apl.core.test.utils.BaseAplTest;
import osplus.pkptuna.dispute.create.model.DisputeCreateRequestDto;
import osplus.pkptuna.dispute.create.model.DisputeCreateRequestWrapperDto;
import osplus.pkptuna.dispute.create.model.DisputeCreateResponseDto;
import osplus.pkptuna.dispute.create.model.DisputeCreateResponseWrapperDto;
import osplus.pkptuna.dispute.service.DisputeService;
import osplus.pkptuna.hazelcast.protobuf.impl.ProtobufDeserializer;
import osplus.pkptuna.hazelcast.pubsub.ReliableTopicPublisher;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@SpringBootTest(classes = {
        AplTestRunner.class,
        DisputeCreateFlowHandlerTest.TestConfig.class
},
        properties = {
                "spring.main.allow-bean-definition-overriding=true",
                "apl.application.name=uui",
                "apl.application.version=0.0.1-TEST"
        }
)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class DisputeCreateFlowHandlerTest extends BaseAplTest {

    @Autowired
    private DisputeCreateFlowHandler handler;

    @Autowired
    private DisputeService disputeService;

    /**
     * Verifies extraction of correlation ID from the wrapper.
     */
    @Test
    void shouldExtractCorrelationId() {
        DisputeCreateRequestWrapperDto request = DisputeCreateRequestWrapperDto.newBuilder()
                .setCorrelationId("create-001")
                .build();

        String result = handler.extractCorrelationId(request);

        assertEquals("create-001", result);
    }

    /**
     * Verifies that the create service is invoked with the payload.
     */
    @Test
    void shouldCallCreateService() {
        DisputeCreateRequestDto dto = DisputeCreateRequestDto.newBuilder()
                // populate fields as needed for your DTO; left minimal on purpose
                .build();

        DisputeCreateRequestWrapperDto request = DisputeCreateRequestWrapperDto.newBuilder()
                .setPayload(dto)
                .build();

        DisputeCreateResponseDto expected = DisputeCreateResponseDto.newBuilder().build();
        when(disputeService.createDispute(dto)).thenReturn(expected);

        DisputeCreateResponseDto actual = handler.handleRequest(request);

        assertEquals(expected, actual);
    }

    /**
     * Verifies correct wrapping of the response object.
     */
    @Test
    void shouldWrapResponseCorrectly() {
        DisputeCreateResponseDto response = DisputeCreateResponseDto.newBuilder().build();

        Object wrapped = handler.wrapResponse("corr-id", response);

        assertTrue(wrapped instanceof DisputeCreateResponseWrapperDto);
        DisputeCreateResponseWrapperDto wrapper = (DisputeCreateResponseWrapperDto) wrapped;
        assertEquals("corr-id", wrapper.getCorrelationId());
        assertEquals(response, wrapper.getResponse());
    }

    @TestConfiguration
    static class TestConfig {
        @Bean
        public DisputeCreateFlowHandler disputeCreateFlowHandler(
                ReliableTopicPublisher<DisputeCreateResponseWrapperDto> reliableTopicPublisher,
                ProtobufDeserializer<DisputeCreateRequestWrapperDto> deserializer,
                DisputeService disputeService
        ) {
            return new DisputeCreateFlowHandler(reliableTopicPublisher, deserializer, disputeService);
        }

        @Bean
        public DisputeService disputeService() {
            return mock(DisputeService.class);
        }

        @Bean
        @SuppressWarnings("unchecked")
        public ReliableTopicPublisher<DisputeCreateResponseWrapperDto> reliableTopicPublisher() {
            return mock(ReliableTopicPublisher.class);
        }

        @Bean
        @SuppressWarnings("unchecked")
        public ProtobufDeserializer<DisputeCreateRequestWrapperDto> deserializer() {
            return mock(ProtobufDeserializer.class);
        }

        @Bean
        public HazelcastInstance hazelcastInstance() {
            return mock(HazelcastInstance.class);
        }
    }
}
