/**
 * Führt den HTTP-Aufruf an den IBO-Service zum Erstellen eines neuen Dispute-Ordners durch.
 *
 * @param issuerId       die ID des Issuers
 * @param transactionId  die zuvor ermittelte Transaktions-ID
 * @param body           das IBO-spezifische Create-Request-DTO mit den Dispute-Daten
 * @return die vom IBO-Service gelieferte Antwort als {@link DisputeIboCreateResponseDto}
 *
 * @throws RuntimeException wenn der HTTP-Aufruf fehlschlägt oder die Antwort ungültig ist
 */
private DisputeIboCreateResponseDto createIboDispute(String issuerId,
                                                     String transactionId,
                                                     DisputeIboCreateRequestDto body) { ... }


-----

/**
 * Führt den HTTP-Aufruf an den IBO-Service durch, um anhand der übergebenen ARN (Acquirer Reference Number)
 * die zugehörige Transaktions-ID zu ermitteln.
 *
 * @param req das {@link DisputeIboTransactionRequestDto} mit Issuer-ID und ARN-Liste
 * @return die vom IBO-Service gelieferte Antwort als {@link DisputeIboTransactionResponseDto}
 *
 * @throws RuntimeException wenn der HTTP-Aufruf fehlschlägt oder die Antwort ungültig ist
 */
private DisputeIboTransactionResponseDto lookUpIboTransactionId(DisputeIboTransactionRequestDto req) { ... }


----


/**
 * Prüft, ob die in der Antwort enthaltenen Metadaten einen erfolgreichen HTTP-Statuscode enthalten.
 *
 * @param md  das Response-Metadatenobjekt der Transaktions-Lookup-Antwort
 * @param ctx zusätzlicher Kontexttext für Logging und Fehlermeldungen
 * @throws RuntimeException wenn {@code md} {@code null} ist oder der Statuscode kein 2xx-Code ist
 */
private static void ensureOk(osplus.pkptuna.rest.dispute.ibo.transaction.identifier.model.ResponseMetadataDto md,
                              String ctx) { ... }


-----


/**
 * Prüft, ob die in der Antwort enthaltenen Metadaten einen erfolgreichen HTTP-Statuscode enthalten.
 *
 * @param md  das Response-Metadatenobjekt der Dispute-Create-Antwort
 * @param ctx zusätzlicher Kontexttext für Logging und Fehlermeldungen
 * @throws RuntimeException wenn {@code md} {@code null} ist oder der Statuscode kein 2xx-Code ist
 */
private static void ensureOk(osplus.pkptuna.rest.dispute.ibo.create.model.ResponseMetadataDto md,
                              String ctx) { ... }


----

/**
 * Liest den angegebenen HTTP-Headerwert aus oder gibt einen leeren String zurück,
 * falls der Header nicht vorhanden oder {@code null} ist.
 *
 * @param h    die HttpHeaders-Instanz
 * @param name der Name des gesuchten Headers
 * @return der erste gefundene Headerwert oder ein leerer String, wenn nicht vorhanden
 */
private static String headerOrEmpty(org.springframework.http.HttpHeaders h, String name) { ... }
