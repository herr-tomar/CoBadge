package osplus.pkptuna.dispute.service.impl;

import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import org.junit.jupiter.api.*;
import org.mockito.MockedStatic;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import osplus.apl.core.test.utils.AplTestRunner;
import osplus.apl.core.test.utils.BaseAplTest;
import osplus.pkptuna.dispute.create.model.DisputeCreateRequestDto;
import osplus.pkptuna.dispute.create.model.DisputeCreateResponseDto;
import osplus.pkptuna.dispute.service.mapping.DynsToIboCreateMapper;
import osplus.pkptuna.dispute.service.normalization.DisputeCreateNormalizer;
import osplus.pkptuna.dispute.service.validation.DisputeCreateValidator;
import osplus.pkptuna.dispute.service.validation.FunctionalValidationException;
import osplus.pkptuna.dispute.service.validation.Violation;
import osplus.pkptuna.rest.dispute.create.model.mapper.DisputeCreateRequestDtoMapper;
import osplus.pkptuna.rest.dispute.ibo.create.model.DisputeIboCreateRequestDto;

import java.io.IOException;
import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

/**
 * Tests focused on DisputeServiceImpl#createDispute.
 *
 * NOTE:
 *  - We mock only the collaborators that the service calls before hitting HTTP.
 *  - HTTP is exercised via MockWebServer (transaction lookup + create).
 *  - Static DisputeCreateValidator / DisputeCreateNormalizer are stubbed with Mockito's MockedStatic.
 */
@SpringBootTest(
        classes = {AplTestRunner.class, ProjecteigeneTestConfiguration.class},
        webEnvironment = SpringBootTest.WebEnvironment.MOCK,
        properties = {
                "apl.application.name=uui",
                "apl.application.version=0.0.1-TEST"
        }
)
@AutoConfigureMockMvc
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class DisputeServiceCreateDisputeTest extends BaseAplTest {

    @Autowired
    private DisputeServiceImpl disputeService;

    // Collaborators injected into DisputeServiceImpl by your configuration
    @MockBean
    private DisputeCreateRequestDtoMapper requestMapper;

    @MockBean
    private DynsToIboCreateMapper dynsToIboCreateMapper;

    private static MockWebServer mockWebServer;

    @DynamicPropertySource
    static void overrideProps(DynamicPropertyRegistry registry) throws IOException {
        mockWebServer = new MockWebServer();
        mockWebServer.start();

        // Base URL for WebClient
        registry.add("dispute.base-url", () -> mockWebServer.url("/").toString());

        // Basic auth for DisputeServiceProperties
        registry.add("dispute.auth.username", () -> "testuser");
        registry.add("dispute.auth.password", () -> "testpass");

        // Paths used by DisputeServiceImpl#createDispute
        registry.add("dispute.paths.lookup-transactionid", () -> "/tx/lookup");
        registry.add("dispute.paths.dispute-create", () -> "/issuers/{issuerId}/transactions/{transactionId}/disputes");

        // Kept from your lookup tests for completeness (not used in these tests)
        registry.add("dispute.paths.lookup-disputes", () -> "/issuers/{issuerId}/cards/{cardReference}/disputes");
    }

    @AfterAll
    void shutDown() throws Exception {
        mockWebServer.shutdown();
    }

    @Test
    void createDispute_happyPath_returnsFolderReference() {
        // --- Arrange proto request ---
        DisputeCreateRequestDto in = DisputeCreateRequestDto.newBuilder().build();

        // --- Arrange REST DTO that mapper should return (only fields we need here) ---
        osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto restDto =
                new osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto();
        restDto.setIssuerId("1001");
        restDto.setAcquiringReferenceNumber("ARN-123");

        when(requestMapper.toRestDto(in)).thenReturn(restDto);

        // Normalizer returns the same (or a normalized copy)
        osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto normalized =
                new osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto();
        normalized.setIssuerId("1001");
        normalized.setAcquiringReferenceNumber("ARN-123");

        // IBO create request body built by mapper
        DisputeIboCreateRequestDto iboBody = new DisputeIboCreateRequestDto();
        when(dynsToIboCreateMapper.toIbo(normalized)).thenReturn(iboBody);

        // --- Mock static DisputeCreateValidator + Normalizer ---
        try (MockedStatic<DisputeCreateValidator> validator = org.mockito.Mockito.mockStatic(DisputeCreateValidator.class);
             MockedStatic<DisputeCreateNormalizer> normalizer = org.mockito.Mockito.mockStatic(DisputeCreateNormalizer.class)) {

            validator.when(() -> DisputeCreateValidator.validate(restDto)).thenReturn(Collections.emptyList());
            normalizer.when(() -> DisputeCreateNormalizer.normalize(restDto)).thenReturn(normalized);

            // --- HTTP stub #1: transactionId lookup (200 with body) ---
            String txLookupJson = """
                    {
                      "responseMetadata": { "statusCode": 200, "correlationId": "corr-tx" },
                      "data": [
                        { "transactionIdentifier": { "transactionId": "TX-999" } }
                      ]
                    }
                    """;
            mockWebServer.enqueue(new MockResponse()
                    .setResponseCode(200)
                    .setHeader("Content-Type", "application/json")
                    .setHeader("WL-Correlation-ID", "corr-tx")
                    .setBody(txLookupJson));

            // --- HTTP stub #2: create dispute (201 with body) ---
            String createJson = """
                    {
                      "responseMetadata": { "statusCode": 201, "correlationId": "corr-create" },
                      "data": {
                        "disputeFolderIdentifier": { "disputeFolderReference": "DFR-116855" }
                      }
                    }
                    """;
            mockWebServer.enqueue(new MockResponse()
                    .setResponseCode(201)
                    .setHeader("Content-Type", "application/json")
                    .setHeader("WL-Correlation-ID", "corr-create")
                    .setBody(createJson));

            // --- Act ---
            DisputeCreateResponseDto out = disputeService.createDispute(in);

            // --- Assert ---
            assertThat(out).isNotNull();
            assertThat(out.getReklVgngIntnNr()).isEqualTo("DFR-116855");
        }
    }

    @Test
    void createDispute_whenValidationFails_throwsFunctionalValidationException() {
        // Input and mapped REST DTO
        DisputeCreateRequestDto in = DisputeCreateRequestDto.newBuilder().build();

        osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto restDto =
                new osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto();
        restDto.setIssuerId("1001");
        restDto.setAcquiringReferenceNumber("ARN-123");
        when(requestMapper.toRestDto(in)).thenReturn(restDto);

        // Prepare a validation violation
        Violation v = new Violation("field", "must not be null");
        List<Violation> violations = List.of(v);

        try (MockedStatic<DisputeCreateValidator> validator = org.mockito.Mockito.mockStatic(DisputeCreateValidator.class)) {
            validator.when(() -> DisputeCreateValidator.validate(restDto)).thenReturn(violations);

            // No HTTP should be called; service fails before network
            assertThatThrownBy(() -> disputeService.createDispute(in))
                    .isInstanceOf(FunctionalValidationException.class)
                    .satisfies(ex -> {
                        FunctionalValidationException fve = (FunctionalValidationException) ex;
                        assertThat(fve.getViolations()).containsExactly(v);
                    });
        }
    }

    @Test
    void createDispute_whenTxLookupReturnsNoTransactionId_throws() {
        // Input and mapped REST DTO
        DisputeCreateRequestDto in = DisputeCreateRequestDto.newBuilder().build();

        osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto restDto =
                new osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto();
        restDto.setIssuerId("1001");
        restDto.setAcquiringReferenceNumber("ARN-123");
        when(requestMapper.toRestDto(in)).thenReturn(restDto);

        try (MockedStatic<DisputeCreateValidator> validator = org.mockito.Mockito.mockStatic(DisputeCreateValidator.class);
             MockedStatic<DisputeCreateNormalizer> normalizer = org.mockito.Mockito.mockStatic(DisputeCreateNormalizer.class)) {

            validator.when(() -> DisputeCreateValidator.validate(restDto)).thenReturn(Collections.emptyList());
            normalizer.when(() -> DisputeCreateNormalizer.normalize(restDto)).thenReturn(restDto);

            // Tx lookup returns 200 OK but empty data array
            String txLookupJson = """
                    {
                      "responseMetadata": { "statusCode": 200, "correlationId": "corr-tx" },
                      "data": []
                    }
                    """;
            mockWebServer.enqueue(new MockResponse()
                    .setResponseCode(200)
                    .setHeader("Content-Type", "application/json")
                    .setHeader("WL-Correlation-ID", "corr-tx")
                    .setBody(txLookupJson));

            // Act + Assert
            assertThatThrownBy(() -> disputeService.createDispute(in))
                    .isInstanceOf(RuntimeException.class)
                    .hasMessageContaining("Transaction identifier not found");
        }
    }

    @Test
    void createDispute_whenCreateApiNon2xx_throws() {
        // Input and mapped REST DTO
        DisputeCreateRequestDto in = DisputeCreateRequestDto.newBuilder().build();

        osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto restDto =
                new osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto();
        restDto.setIssuerId("1001");
        restDto.setAcquiringReferenceNumber("ARN-123");
        when(requestMapper.toRestDto(in)).thenReturn(restDto);

        // Normalized + body mapping
        DisputeIboCreateRequestDto iboBody = new DisputeIboCreateRequestDto();
        when(dynsToIboCreateMapper.toIbo(any())).thenReturn(iboBody);

        try (MockedStatic<DisputeCreateValidator> validator = org.mockito.Mockito.mockStatic(DisputeCreateValidator.class);
             MockedStatic<DisputeCreateNormalizer> normalizer = org.mockito.Mockito.mockStatic(DisputeCreateNormalizer.class)) {

            validator.when(() -> DisputeCreateValidator.validate(restDto)).thenReturn(Collections.emptyList());
            normalizer.when(() -> DisputeCreateNormalizer.normalize(restDto)).thenReturn(restDto);

            // Tx lookup (OK with transactionId)
            String txLookupJson = """
                    {
                      "responseMetadata": { "statusCode": 200 },
                      "data": [ { "transactionIdentifier": { "transactionId": "TX-999" } } ]
                    }
                    """;
            mockWebServer.enqueue(new MockResponse()
                    .setResponseCode(200)
                    .setHeader("Content-Type", "application/json")
                    .setBody(txLookupJson));

            // Create API returns 400 with an error body -> ensureOk should throw
            String createErrorJson = """
                    {
                      "responseMetadata": { "statusCode": 400, "statusMessage": "Bad Request" }
                    }
                    """;
            mockWebServer.enqueue(new MockResponse()
                    .setResponseCode(400)
                    .setHeader("Content-Type", "application/json")
                    .setBody(createErrorJson));

            assertThatThrownBy(() -> disputeService.createDispute(in))
                    .isInstanceOf(RuntimeException.class)
                    .hasMessageContaining("Create dispute failed")
                    .hasMessageContaining("status=400");
        }
    }
}
