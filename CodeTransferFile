@Override
public DisputeCreateResponseDto createDispute(DisputeCreateRequestDto disputeCreateRequestDto) {

    // Proto -> REST for the external REST contract
    osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto restReq =
            disputeCreateRequestDtoMapper.toRestDto(disputeCreateRequestDto);

    // ---------------------- 1) Lookup transactionId from ARN ----------------------
    String issuerId = Optional.ofNullable(restReq.getIssuerId())
            .orElseThrow(() -> new RuntimeException("IssuerId is not present"));
    String arn = Optional.ofNullable(restReq.getAcquiringReferenceNumber())
            .orElseThrow(() -> new RuntimeException("acquiringReferenceNumber is not present"));

    DisputeIboTransactionRequestDto txReq = new DisputeIboTransactionRequestDto();
    txReq.setIssuerId(issuerId);
    // Ensure property name matches your REST DTO (some models used 'acquirerReferenceDataList')
    txReq.setAcquirerReferenceId(java.util.List.of(arn));

    DisputeIboTransactionResponseDto txResp = lookUpIboTransactionId(txReq);

    // ✅ metadata is always there; non-2xx means error
    ensureOk(txResp.getResponseMetadata(), "Exception in fetching transaction identifier");

    // Extract transactionId
    String transactionId = Optional.ofNullable(txResp.getData())
            .filter(list -> !list.isEmpty())
            .map(list -> list.get(0))
            .map(d -> d.getTransactionIdentifier())
            .map(ti -> ti.getTransactionId())
            .filter(id -> id != null && !id.isBlank())
            .orElseThrow(() -> new RuntimeException("Transaction identifier not found"));

    // ---------------------- 2) Build IBO create request body ----------------------
    DisputeIboCreateRequestDto iboCreateBody = DynsToIboCreateMapper.map(restReq);

    // ---------------------- 3) Create the dispute in IBO ----------------------
    DisputeIboCreateResponseDto createResp =
            createIboDisputeFolder(issuerId, transactionId, iboCreateBody);

    // ✅ metadata is always there; non-2xx means error
    ensureOk(createResp.getResponseMetadata(), "Create dispute failed");

    // Extract disputeFolderReference
    String disputeFolderReference = Optional.ofNullable(createResp.getData())
            .map(d -> d.getDisputeFolderIdentifier())
            .map(id -> id.getDisputeFolderReference())
            .filter(ref -> ref != null && !ref.isBlank())
            .orElseThrow(() -> new RuntimeException("Missing disputeFolderReference in create response"));

    // ---------------------- 4) Build service response ----------------------
    // Adjust to your actual proto fields on DisputeCreateResponseDto.
    // If your proto has only a status today, consider adding folder reference.
    DisputeCreateResponseDto.Builder out = DisputeCreateResponseDto.newBuilder()
            .setStatus("OK");

    // If your proto supports it, also return the reference:
    // out.setDisputeFolderReference(disputeFolderReference);

    return out.build();
}


--------





private static void ensureOk(
    osplus.pkptuna.rest.dispute.ibo.transaction.identifier.model.ResponseMetadataDto md,
    String context
) {
    if (md == null) throw new RuntimeException(context + " (no response metadata)");
    int code = md.getStatusCode();
    if (code < 200 || code >= 300) {
        String corr = md.getCorrelationId() == null ? "" : md.getCorrelationId();
        throw new RuntimeException(context + " (status=" + code + ", corrId=" + corr + "): " + md.getStatusMessage());
    }
}

private static void ensureOk(
    osplus.pkptuna.rest.dispute.ibo.create.model.ResponseMetadataDto md,
    String context
) {
    if (md == null) throw new RuntimeException(context + " (no response metadata)");
    int code = md.getStatusCode();
    if (code < 200 || code >= 300) {
        String corr = md.getCorrelationId() == null ? "" : md.getCorrelationId();
        throw new RuntimeException(context + " (status=" + code + ", corrId=" + corr + "): " + md.getStatusMessage());
    }
}
