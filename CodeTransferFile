package osplus.pkptuna.util;

import com.google.protobuf.Message;
import com.google.protobuf.Parser;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.topic.ITopic;
import osplus.fi.core.logging.api.Logger;

import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * Utility class for registering generic Hazelcast listeners for Protobuf messages.
 */
public class HazelcastListenerUtils {

    /**
     * Registers a generic listener on a Hazelcast ReliableTopic to process Protobuf messages.
     *
     * @param hazelcastInstance      Hazelcast client instance
     * @param topicName              Topic to listen on
     * @param parser                 Protobuf parser for deserialization
     * @param correlationIdExtractor Function to extract correlation ID from message
     * @param responseExtractor      Function to extract response payload from message
     * @param responseConsumer       Consumer to pass the parsed response to
     * @param logger                 Logger for diagnostics
     * @param <W>                    Wrapper Protobuf message type
     * @param <R>                    Response payload type
     */
    public static <W extends Message, R> void registerGenericResponseListener(
            HazelcastInstance hazelcastInstance,
            String topicName,
            Parser<W> parser,
            Function<W, String> correlationIdExtractor,
            Function<W, R> responseExtractor,
            BiConsumer<String, R> responseConsumer,
            Logger logger
    ) {
        ITopic<byte[]> topic = hazelcastInstance.getReliableTopic(topicName);

        topic.addMessageListener(message -> {
            try {
                byte[] messageBytes = message.getMessageObject();
                W wrapper = parser.parseFrom(messageBytes);

                String correlationId = correlationIdExtractor.apply(wrapper);
                R response = responseExtractor.apply(wrapper);

                if (correlationId == null || correlationId.isBlank()) {
                    logger.warn("Received message on topic '{}' with missing or invalid correlation ID", topicName);
                    return;
                }

                // Check whether the correlation ID is known before processing
                boolean accepted = GenericResponseTracker.hasTrackerFor(correlationId);
                if (!accepted) {
                    logger.warn("Ignoring response with unknown correlationId='{}' on topic '{}'", correlationId, topicName);
                    return;
                }

                responseConsumer.accept(correlationId, response);

            } catch (Exception e) {
                logger.error("Failure in processing response from Topic '{}'", topicName, e);
            }
        });

        logger.info("Response listener registered on topic '{}'", topicName);
    }
}
