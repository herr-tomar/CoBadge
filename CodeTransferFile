package osplus.pkptuna.hazelcast;

import com.google.protobuf.ByteString;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.Parser;
import com.google.protobuf.UnknownFieldSet;
import com.hazelcast.config.Config;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import osplus.apl.core.api.administration.metrics.MetricTag;
import osplus.apl.core.api.administration.metrics.MetricsService;
import osplus.pkptuna.hazelcast.config.FlowConfig;
import osplus.pkptuna.hazelcast.config.FlowHandlerInitializer;
import osplus.pkptuna.hazelcast.config.HazelcastConfigProps;
import osplus.pkptuna.hazelcast.config.HazelcastFlowBootstrap;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;
import osplus.pkptuna.hazelcast.pubsub.GenericHazelcastConsumer;
import osplus.pkptuna.hazelcast.pubsub.GenericHazelcastRouter;

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

@TestConfiguration
public class FlowHandlerTestConfiguration {

    @Bean
    public HazelcastInstance hazelcastInstance() {
        Config config = new Config();
        config.setClusterName("test-cluster");
        config.getNetworkConfig().setPortAutoIncrement(true);
        config.setProperty("hazelcast.logging.type", "slf4j");
        return Hazelcast.newHazelcastInstance(config);
    }

    @Bean
    public FlowHandlerRegistry<String, FlowHandler<?, ?>> handlerRegistry() {
        FlowHandlerRegistry<String, FlowHandler<?, ?>> registry = new FlowHandlerRegistry<>();
        registry.register("myFlow", sampleFlowHandler());
        return registry;
    }

    @Bean
    public FlowHandlerInitializer flowHandlerInitializer(List<FlowConfig> configs,
                                                         Map<String, FlowHandler<?, ?>> handlerMap,
                                                         FlowHandlerRegistry<String, FlowHandler<?, ?>> registry,
                                                         HazelcastFlowBootstrap bootstrap) {
        return new FlowHandlerInitializer(configs, handlerMap, registry, bootstrap);
    }

    @Bean
    public FlowConfig flowConfig() {
        return new FlowConfig("myFlow", "req-topic", "res-topic", "map-", 1);
    }

    @Bean
    public List<FlowConfig> flowConfigs(FlowConfig flowConfig) {
        return List.of(flowConfig);
    }

    @Bean
    public Map<String, FlowHandler<?, ?>> handlerMap() {
        return Map.of("myFlow", sampleFlowHandler());
    }

    @Bean
    public FlowHandler sampleFlowHandler() {
       return new FlowHandler<Message, Message> () {

           @Override
           public Message deserializeRequest(byte[] data) throws InvalidProtocolBufferException {
               return new Message() {
                   @Override
                   public Parser<? extends Message> getParserForType() {
                       return null;
                   }

                   @Override
                   public Builder newBuilderForType() {
                       return null;
                   }

                   @Override
                   public Builder toBuilder() {
                       return null;
                   }

                   @Override
                   public void writeTo(CodedOutputStream output) throws IOException {

                   }

                   @Override
                   public int getSerializedSize() {
                       return 0;
                   }

                   @Override
                   public ByteString toByteString() {
                       return null;
                   }

                   @Override
                   public byte[] toByteArray() {
                       return new byte[0];
                   }

                   @Override
                   public void writeTo(OutputStream output) throws IOException {

                   }

                   @Override
                   public void writeDelimitedTo(OutputStream output) throws IOException {

                   }

                   @Override
                   public Message getDefaultInstanceForType() {
                       return null;
                   }

                   @Override
                   public List<String> findInitializationErrors() {
                       return null;
                   }

                   @Override
                   public String getInitializationErrorString() {
                       return null;
                   }

                   @Override
                   public Descriptors.Descriptor getDescriptorForType() {
                       return null;
                   }

                   @Override
                   public Map<Descriptors.FieldDescriptor, Object> getAllFields() {
                       return null;
                   }

                   @Override
                   public boolean hasOneof(Descriptors.OneofDescriptor oneof) {
                       return false;
                   }

                   @Override
                   public Descriptors.FieldDescriptor getOneofFieldDescriptor(Descriptors.OneofDescriptor oneof) {
                       return null;
                   }

                   @Override
                   public boolean hasField(Descriptors.FieldDescriptor field) {
                       return false;
                   }

                   @Override
                   public Object getField(Descriptors.FieldDescriptor field) {
                       return null;
                   }

                   @Override
                   public int getRepeatedFieldCount(Descriptors.FieldDescriptor field) {
                       return 0;
                   }

                   @Override
                   public Object getRepeatedField(Descriptors.FieldDescriptor field, int index) {
                       return null;
                   }

                   @Override
                   public UnknownFieldSet getUnknownFields() {
                       return null;
                   }

                   @Override
                   public boolean isInitialized() {
                       return false;
                   }
               };
           }

           @Override
           public String extractCorrelationId(Message request) {
               return "corr-" + request.hashCode();
           }

           @Override
           public Message handleRequest(Message request) {
               return  request;
           }

           @Override
           public Object wrapResponse(String correlationId, Message result) {
               return correlationId + ":" + result;
           }

           @Override
           public void sendResponse(HazelcastInstance hazelcastInstance, String topicName, Object response) {
               hazelcastInstance.getReliableTopic(topicName).publish((String) response);
           }

           @Override
           public String getFlowName() {
               return "myFlow";
           }
       };
    }

    @Bean
    public HazelcastFlowBootstrap hazelcastFlowBootstrap(GenericHazelcastRouter router,
                                                         GenericHazelcastConsumer consumer) {
        return new HazelcastFlowBootstrap(router, consumer);
    }

    @Bean
    public GenericHazelcastRouter hazelcastRouter(MetricsService metricsService,
                                                  HazelcastInstance hazelcastInstance,
                                                  List<FlowConfig> flowConfigs,
                                                  FlowHandlerRegistry<String, FlowHandler<?, ?>> registry) {
        return new GenericHazelcastRouter(metricsService, hazelcastInstance, flowConfigs, registry);
    }

    @Bean
    public GenericHazelcastConsumer hazelcastConsumer(MetricsService metricsService,
                                                      HazelcastInstance hazelcastInstance,
                                                      ThreadPoolTaskScheduler scheduler,
                                                      List<FlowConfig> flowConfigs,
                                                      FlowHandlerRegistry<String, FlowHandler<?, ?>> registry,
                                                      HazelcastConfigProps hazelcastConfigProps) {
        return new GenericHazelcastConsumer(metricsService, hazelcastInstance, scheduler,
                flowConfigs, registry, hazelcastConfigProps);
    }

    @Bean
    public ThreadPoolTaskScheduler taskScheduler() {
        ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
        scheduler.setPoolSize(1);
        scheduler.setThreadNamePrefix("hazelcast-scheduler-");
        scheduler.initialize();
        return scheduler;
    }

    @Bean
    public MetricsService metricsService() {
       return new MetricsService() {
           @Override
           public <N extends Number> void writeGaugeValue(String gaugeName, N value, MetricTag... tags) {

           }

           @Override
           public void increaseCounter(String name, MetricTag...tags) {

           }

           @Override
           public <T, S> T timer(Function<S, T> function, S parameter, String timerName, MetricTag... tags) {
               return null;
           }

           @Override
           public <T> T timer(Supplier<T> supplier, String timerName, MetricTag... tags) {
               return null;
           }

           @Override
           public <S> void timer(Consumer<S> consumer, S parameter, String timerName, MetricTag... tags) {

           }

           @Override
           public void timer(Runnable runnable, String timerName, MetricTag... tags) {

           }

       } ;
    }
}
