Got it üëç ‚Äî thanks for pointing that out.
We‚Äôll remove the **generic response parameter list** I had put in earlier, and instead extract the **actual response parameters** from the Java code you shared (`CobadgeUmsatzReklaPruefBsImpl`).

Looking into the implementation, the IBO response is processed in this section:

```java
RemoteServiceResult gatewayServiceResult = gatewayService.postRequest(gatewayUrl, jsonRequest, 404);

if (gatewayServiceResult.getStatusCode() == 200) {
    return true;
}
if (gatewayServiceResult.getStatusCode() == 404) {
    return false;
}
```



This tells us:

* The IBO response is evaluated purely by **HTTP status codes**.
* No deeper parsing of a JSON payload is implemented (at least in this version).

---

Here‚Äôs the revised functional specification with that correction:

---

# Functional Specification ‚Äì Dispute Existence Check

---

## 1. Detailed Description of the Issue

In the **current Cobadge solution**, the system validates whether a dispute already exists by checking directly in the **local Cobadge database**. All checks (duplicate, error retry, consistency, time window, eligibility) are DB-driven.

In the **new solution**, the goal is to perform the *existence check* directly against **IBO**, which is the interbank system of record for disputes. This ensures that Cobadge is aligned with the official external status of disputes and avoids inconsistencies.

However, two problems arise:

1. **Parameter mismatch**:

   * Dyns JSON delivers transaction-level identifiers (umsatzId, PAN, ARN, etc.).
   * IBO requires issuerId and cardReference to perform a dispute lookup.
   * These identifiers do not map 1:1.

2. **Checks and validations**:

   * The old Cobadge DB performed several technical and business checks.
   * These checks are not automatically covered by IBO.
   * We need to define how these validations will be handled in the new architecture.

---

## 2. Dyns Request Parameters

From the attached Java implementation, the following fields are delivered by Dyns to Cobadge:

* `umsatzId` ‚Üí Transaction identifier
* `transactionLifeCycleId` ‚Üí Transaction lifecycle identifier
* `transactionDateAndTime` ‚Üí Timestamp of transaction execution
* `transactionAmount` ‚Üí Transaction amount
* `primaryAccountNumber` (PAN) ‚Üí Card number (trimmed)
* `acquiringReferenceNumber` (ARN) ‚Üí Acquirer reference number

---

## 3. IBO Parameters

The IBO service for dispute lookup is:

```
GET /api/v2/issuers/{issuerId}/cards/{cardReference}/disputes
```

### Required Input Parameters

* `issuerId` ‚Üí Issuer identifier
* `cardReference` ‚Üí Identifier of the card (not the same as PAN)

### Response Parameters (from code)

From the implementation, Cobadge interprets only the **HTTP status code**:

* **200** ‚Üí dispute already exists in IBO.
* **404** ‚Üí no dispute found in IBO.
* Any other status ‚Üí treated as error.

---

## 4. Old System ‚Äì Checks and Validations

In the legacy DB-only solution, the following checks were performed:

1. **Duplicate check**:

   * Based on UMSATZ\_ID, PAN, ARN in Cobadge DB.

2. **Error retry**:

   * If previous attempt had status = error, allow retry.

3. **Time window**:

   * Transaction date ‚â§ 540 days from system date.

4. **Consistency**:

   * JSON values (PAN, ARN, amount, date/time) compared with UMSATZ record.

5. **Eligibility**:

   * Based on DB field `CBD_UMS_REKL_ZLSG_KZ` = J/N.

---

## 5. New System ‚Äì Proposed Checks and Validations

1. **Existence check**

   * Instead of Cobadge DB, call IBO endpoint `/issuers/{issuerId}/cards/{cardReference}/disputes`.
   * Validate dispute existence based on HTTP status code.

2. **Local checks**

   * Retain DB checks for:

     * Duplicate handling
     * Error retry
     * Time window (‚â§ 540 days)
     * Consistency
     * Eligibility (J/N flag)

3. **Clearing requirement**

   * Even in the new solution, the Cobadge dispute table must be populated for clearing processes (not modernized).

---

## 6. Exact Challenges

1. **Parameter mismatch**:

   * Dyns delivers umsatzId/ARN/PAN; IBO requires issuerId + cardReference.
   * No direct mapping exists today.

2. **Enrichment difficulty**:

   * To derive cardReference from PAN, Cobadge would need additional mapping data or a service call.
   * Currently, no reliable enrichment process is in place.

3. **Validation coverage**:

   * IBO only tells if a dispute exists (status 200/404).
   * It does not enforce Cobadge-specific checks (duplicates, retries, consistency, eligibility).

---

## 7. Strategies to Solve the Issue

Three possible approaches are identified:

1. **Change Dyns JSON output**

   * Modify Dyns so that it directly delivers `issuerId` and `cardReference`.

2. **New IBO service**

   * Build or request a new IBO API that can accept Dyns-style parameters (`umsatzId`, `ARN`, `PAN`) and perform the lookup internally.

3. **Enrichment in Cobadge**

   * Keep Dyns and IBO unchanged.
   * Introduce a translation/enrichment step in Cobadge:

     * Map `PAN ‚Üí cardReference`.
     * Derive `issuerId` if not directly available.
     * Normalize other parameters.
   * Then call IBO with the enriched identifiers.

---

Would you like me to now also **add a mapping table** that shows:

* Dyns request parameters,
* IBO required parameters,
* Gap/translation needed

so it‚Äôs even clearer for the spec where the mismatch lies?
