package osplus.pkp.datenbank.client;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

/**
 * Der {@code DbClient} ist ein einfaches Dienstprogramm zur Ausführung von SQL-Abfragen
 * gegen eine Oracle-Datenbank. Die Konfigurationsparameter und SQL-Befehle werden aus
 * Properties-Dateien geladen. Die Ergebnisse jeder Abfrage werden sowohl in der Konsole
 * als auch in einer CSV-Datei mit Zeitstempel ausgegeben.
 *
 * <p>Die folgenden Dateien werden erwartet:
 * <ul>
 *     <li><b>db.properties</b> – enthält JDBC-URL, Benutzername und optional das Passwort</li>
 *     <li><b>queries.properties</b> – enthält benannte SQL-Abfragen (z. B. query1, query2)</li>
 * </ul>
 *
 * <p>Die Ausgaben werden in einem Unterordner <code>output/</code> gespeichert.
 *
 * @author (Ihr Name)
 */
public class DbClient {

    private static final Logger LOGGER = LoggerFactory.getLogger(DbClient.class);

    private static final String DB_CONFIG_FILE = "db.properties";
    private static final String QUERY_FILE = "queries.properties";
    private static final String OUTPUT_DIR = "output";

    /**
     * Einstiegspunkt des Programms. Lädt die Konfiguration, stellt die Datenbankverbindung her
     * und führt alle definierten SQL-Abfragen aus.
     *
     * @param args nicht verwendet
     */
    public static void main(String[] args) {
        Properties dbProps = loadProperties(DB_CONFIG_FILE);
        Properties queries = loadProperties(QUERY_FILE);

        if (dbProps == null || queries == null) {
            return;
        }

        String jdbcUrl = dbProps.getProperty("db.url");
        String user = dbProps.getProperty("db.user");
        String password = dbProps.getProperty("db.password");

        new File(OUTPUT_DIR).mkdirs();

        try (Connection conn = (password == null || password.isEmpty())
                ? DriverManager.getConnection(jdbcUrl, user, (String) null)
                : DriverManager.getConnection(jdbcUrl, user, password)) {

            for (String key : queries.stringPropertyNames()) {
                String sql = queries.getProperty(key);
                LOGGER.info("Executing " + key + ": " + sql);
                executeQueryAndSave(conn, key, sql);
            }
        } catch (SQLException e) {
            LOGGER.error("Database connection failed: " + e.getMessage());
        }
    }

    /**
     * Lädt eine Properties-Datei aus dem Ressourcenverzeichnis.
     *
     * @param fileName Name der Properties-Datei (z. B. "db.properties")
     * @return das geladene {@code Properties}-Objekt oder {@code null} im Fehlerfall
     */
    private static Properties loadProperties(String fileName) {
        Properties props = new Properties();
        try (InputStream input = DbClient.class.getClassLoader().getResourceAsStream(fileName)) {
            if (input == null) {
                LOGGER.error("File not found: " + fileName);
                return null;
            }
            props.load(input);
        } catch (IOException e) {
            LOGGER.error("Failed to load " + fileName + ": " + e.getMessage());
            return null;
        }
        return props;
    }

    /**
     * Führt eine einzelne SQL-Abfrage aus und speichert das Ergebnis in einer
     * CSV-Datei mit Zeitstempel. Zusätzlich wird die Abfrage in der Konsole ausgegeben.
     *
     * @param conn      die geöffnete JDBC-Verbindung
     * @param queryKey  Schlüsselbezeichnung der Abfrage (z. B. "query1")
     * @param sql       der auszuführende SQL-Befehl
     */
    private static void executeQueryAndSave(Connection conn, String queryKey, String sql) {
        String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss_SSS").format(new Date());
        String fileName = OUTPUT_DIR + File.separator + queryKey + "_" + timestamp + ".csv";

        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql);
             PrintWriter writer = new PrintWriter(new FileWriter(fileName))) {

            ResultSetMetaData meta = rs.getMetaData();
            int columnCount = meta.getColumnCount();

            // Kopfzeile schreiben
            for (int i = 1; i <= columnCount; i++) {
                writer.print(meta.getColumnName(i));
                if (i < columnCount) {
                    writer.print(",");
                }
            }
            writer.println();

            // Zeilen schreiben
            while (rs.next()) {
                for (int i = 1; i <= columnCount; i++) {
                    writer.print(rs.getString(i));
                    if (i < columnCount) {
                        writer.print(",");
                    }
                }
                writer.println();
            }

            LOGGER.info("Output written to " + fileName);

        } catch (SQLException | IOException e) {
            LOGGER.error("Error executing query [" + queryKey + "]: " + e.getMessage());
        }
    }
}
