public void initRouters() {
    LOGGER.info("[initRouters] Using routerInstanceId={}", this.routerInstanceId);

    hazelcastInstance.getMap("router-leader-map")
        .addEntryListener(new LeaderMapListener(), true);

    tryBecomeLeaderIfStale(); // Reused for startup
}

private void tryBecomeLeaderIfStale() {
    try {
        IMap<String, String> leaderMap = hazelcastInstance.getMap("router-leader-map");
        IMap<String, Long> heartbeatMap = hazelcastInstance.getMap("router-heartbeat-map");

        String currentLeader = leaderMap.get("active-router");
        Long lastHeartbeat = heartbeatMap.get("heartbeat");

        boolean heartbeatStale = (lastHeartbeat == null || System.currentTimeMillis() - lastHeartbeat > 5000);

        if (heartbeatStale) {
            String previous = leaderMap.put("active-router", routerInstanceId);

            if (previous == null || previous.equals(currentLeader)) {
                LOGGER.info("This node is elected as the ACTIVE router (ID={})", routerInstanceId);
                startHeartbeat();
                subscribeToTopics();
            } else {
                LOGGER.info("Another node claimed leadership before us (ID={})", previous);
                unsubscribeFromTopics();
            }
        } else {
            LOGGER.info("Leadership already exists and heartbeat is alive (Leader={}, LastBeat={})",
                    currentLeader, lastHeartbeat);
            unsubscribeFromTopics();
        }
    } catch (Exception e) {
        LOGGER.error("Failed to check or claim leadership", e);
    }
}


private void startHeartbeat() {
    IMap<String, Long> heartbeatMap = hazelcastInstance.getMap("router-heartbeat-map");
    scheduler.scheduleAtFixedRate(() ->
        heartbeatMap.put("heartbeat", System.currentTimeMillis()), 0, 3, TimeUnit.SECONDS);

    // Re-election logic in case current leader dies
    scheduler.scheduleAtFixedRate(this::tryBecomeLeaderIfStale, 5, 5, TimeUnit.SECONDS);

    LOGGER.info("Heartbeat started for router ID={}", routerInstanceId);
}
