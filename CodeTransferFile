package osplus.pkptuna.hazelcast.flows;

import com.google.protobuf.InvalidProtocolBufferException;
import com.hazelcast.core.HazelcastInstance;

/**
 * Diese Schnittstelle definiert den vollständigen Verarbeitungszyklus eines
 * Nachrichtenflusses (Flow) in einem verteilten System mit Hazelcast.
 *
 * @param <Req> der Typ der eingehenden Anfrage (Deserialisiert)
 * @param <Res> der Typ der Antwort
 */
public interface FlowHandler<Req, Res> {

    /**
     * Deserialisiert die empfangenen Daten in ein Anfrageobjekt.
     *
     * @param data das empfangene Byte-Array
     * @return deserialisierte Anfrage
     * @throws InvalidProtocolBufferException bei Deserialisierungsfehlern
     */
    Req deserializeRequest(byte[] data) throws InvalidProtocolBufferException;

    /**
     * Extrahiert die eindeutige Korrelations-ID aus einer Anfrage.
     *
     * @param request das Anfrageobjekt
     * @return Korrelations-ID als String
     */
    String extractCorrelationId(Req request);

    /**
     * Führt die fachliche Verarbeitung einer Anfrage durch.
     *
     * @param request die eingehende Anfrage
     * @return Ergebnis der Verarbeitung
     */
    Res handleRequest(Req request);

    /**
     * Verpackt das Antwortobjekt gemeinsam mit der Korrelations-ID.
     *
     * @param correlationId eindeutige ID der Anfrage
     * @param result        das Antwortobjekt
     * @return eingepackte Antwort (z.B. DTO oder MessageEnvelope)
     */
    Object wrapResponse(String correlationId, Res result);

    /**
     * Sendet die verarbeitete Antwort über Hazelcast Reliable Topic.
     *
     * @param hazelcastInstance Hazelcast-Instanz
     * @param topicName         Zieltopic
     * @param response          die gesendete Antwort
     */
    void sendResponse(HazelcastInstance hazelcastInstance, String topicName, Object response);

    /**
     * Gibt den Namen des Flows zurück (z.B. für Registrierung oder Logging).
     *
     * @return Flow-Name
     */
    String getFlowName();
}

-----


package osplus.pkptuna.hazelcast.config;

import osplus.apl.core.api.AplComponent;
import osplus.pkptuna.hazelcast.pubsub.GenericHazelcastConsumer;
import osplus.pkptuna.hazelcast.pubsub.GenericHazelcastRouter;

/**
 * Bootstrap-Klasse zur Initialisierung der Hazelcast-Komponenten beim Start.
 * Ruft nach dem Start {@code initRouters()} und {@code startPolling()} auf.
 */
@AplComponent
public class HazelcastFlowBootstrap {

    private final GenericHazelcastRouter router;
    private final GenericHazelcastConsumer consumer;

    public HazelcastFlowBootstrap(GenericHazelcastRouter router,
                                  GenericHazelcastConsumer consumer) {
        this.router = router;
        this.consumer = consumer;
    }

    /**
     * Wird nach Initialisierung automatisch aufgerufen.
     * Startet das Routing und Polling für alle konfigurierten Flows.
     */
    public void startFlowInfra() {
        router.initRouters();
        consumer.startPolling();
    }
}

-----

