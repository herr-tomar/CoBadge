package osplus.pkptuna.util;

import osplus.apl.core.api.AplComponent;

import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Generischer Antwort-Tracker basierend auf Korrelations-IDs.
 * Unterstützt die asynchrone Zuordnung von Antworten zu Anfragen in verteilten Systemen.
 *
 * @param <T> Typ der erwarteten Antwort
 */
@AplComponent
public class GenericResponseTracker<T> {

    // Thread-sichere Map, die Korrelations-IDs mit ausstehenden CompletableFutures verknüpft
    private final Map<String, CompletableFuture<T>> pending = new ConcurrentHashMap<>();

    /**
     * Registriert eine neue erwartete Antwort für eine gegebene Korrelations-ID.
     *
     * @param correlationId Die eindeutige ID zur Verfolgung der Antwort
     */
    public void register(String correlationId) {
        pending.put(correlationId, new CompletableFuture<>());
    }

    /**
     * Vervollständigt das Future mit der empfangenen Antwort.
     *
     * @param correlationId Die ID zur Identifikation der zugehörigen Anfrage
     * @param response      Die Antwort, mit der das Future abgeschlossen wird
     */
    public void complete(String correlationId, T response) {
        CompletableFuture<T> future = pending.remove(correlationId);
        if (future != null) {
            future.complete(response);
        }
    }

    /**
     * Gibt das Future zurück, das auf die Antwort wartet.
     *
     * @param correlationId Die zugehörige Korrelations-ID
     * @return CompletableFuture, das bei Eintreffen der Antwort abgeschlossen wird
     */
    public CompletableFuture<T> await(String correlationId) {
        return pending.get(correlationId);
    }

    /**
     * Prüft, ob für die angegebene Korrelations-ID bereits ein Tracker existiert.
     *
     * @param correlationId Die zu prüfende Korrelations-ID
     * @return true, wenn ein Tracker registriert ist, sonst false
     */
    public boolean hasTrackerFor(String correlationId) {
        return pending.containsKey(correlationId);
    }
}
