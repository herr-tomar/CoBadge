    /**
     * Ermittelt den Refund/Redebit-Indikator für den IBO-Dispute-Request.
     * <p>
     * Die Logik entspricht der Legacy-Implementierung:
     * <ul>
     *   <li>"N" → keine automatische Erstattung</li>
     *   <li>"P" → automatische Erstattung möglich und Teilbetragskennzeichen = 'J'</li>
     *   <li>"Y" → automatische Erstattung möglich und kein Teilbetragskennzeichen</li>
     * </ul>
     * <p>
     * Alle Eingaben werden zunächst null-sicher in Zahlenwerte konvertiert
     * (über {@link #safeInt(Integer)} und {@link #safeDouble(Double)}).
     *
     * @param s Eingabeobjekt mit Dispute-Daten
     * @return Refund-Indikator ("N", "P" oder "Y")
     */
    default String calcRefundIndicator(DisputeCreateRequestDto s) {
        if (s == null) return "N";

        DisputeBusinessLogic.AutoErstattungResult res =
                DisputeBusinessLogic.ermittelnAutoErst(
                        safeInt(s.getAnzahlAutoErstattungen()),
                        safeInt(s.getAutoErstMaxAnzahl()),
                        safeDouble(s.getAutoErstMaxBetrag()),
                        safeDouble(s.getReklaBetrag()),
                        s.getCrdVfggOrigWs(),
                        safeDouble(s.getCrdVfggOrigKurs()),
                        safeDouble(s.getCrdEntBtrg()),
                        s.getReklaTeilbetragKz()
                );

        if ("N".equals(res.getKennzeichen())) return "N";
        if ("J".equals(res.getKennzeichen()) && isJ(s.getReklaTeilbetragKz())) return "P";
        return "Y";
    }

    /**
     * Ermittelt den Refund/Redebit-Betrag für den IBO-Dispute-Request.
     * <p>
     * Falls keine automatische Erstattung möglich ist
     * (Kennzeichen = 'N'), wird {@code null} zurückgegeben.
     * Andernfalls wird ein {@link AmountDto} mit folgenden Eigenschaften aufgebaut:
     * <ul>
     *   <li>value → Betrag in Minor Units (z. B. Cents)</li>
     *   <li>exponent → immer 2</li>
     *   <li>isoCode → normalisierter ISO-Währungscode aus {@code reklaBetragWs}</li>
     * </ul>
     *
     * @param s Eingabeobjekt mit Dispute-Daten
     * @return Refund-Betrag als {@link AmountDto}, oder {@code null}, wenn keine Erstattung
     */
    default AmountDto calcRefundAmount(DisputeCreateRequestDto s) {
        if (s == null) return null;

        DisputeBusinessLogic.AutoErstattungResult res =
                DisputeBusinessLogic.ermittelnAutoErst(
                        safeInt(s.getAnzahlAutoErstattungen()),
                        safeInt(s.getAutoErstMaxAnzahl()),
                        safeDouble(s.getAutoErstMaxBetrag()),
                        safeDouble(s.getReklaBetrag()),
                        s.getCrdVfggOrigWs(),
                        safeDouble(s.getCrdVfggOrigKurs()),
                        safeDouble(s.getCrdEntBtrg()),
                        s.getReklaTeilbetragKz()
                );

        if ("N".equals(res.getKennzeichen())) return null;

        AmountDto a = new AmountDto();
        a.setValue(DisputeBusinessLogic.toCents(res.getBetrag()));
        a.setExponent(2);
        a.setIsoCode(DisputeBusinessLogic.normalizeCurrency(s.getReklaBetragWs()));
        return a;
    }
