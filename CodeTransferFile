package osplus.pkptuna.hazelcast.pubsub;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import jakarta.annotation.PostConstruct;
import org.springframework.scheduling.TaskScheduler;
import osplus.apl.core.api.AplComponent;
import osplus.apl.core.api.administration.metrics.MetricTag;
import osplus.apl.core.api.administration.metrics.MetricsService;
import osplus.fi.core.logging.api.Logger;
import osplus.fi.core.logging.api.LoggerFactory;
import osplus.pkptuna.hazelcast.config.FlowConfig;
import osplus.pkptuna.hazelcast.config.HazelcastConfigProps;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;

import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.IntStream;

/**
 * Verarbeitet Nachrichten aus Hazelcast-Maps periodisch.
 * Beansprucht (claimt) Nachrichten, verarbeitet sie und entfernt sie bei Erfolg.
 */
@AplComponent
public class GenericHazelcastConsumer {

    private static final Logger LOGGER = LoggerFactory.getLogger(GenericHazelcastConsumer.class);

    private final String instanceId = UUID.randomUUID().toString();

    private final MetricsService metricsService;
    private final HazelcastInstance hazelcastInstance;
    private final TaskScheduler taskScheduler;
    private final List<FlowConfig> flowConfigs;
    private final FlowHandlerRegistry handlerRegistry;
    private final HazelcastConfigProps hazelcastConfigProps;

    public GenericHazelcastConsumer(
            MetricsService metricsService,
            HazelcastInstance hazelcastInstance,
            TaskScheduler taskScheduler,
            List<FlowConfig> flowConfigs,
            FlowHandlerRegistry handlerRegistry,
            HazelcastConfigProps hazelcastConfigProps
    ) {
        this.metricsService = metricsService;
        this.hazelcastInstance = hazelcastInstance;
        this.taskScheduler = taskScheduler;
        this.flowConfigs = flowConfigs;
        this.handlerRegistry = handlerRegistry;
        this.hazelcastConfigProps = hazelcastConfigProps;
    }

    /**
     * Initialisiert die periodische Abfrage nach neuen Nachrichten.
     */
    @PostConstruct
    public void startPolling() {
        taskScheduler.scheduleAtFixedRate(
                this::pollRequestMaps,
                Duration.ofMillis(hazelcastConfigProps.pollingRate())
        );
        LOGGER.info("Scheduled Hazelcast consumer polling with fixed rate of {} ms.", hazelcastConfigProps.pollingRate());
    }

    /**
     * Durchläuft alle konfigurierten Flows und verarbeitet Nachrichten aus den zugehörigen Maps.
     */
    public void pollRequestMaps() {
        for (FlowConfig config : flowConfigs) {
            handleFlow(config);
        }
    }

    /**
     * Verarbeitet Nachrichten für einen Flow (alle Partitionen).
     */
    private void handleFlow(FlowConfig config) {
        String flowName = config.name();
        String baseMap = config.mapBase();
        String responseTopic = config.responseTopic();
        int partitions = config.partitions();

        IMap<String, String> claimMap = hazelcastInstance.getMap("router-claim-map");

        IntStream.range(0, partitions).forEach(partitionIndex -> {
            String mapName = baseMap + partitionIndex;
            IMap<String, Object> messageMap = hazelcastInstance.getMap(mapName);

            for (Map.Entry<String, Object> entry : messageMap.entrySet()) {
                String correlationId = entry.getKey();
                Object request = entry.getValue();
                String claimKey = "route-lock-" + correlationId;

                boolean claimed = claimMap.replace(claimKey, "", instanceId);
                if (claimed) {
                    try {
                        boolean success = processEntry(flowName, correlationId, request, responseTopic);
                        if (success) {
                            messageMap.remove(correlationId);
                            claimMap.remove(claimKey);
                            LOGGER.info("Processed and removed entry from {} with correlationId={}", mapName, correlationId);
                        } else {
                            claimMap.replace(claimKey, instanceId, "");
                        }
                    } catch (Exception ex) {
                        LOGGER.error("Fehler bei der Verarbeitung von {}: {}", correlationId, ex.getMessage(), ex);
                        claimMap.replace(claimKey, instanceId, "");
                        metricsService.increaseCounter("hazelcast.message.consume.error",
                                MetricTag.create("flowName", flowName),
                                MetricTag.create("exceptionClass", ex.getClass().getSimpleName()));
                    }
                }
            }
        });
    }

    /**
     * Führt die Geschäftslogik für eine einzelne Anfrage aus.
     *
     * @return true, wenn erfolgreich verarbeitet wurde.
     */
    private boolean processEntry(String flowName, String correlationId, Object request, String responseTopic) {
        @SuppressWarnings("unchecked")
        FlowHandler<Object, Object> handler = handlerRegistry.getHandler(flowName);

        if (handler == null) {
            LOGGER.warn("Kein FlowHandler für '{}' registriert. Anfrage wird übersprungen.", flowName);
            metricsService.increaseCounter("hazelcast.message.consume.missingFlowHandler",
                    MetricTag.create("flowName", flowName));
            return false;
        }

        Object response = handler.handleRequest(request);
        Object wrapped = handler.wrapResponse(correlationId, response);
        handler.sendResponse(hazelcastInstance, responseTopic, wrapped);

        metricsService.increaseCounter("hazelcast.message.consume.success",
                MetricTag.create("flowName", flowName));
        return true;
    }
}
