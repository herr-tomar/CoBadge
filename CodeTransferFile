package osplus.pkptuna.dispute.service.impl;

import com.google.protobuf.util.JsonFormat;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import osplus.apl.core.test.utils.AplTestRunner;
import osplus.apl.core.test.utils.BaseAplTest;
import osplus.pkptuna.dispute.lookup.model.*;

import java.io.IOException;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(classes = {AplTestRunner.class, ProjecteigeneTestConfiguration.class},
        webEnvironment = SpringBootTest.WebEnvironment.MOCK,
        properties = {
                "apl.application.name=uui",
                "apl.application.version=0.0.1-TEST"
        })
@AutoConfigureMockMvc
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class DisputeServiceImplTest extends BaseAplTest {

    @Autowired
    private DisputeServiceImpl disputeService;

    private static MockWebServer mockWebServer;

    @DynamicPropertySource
    static void overrideProps(DynamicPropertyRegistry registry) throws IOException {
        mockWebServer = new MockWebServer();
        mockWebServer.start();

        registry.add("dispute.base-url", () -> mockWebServer.url("/").toString());
        registry.add("dispute.auth.username", () -> "testuser");
        registry.add("dispute.auth.password", () -> "testpass");
        registry.add("dispute.paths.lookup-disputes", () -> "/issuers/{issuerId}/cards/{cardReference}/disputes");
    }

    @AfterEach
    void tearDown() throws Exception {
        mockWebServer.shutdown();
    }

    @Test
    void assertThatLookupDisputeFolderReturnsExpectedResult() throws Exception {
        // Prepare test data
        ResponseMetadataDto metadata = ResponseMetadataDto.newBuilder()
                .setCorrelationId("test-correlation-id")
                .setStatusCode(200)
                .setStatusMessage("Executed successfully")
                .build();

        DisputeFolderDataDto folderData = DisputeFolderDataDto.newBuilder()
                .setDisputeFolderIdentifier(DisputeFolderIdentifierDto.newBuilder()
                        .setDisputeFolderReference("116855")
                        .build())
                .setStatusCode("OPEN")
                .build();

        FullDisputeLookupResponseDto fullResponse = FullDisputeLookupResponseDto.newBuilder()
                .setResponseMetadata(metadata)
                .addData(folderData)
                .build();

        String jsonResponse = JsonFormat.printer()
                .includingDefaultValueFields()
                .print(fullResponse);

        mockWebServer.enqueue(new MockResponse()
                .setResponseCode(200)
                .setBody(jsonResponse));

        // Execute and assert
        DisputeLookupResponseDto result = disputeService.lookupDisputeFolder("1001", "CARD123");

        assertThat(result).isNotNull();
        assertThat(result.getDisputeFolderExists()).isTrue();
        assertThat(result.getDisputeFoldersCount()).isEqualTo(1);
        assertThat(result.getDisputeFolders(0).getDisputeFolderReference()).isEqualTo("116855");
        assertThat(result.getDisputeFolders(0).getStatusCode()).isEqualTo("OPEN");
    }

    @Test
    void assertThatLookupDisputeFolderReturnsEmptyResult() throws Exception {
        // Prepare empty response
        ResponseMetadataDto metadata = ResponseMetadataDto.newBuilder()
                .setCorrelationId("test-correlation-id")
                .setStatusCode(200)
                .setStatusMessage("Executed successfully")
                .build();

        FullDisputeLookupResponseDto fullResponse = FullDisputeLookupResponseDto.newBuilder()
                .setResponseMetadata(metadata)
                .build();

        String jsonResponse = JsonFormat.printer()
                .includingDefaultValueFields()
                .print(fullResponse);

        mockWebServer.enqueue(new MockResponse()
                .setResponseCode(200)
                .setBody(jsonResponse));

        // Execute and assert
        DisputeLookupResponseDto result = disputeService.lookupDisputeFolder("1001", "CARD123");

        assertThat(result).isNotNull();
        assertThat(result.getDisputeFolderExists()).isFalse();
        assertThat(result.getDisputeFoldersCount()).isEqualTo(0);
    }
}
