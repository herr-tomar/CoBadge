@Test
void createDispute_whenValidationFails_throwsFunctionalValidationException() {
    DisputeCreateRequestDto in = DisputeCreateRequestDto.newBuilder().build();

    // mapper returns issuerId + ARN so the service proceeds to TX lookup
    var restDto = new osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto();
    restDto.setIssuerId("1001");
    restDto.setAcquiringReferenceNumber("ARN-123");
    when(requestMapper.toRestDto(in)).thenReturn(restDto);

    // enqueue TX lookup (200 OK with a transactionId) so the code reaches validation
    enqueueJson(200, """
        {
          "responseMetadata": { "statusCode": 200, "correlationId": "corr-tx" },
          "data": [ { "transactionIdentifier": { "transactionId": "TX-999" } } ]
        }
        """);

    // validator returns violations -> should throw FVE; no need to enqueue "create" API
    Violation v = new Violation("field", "must not be null");
    try (MockedStatic<DisputeCreateValidator> validator = mockStatic(DisputeCreateValidator.class)) {
        validator.when(() -> DisputeCreateValidator.validate(restDto))
                 .thenReturn(List.of(v));

        FunctionalValidationException ex = assertThrows(
                FunctionalValidationException.class,
                () -> service.createDispute(in)
        );
        assertEquals(List.of(v), ex.getViolations());
    }

    // Optional: prove only the TX lookup happened; no create call made
    assertEquals(1, server.getRequestCount());
}
