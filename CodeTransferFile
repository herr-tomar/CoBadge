package osplus.pkppuma.flows.handlers;

import com.hazelcast.core.HazelcastInstance;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import osplus.pkppuma.card.lookup.model.*;
import osplus.pkppuma.card.service.MappingService;
import osplus.pkppuma.hazelcast.protobuf.impl.ProtobufDeserializer;
import osplus.pkppuma.hazelcast.pubsub.ReliableTopicPublisher;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

/**
 * Testklasse f√ºr {@link CardLookupByFriendFlowHandler}.
 */
@ExtendWith(MockitoExtension.class)
class CardLookupByFriendFlowHandlerTest {

    @Mock
    private MappingService mappingService;

    @Mock
    private ReliableTopicPublisher reliableTopicPublisher;

    @Mock
    private ProtobufDeserializer<CardLookupByFriendRequestWrapperDto> deserializer;

    @Mock
    private HazelcastInstance hazelcastInstance;

    @Mock
    private CardLookupByFriendRequestWrapperDto requestWrapperDto;

    @Mock
    private CardLookupByFriendRequestDto requestDto;

    @Mock
    private Object friendObject; // assuming it's a complex Friend DTO or domain model

    private CardLookupByFriendFlowHandler handler;

    @BeforeEach
    void setUp() {
        handler = new CardLookupByFriendFlowHandler(mappingService, reliableTopicPublisher, deserializer);
    }

    @Test
    void shouldExtractCorrelationId() {
        when(requestWrapperDto.getCorrelationId()).thenReturn("corr-id-123");

        String result = handler.extractCorrelationId(requestWrapperDto);

        assertEquals("corr-id-123", result);
    }

    @Test
    void shouldHandleRequestAndCallService() {
        when(requestWrapperDto.getPayload()).thenReturn(requestDto);
        when(requestDto.getFriend()).thenReturn(friendObject);
        when(mappingService.findCardByFriend(friendObject)).thenReturn("CARD-123");

        CardLookupResponseDto result = handler.handleRequest(requestWrapperDto);

        assertEquals("CARD-123", result.getCard());
    }

    @Test
    void shouldWrapResponseCorrectly() {
        CardLookupResponseDto response = CardLookupResponseDto.newBuilder()
                .setCard("CARD-XYZ")
                .build();

        Object wrapped = handler.wrapResponse("corr-id-789", response);

        assertTrue(wrapped instanceof CardLookupByFriendResponseWrapperDto);
        CardLookupByFriendResponseWrapperDto actual = (CardLookupByFriendResponseWrapperDto) wrapped;

        assertEquals("corr-id-789", actual.getCorrelationId());
        assertEquals("CARD-XYZ", actual.getResponse().getCard());
    }
}


-----


