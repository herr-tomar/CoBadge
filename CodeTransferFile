import java.net.http.HttpClient;
import org.springframework.http.client.reactive.JdkClientHttpConnector;
import org.springframework.web.reactive.function.client.WebClient;

class DisputeServiceImplCreateDisputeUnitTest {

  private MockWebServer server;
  private DisputeServiceImpl service;
  private HttpClient jdkClient;

  @BeforeEach
  void setUp() throws IOException {
    server = new MockWebServer();
    server.start();

    jdkClient = HttpClient.newBuilder()
        // optional: provide your own executor to control threads in tests
        //.executor(Executors.newCachedThreadPool())
        .build();

    WebClient webClient = WebClient.builder()
        .baseUrl(server.url("/").toString())
        .clientConnector(new JdkClientHttpConnector(jdkClient))
        .build();

    // ... your existing props/mappers/objectMapper mocks ...
    service = new DisputeServiceImpl(webClient, props, requestMapper, dynsToIboCreateMapper, new ObjectMapper());
  }

  @AfterEach
  void tearDown() throws IOException {
    server.shutdown();
    // If you supplied a custom Executor above, shut it down here.
  }
}
