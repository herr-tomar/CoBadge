package osplus.pkptuna.hazelcast.pubsub;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import com.hazelcast.topic.ITopic;
import com.hazelcast.topic.Message;
import com.hazelcast.topic.MessageListener;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.mockito.ArgumentCaptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import osplus.apl.core.test.utils.AplTestRunner;
import osplus.apl.core.test.utils.BaseAplTest;
import osplus.pkptuna.hazelcast.config.FlowConfig;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;
import osplus.pkptuna.hazelcast.test.config.FlowHandlerTestConfiguration;

import java.util.List;
import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(classes = {AplTestRunner.class, FlowHandlerTestConfiguration.class},
        webEnvironment = SpringBootTest.WebEnvironment.MOCK,
        properties = {
                "spring.main.allow-bean-definition-overriding=true",
                "generichazelcast.polling-rate=20",
                "apl.application.name=uui",
                "apl.application.version=0.0.1-TEST"
        })
@AutoConfigureMockMvc
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class GenericHazelcastRouterTest extends BaseAplTest {

    @Autowired
    private HazelcastInstance hazelcastInstance;

    @Autowired
    private FlowHandlerRegistry handlerRegistry;

    @Autowired
    private FlowHandler sampleFlowHandler;

    @Autowired
    private GenericHazelcastRouter router;

    @Test
    public void testMessageRoutedSuccessfully() throws Exception {
        router.setRouterInstanceId("instance-A");
        router.initRouters();

        byte[] rawMessage = "test".getBytes();
        Object deserialized = new Object();
        String corrId = UUID.randomUUID().toString();

        when(sampleFlowHandler.deserializeRequest(rawMessage)).thenReturn(deserialized);
        when(sampleFlowHandler.extractCorrelationId(deserialized)).thenReturn(corrId);

        IMap<String, String> routerMap = hazelcastInstance.getMap("router-claim-map");
        routerMap.remove("route-lock-" + corrId);

        Message<byte[]> message = mock(Message.class);
        when(message.getMessageObject()).thenReturn(rawMessage);

        ITopic<byte[]> topic = hazelcastInstance.getReliableTopic("req-topic");
        ArgumentCaptor<MessageListener<byte[]>> captor = ArgumentCaptor.forClass(MessageListener.class);
        verify(topic).addMessageListener(captor.capture());

        captor.getValue().onMessage(message);

        IMap<String, Object> targetMap = hazelcastInstance.getMap("map-0");
        assertTrue(targetMap.containsKey(corrId));
    }

    @Test
    public void testDuplicateMessageNotProcessed() throws Exception {
        router.setRouterInstanceId("instance-A");
        router.initRouters();

        byte[] rawMessage = "test".getBytes();
        Object deserialized = new Object();
        String corrId = "duplicate-id";

        when(sampleFlowHandler.deserializeRequest(rawMessage)).thenReturn(deserialized);
        when(sampleFlowHandler.extractCorrelationId(deserialized)).thenReturn(corrId);

        IMap<String, String> routerMap = hazelcastInstance.getMap("router-claim-map");
        routerMap.put("route-lock-" + corrId, "alreadyExists");

        Message<byte[]> message = mock(Message.class);
        when(message.getMessageObject()).thenReturn(rawMessage);

        ITopic<byte[]> topic = hazelcastInstance.getReliableTopic("req-topic");
        ArgumentCaptor<MessageListener<byte[]>> captor = ArgumentCaptor.forClass(MessageListener.class);
        verify(topic).addMessageListener(captor.capture());

        captor.getValue().onMessage(message);

        IMap<String, Object> targetMap = hazelcastInstance.getMap("map-0");
        assertFalse(targetMap.containsKey(corrId));
    }

    @Test
    public void testRoutingHandlerThrowsException() throws Exception {
        router.setRouterInstanceId("instance-A");
        router.initRouters();

        byte[] rawMessage = "bad".getBytes();
        when(sampleFlowHandler.deserializeRequest(rawMessage)).thenThrow(new RuntimeException("Failed"));

        Message<byte[]> message = mock(Message.class);
        when(message.getMessageObject()).thenReturn(rawMessage);

        ITopic<byte[]> topic = hazelcastInstance.getReliableTopic("req-topic");
        ArgumentCaptor<MessageListener<byte[]>> captor = ArgumentCaptor.forClass(MessageListener.class);
        verify(topic).addMessageListener(captor.capture());

        captor.getValue().onMessage(message);
        // No need to assert further, failure is sufficient if no exception escapes
    }

    @Test
    public void testNotLeaderDoesNotSubscribeToTopics() {
        router.setRouterInstanceId("instance-B");
        router.initRouters();

        ITopic<byte[]> topic = hazelcastInstance.getReliableTopic("req-topic");
        verify(topic, never()).addMessageListener(any());
    }
}
