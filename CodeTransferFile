package osplus.pkptuna.service;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.topic.ITopic;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.springframework.http.ResponseEntity;
import osplus.pkptuna.api.ApiResponse;
import osplus.pkptuna.configprops.HazelRelTopicConfigProps;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupResponseDto;
import osplus.pkptuna.dispute.model.DisputeResponseDto;
import osplus.pkptuna.rest.dispute.lookup.model.mapper.DisputeLookupResponseDtoMapper;
import osplus.pkptuna.rest.dispute.model.mapper.DisputeResponseDtoMapper;
import osplus.pkptuna.util.GenericResponseTracker;

import java.util.concurrent.CompletableFuture;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

class DisputeOrcaServiceTest {

    private HazelcastInstance hazelcastInstance;
    private DisputeOrcaService disputeOrcaService;

    private GenericResponseTracker<DisputeLookupResponseDto> disputeLookupResponseTracker;
    private GenericResponseTracker<DisputeResponseDto> disputeDetailResponseTracker;

    private DisputeLookupResponseDtoMapper disputeLookupResponseDtoMapper;
    private DisputeResponseDtoMapper disputeResponseDtoMapper;

    private HazelRelTopicConfigProps hazelRelTopicConfigProps;

    private ITopic<byte[]> mockTopic;

    @BeforeEach
    void setUp() {
        hazelcastInstance = mock(HazelcastInstance.class);

        disputeLookupResponseTracker = mock(GenericResponseTracker.class);
        disputeDetailResponseTracker = mock(GenericResponseTracker.class);

        disputeLookupResponseDtoMapper = mock(DisputeLookupResponseDtoMapper.class);
        disputeResponseDtoMapper = mock(DisputeResponseDtoMapper.class);

        hazelRelTopicConfigProps = mock(HazelRelTopicConfigProps.class);

        mockTopic = mock(ITopic.class);
        when(hazelcastInstance.getReliableTopic(anyString())).thenReturn(mockTopic);

        disputeOrcaService = new DisputeOrcaService(
                hazelcastInstance,
                disputeLookupResponseDtoMapper,
                disputeResponseDtoMapper,
                disputeDetailResponseTracker,
                disputeLookupResponseTracker,
                hazelRelTopicConfigProps
        );
    }

    @Test
    void lookupDisputeFolder_shouldReturnSuccessResponse() {
        DisputeLookupResponseDto protoResponse = mock(DisputeLookupResponseDto.class);
        osplus.pkptuna.rest.dispute.lookup.model.DisputeLookupResponseDto restResponse =
                mock(osplus.pkptuna.rest.dispute.lookup.model.DisputeLookupResponseDto.class);

        // Mock topic config
        when(hazelRelTopicConfigProps.disputesLookupReq()).thenReturn("topic-lookup-req");

        // Future response
        CompletableFuture<DisputeLookupResponseDto> future = CompletableFuture.completedFuture(protoResponse);
        when(disputeLookupResponseTracker.await(anyString())).thenReturn(future);
        when(disputeLookupResponseDtoMapper.toRestDto(protoResponse)).thenReturn(restResponse);

        ResponseEntity<ApiResponse<osplus.pkptuna.rest.dispute.lookup.model.DisputeLookupResponseDto>> response =
                disputeOrcaService.lookupDisputeFolder("issuer", "cardRef");

        assertEquals(200, response.getStatusCodeValue());
        assertEquals("success", response.getBody().getStatus());
        assertEquals(restResponse, response.getBody().getData());

        verify(disputeLookupResponseTracker).register(anyString());
        verify(mockTopic).publish(any(byte[].class));
    }

    @Test
    void publishDisputeDetailRequest_shouldReturnSuccessResponse() {
        DisputeResponseDto protoResponse = mock(DisputeResponseDto.class);
        osplus.pkptuna.rest.dispute.model.DisputeResponseDto restResponse =
                mock(osplus.pkptuna.rest.dispute.model.DisputeResponseDto.class);

        when(hazelRelTopicConfigProps.disputeDetailLookupReq()).thenReturn("topic-detail-req");

        CompletableFuture<DisputeResponseDto> future = CompletableFuture.completedFuture(protoResponse);
        when(disputeDetailResponseTracker.await(anyString())).thenReturn(future);
        when(disputeResponseDtoMapper.toRestDto(protoResponse)).thenReturn(restResponse);

        ResponseEntity<ApiResponse<osplus.pkptuna.rest.dispute.model.DisputeResponseDto>> response =
                disputeOrcaService.publishDisputeDetailRequest("issuer", "folder123", "events,documents");

        assertEquals(200, response.getStatusCodeValue());
        assertEquals("success", response.getBody().getStatus());
        assertEquals(restResponse, response.getBody().getData());

        verify(disputeDetailResponseTracker).register(anyString());
        verify(mockTopic).publish(any(byte[].class));
    }
}
