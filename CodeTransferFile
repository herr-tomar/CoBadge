package osplus.pkptuna.hazelcast.flows;

import com.google.protobuf.Message;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import osplus.pkptuna.hazelcast.config.FlowHandlerTestConfiguration;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(classes = FlowHandlerTestConfiguration.class)
class FlowHandlerRegistryTest {

    @Autowired
    private FlowHandler sampleFlowHandler; // raw type usage

    @Test
    void testRegisterAndRetrieveHandler() {
        FlowHandlerRegistry registry = new FlowHandlerRegistry();
        registry.register("myFlow", sampleFlowHandler);

        FlowHandler result = registry.getHandler("myFlow");
        assertNotNull(result);
        assertEquals(sampleFlowHandler, result);
    }

    @Test
    void testContainsReturnsTrue() {
        FlowHandlerRegistry registry = new FlowHandlerRegistry();
        registry.register("myFlow", sampleFlowHandler);
        assertTrue(registry.contains("myFlow"));
    }

    @Test
    void testContainsReturnsFalse() {
        FlowHandlerRegistry registry = new FlowHandlerRegistry();
        assertFalse(registry.contains("unknownFlow"));
    }

    @Test
    void testGetHandlerThrowsWhenNotFound() {
        FlowHandlerRegistry registry = new FlowHandlerRegistry();
        Exception exception = assertThrows(IllegalArgumentException.class, () ->
                registry.getHandler("unregisteredFlow")
        );
        assertTrue(exception.getMessage().contains("No FlowHandler registered for flow"));
    }
}
