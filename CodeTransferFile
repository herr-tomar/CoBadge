package ${mapperPackage};

/**
* Auto-generated mapper interface for ${protoDtoClassName}
*/

import org.mapstruct.BeanMapping;
import org.mapstruct.Builder;
import org.mapstruct.CollectionMappingStrategy;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;
import osplus.apl.core.api.AplComponent;
import osplus.pkptuna.protobuf.util.TimestampMapper;

<#-- Import custom mapper classes -->
<#list customMapperImports as imp>
    import ${imp};
</#list>

@AplComponent
@Mapper(componentModel="spring",
collectionMappingStrategy = CollectionMappingStrategy.ADDER_PREFERRED,
nullValuePropertyMappingStrategy = org.mapstruct.NullValuePropertyMappingStrategy.IGNORE,
uses = {
TimestampMapper.class
<#list customMapperSimpleNames as mapper>
    , ${mapper}.class
</#list>
}
)
public interface ${mapperInterfaceName} {

${mapperInterfaceName} INSTANCE = Mappers.getMapper(${mapperInterfaceName}.class);

<#-- Generate @Mapping entries for repeated fields -->
<#list repeatedFieldMappings as mapping>
    @Mapping(source = "${mapping.source}", target = "${mapping.target}")
</#list>
${restDtoPackage}.${restDtoClassName} toRestDto(${protoDtoPackage}.${protoDtoClassName} proto);

@BeanMapping(ignoreByDefault = true)
<#list repeatedFieldMappings as mapping>
    @Mapping(source = "${mapping.target}", target = "${mapping.source}")
</#list>
${protoDtoPackage}.${protoDtoClassName} toProtoDto(${restDtoPackage}.${restDtoClassName} restDto);


}
