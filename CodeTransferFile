public static <W extends Message, R> void registerGenericResponseListener(
        HazelcastInstance hazelcastInstance,
        String topicName,
        Parser<W> parser,
        Function<W, String> correlationIdExtractor,
        Function<W, R> responseExtractor,
        BiConsumer<String, R> responseConsumer,
        Logger logger) {

    ITopic<byte[]> topic = hazelcastInstance.getReliableTopic(topicName);

    topic.addMessageListener(new ReliableMessageListener<>() {
        @Override
        public void onMessage(Message<byte[]> message) {
            try {
                W wrapper = parser.parseFrom(message.getMessageObject());
                String correlationId = correlationIdExtractor.apply(wrapper);
                R response = responseExtractor.apply(wrapper);
                responseConsumer.accept(correlationId, response);
            } catch (Exception e) {
                logger.error("Error in listener for topic {}", topicName, e);
            }
        }

        @Override
        public long retrieveInitialSequence() {
            return Ringbuffer.RETENTION_POLICY_TAIL; // skip historical messages
        }

        @Override
        public boolean isLossTolerant() {
            return false;
        }

        @Override
        public boolean isTerminal(Throwable failure) {
            return false;
        }

        @Override
        public void storeSequence(long sequence) {
        }

        @Override
        public long getStoredSequence() {
            return -1;
        }
    });

    logger.info("Registered tail-only ReliableMessageListener on topic '{}'", topicName);
}
