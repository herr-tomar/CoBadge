package osplus.pkptuna.hazelcast.config;

import com.hazelcast.config.Config;
import com.hazelcast.config.NetworkConfig;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import osplus.apl.core.api.administration.metrics.MetricsService;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;
import osplus.pkptuna.hazelcast.pubsub.GenericHazelcastConsumer;
import osplus.pkptuna.hazelcast.pubsub.GenericHazelcastRouter;

import java.util.List;
import java.util.Map;

@TestConfiguration
public class RealFlowHandlerTestConfiguration {

    @Bean
    public HazelcastInstance hazelcastInstance() {
        Config config = new Config();
        config.setClusterName("test-cluster");
        config.getNetworkConfig().setPortAutoIncrement(true);
        config.setProperty("hazelcast.logging.type", "slf4j");
        return Hazelcast.newHazelcastInstance(config);
    }

    @Bean
    public FlowHandlerRegistry<String, FlowHandler<?, ?>> handlerRegistry() {
        FlowHandlerRegistry<String, FlowHandler<?, ?>> registry = new FlowHandlerRegistry<>();
        registry.register("myFlow", sampleFlowHandler());
        return registry;
    }

    @Bean
    public FlowHandlerInitializer flowHandlerInitializer(List<FlowConfig> configs,
                                                         Map<String, FlowHandler<?, ?>> handlerMap,
                                                         FlowHandlerRegistry<String, FlowHandler<?, ?>> registry,
                                                         HazelcastFlowBootstrap bootstrap) {
        return new FlowHandlerInitializer(configs, handlerMap, registry, bootstrap);
    }

    @Bean
    public FlowConfig flowConfig() {
        return new FlowConfig("myFlow", "req-topic", "res-topic", "map-", 1);
    }

    @Bean
    public List<FlowConfig> flowConfigs(FlowConfig flowConfig) {
        return List.of(flowConfig);
    }

    @Bean
    public Map<String, FlowHandler<?, ?>> handlerMap() {
        return Map.of("myFlow", sampleFlowHandler());
    }

    @Bean
    public FlowHandler<?, ?> sampleFlowHandler() {
        return new FlowHandler<Object, Object>() {
            @Override
            public Object deserializeRequest(byte[] data) {
                return new String(data);  // dummy deserialize
            }

            @Override
            public String extractCorrelationId(Object request) {
                return "corr-" + request.hashCode();
            }

            @Override
            public Object handleRequest(Object request) {
                return "response-for-" + request;
            }

            @Override
            public Object wrapResponse(String correlationId, Object result) {
                return correlationId + ":" + result;
            }

            @Override
            public void sendResponse(HazelcastInstance hz, String topic, Object response) {
                hz.getReliableTopic(topic).publish((String) response);
            }

            @Override
            public String getFlowName() {
                return "myFlow";
            }
        };
    }

    @Bean
    public HazelcastFlowBootstrap hazelcastFlowBootstrap(GenericHazelcastRouter router,
                                                          GenericHazelcastConsumer consumer) {
        return new HazelcastFlowBootstrap(router, consumer);
    }

    @Bean
    public GenericHazelcastRouter hazelcastRouter(MetricsService metricsService,
                                                  HazelcastInstance hazelcastInstance,
                                                  List<FlowConfig> flowConfigs,
                                                  FlowHandlerRegistry<String, FlowHandler<?, ?>> registry) {
        return new GenericHazelcastRouter(metricsService, hazelcastInstance, flowConfigs, registry);
    }

    @Bean
    public GenericHazelcastConsumer hazelcastConsumer(MetricsService metricsService,
                                                      HazelcastInstance hazelcastInstance,
                                                      ThreadPoolTaskScheduler scheduler,
                                                      List<FlowConfig> flowConfigs,
                                                      FlowHandlerRegistry<String, FlowHandler<?, ?>> registry,
                                                      HazelcastConfigProps hazelcastConfigProps) {
        return new GenericHazelcastConsumer(metricsService, hazelcastInstance, scheduler,
                flowConfigs, registry, hazelcastConfigProps);
    }

    @Bean
    public HazelcastConfigProps hazelcastConfigProps() {
        return new HazelcastConfigProps() {
            @Override
            public long pollingRate() {
                return 1000; // milliseconds
            }
        };
    }

    @Bean
    public ThreadPoolTaskScheduler taskScheduler() {
        ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
        scheduler.setPoolSize(1);
        scheduler.setThreadNamePrefix("hazelcast-scheduler-");
        scheduler.initialize();
        return scheduler;
    }

    @Bean
    public MetricsService metricsService() {
        return (name, tags) -> {
            // no-op for tests
        };
    }
}
