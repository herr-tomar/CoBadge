package osplus.pkptuna.hazelcast.pubsub;

import com.hazelcast.core.HazelcastInstance;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import osplus.apl.core.test.utils.AplTestRunner;
import osplus.apl.core.test.utils.BaseAplTest;
import osplus.pkptuna.hazelcast.config.FlowConfig;
import osplus.pkptuna.hazelcast.config.HazelcastConfigProps;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;
import osplus.pkptuna.hazelcast.test.config.FlowHandlerTestConfiguration;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest(classes = {AplTestRunner.class, FlowHandlerTestConfiguration.class},
        webEnvironment = SpringBootTest.WebEnvironment.MOCK,
        properties = {
                "spring.main.allow-bean-definition-overriding=true",
                "generichazelcast.polling-rate=20",
                "apl.application.name=uui",
                "apl.application.version=0.0.1-TEST"
        })
@AutoConfigureMockMvc
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class GenericHazelcastConsumerTest extends BaseAplTest {

    @Autowired
    private HazelcastConfigProps hazelcastConfigProps;

    @Autowired
    private FlowHandlerRegistry handlerRegistry;

    @Autowired
    private FlowHandler sampleFlowHandler;

    @Autowired
    private HazelcastInstance hazelcastInstance;

    @Autowired
    private GenericHazelcastConsumer consumer;

    @Autowired
    private FlowHandlerTestConfiguration.TestCollector testCollector;

    /**
     * Positiver Test: Überprüft, ob ein gültiger Flow korrekt verarbeitet wird.
     */
    @Test
    public void testPollRequestMaps_PositiveFlow() {
        testCollector.clear();
        FlowConfig config = new FlowConfig("myFlow", "req-topic", "res-topic", "map-", 1);

        consumer = new GenericHazelcastConsumer(null, hazelcastInstance, null, List.of(config), handlerRegistry, hazelcastConfigProps);
        consumer.pollRequestMaps();

        assertTrue(testCollector.wasSent("res-topic"), "Expected response to be sent on topic");
        assertEquals("wrappedResponse", testCollector.getSent("res-topic"));

    }

    /**
     * Negativer Test: Kein Handler für den Flow vorhanden.
     */
    @Test
    public void testPollRequestMaps_NoHandlerFound() {
        testCollector.clear();
        FlowConfig config = new FlowConfig("unknownFlow", "requestTopic", "responseTopic", "map0", 1);

        consumer = new GenericHazelcastConsumer(null, hazelcastInstance, null, List.of(config), handlerRegistry, hazelcastConfigProps);
        consumer.pollRequestMaps();

        assertFalse(testCollector.wasSent("responseTopic"), "No response should be sent for unknown flow");

    }

    /**
     * Negativer Test: Exception beim Verarbeiten der Anfrage.
     */
    @Test
    public void testPollRequestMaps_HandlerThrowsException() {
        testCollector.clear();
        FlowConfig config = new FlowConfig("myFlow", "requestTopic", "responseTopic", "map0", 1);

        FlowHandler originalHandler = handlerRegistry.getHandler("myFlow");
        assertNotNull(originalHandler);

        consumer = new GenericHazelcastConsumer(null, hazelcastInstance, null, List.of(config), handlerRegistry, hazelcastConfigProps);
        consumer.pollRequestMaps();

        assertFalse(testCollector.wasSent("responseTopic"), "No response should be sent when handler fails");

    }
}
