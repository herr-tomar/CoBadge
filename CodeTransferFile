package osplus.pkptuna.hazelcast.pubsub;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import com.hazelcast.topic.ITopic;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import osplus.pkptuna.hazelcast.config.FlowConfig;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;
import osplus.pkptuna.hazelcast.test.config.BaseHazelcastTest;
import osplus.pkptuna.hazelcast.test.config.FlowHandlerTestConfiguration;

import static java.util.concurrent.TimeUnit.MILLISECONDS;
import static java.util.concurrent.TimeUnit.SECONDS;
import static org.awaitility.Awaitility.await;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class GenericHazelcastRouterTest extends BaseHazelcastTest {

    @Autowired
    private HazelcastInstance hazelcastInstance;

    @Autowired
    private FlowHandlerRegistry<String, FlowHandler> handlerRegistry;

    @Autowired
    private FlowHandler sampleFlowHandler;

    @Autowired
    private FlowConfig flowConfig;

    @Autowired
    private GenericHazelcastRouter router;

    @Autowired
    private FlowHandlerTestConfiguration.TestCollector testCollector;

    private IMap<String, String> leaderMap;
    private IMap<String, Long> heartbeatMap;
    private IMap<String, String> routerMap;
    private IMap<Object, Object> targetMap;
    private ITopic<byte[]> topic;

    private final String routerInstanceId = "test-router-instance";

    @BeforeEach
    public void setup() {
        leaderMap = hazelcastInstance.getMap("router-leader-map");
        heartbeatMap = hazelcastInstance.getMap("router-heartbeat-map");
        routerMap = hazelcastInstance.getMap("router-claim-map");
        targetMap = hazelcastInstance.getMap("map-0");

        leaderMap.clear();
        heartbeatMap.clear();
        routerMap.clear();
        targetMap.clear();
        testCollector.clear();

        router.setRouterInstanceId(routerInstanceId);
        topic = hazelcastInstance.getReliableTopic(flowConfig.requestTopic());
    }

    @Test
    public void testMessageRoutedSuccessfully() {
        router.initRouters();

        topic.publish("{\"key\":\"value\"}".getBytes());

        await().atMost(500, MILLISECONDS)
                .until(() -> testCollector.wasSent("res-topic"));

        assertEquals("wrappedResponse", testCollector.getSent("res-topic"));
    }

    /*
    @Test
    public void testDuplicateMessageNotProcessed() throws Exception {
        router.initRouters();

        Map<String, Object> requestMap = Map.of("dup", "check");
        byte[] rawMessage = new ObjectMapper().writeValueAsBytes(requestMap);
        String corrId = sampleFlowHandler.extractCorrelationId(requestMap);

        routerMap.put("route-lock-" + corrId, "existing"); // Simulate existing lock
        topic.publish(rawMessage);

        await().during(300, MILLISECONDS)
                .atMost(500, MILLISECONDS)
                .until(() -> !testCollector.wasSent("res-topic"));

        assertFalse(testCollector.wasSent("res-topic"), "Duplicate message should not be routed or responded to");
    }

     */

    @Test
    public void testRoutingHandlerThrowsException() {
        router.initRouters();

        byte[] rawMessage = "faultyRequest".getBytes();
        topic.publish(rawMessage);

        await().during(300, MILLISECONDS)
                .atMost(500, MILLISECONDS)
                .until(() -> !testCollector.wasSent("res-topic"));

        assertFalse(testCollector.wasSent("res-topic"), "No response should be sent for faulty request");
    }

    @Test
    public void testNotLeaderDoesNotSubscribeToTopics() {
        // Simulate another instance as the leader BEFORE router starts
        long now = System.currentTimeMillis();
        heartbeatMap.put("heartbeat", now);
        leaderMap.put("active-router", "another-instance");

        router.setRouterInstanceId("test-router-instance");

        // Now initRouters() should detect another leader and skip subscription
        router.initRouters();

        topic.publish("{\"key\":\"value\"}".getBytes());

        await().during(300, MILLISECONDS)
                .atMost(1, SECONDS)
                .untilAsserted(() ->
                        assertFalse(testCollector.wasSent("res-topic"), "Non-leader router should not route or respond")
                );
    }
}

-----


package osplus.pkptuna.hazelcast.test.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.hazelcast.config.Config;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.topic.ITopic;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import osplus.apl.core.api.administration.metrics.MetricsService;
import osplus.pkptuna.hazelcast.config.FlowConfig;
import osplus.pkptuna.hazelcast.config.FlowHandlerInitializer;
import osplus.pkptuna.hazelcast.config.HazelcastConfigProps;
import osplus.pkptuna.hazelcast.config.HazelcastFlowBootstrap;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;
import osplus.pkptuna.hazelcast.pubsub.GenericHazelcastConsumer;
import osplus.pkptuna.hazelcast.pubsub.GenericHazelcastRouter;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static org.mockito.Mockito.mock;

@TestConfiguration
@EnableConfigurationProperties(HazelcastConfigProps.class)
public class FlowHandlerTestConfiguration {

    @Bean
    public HazelcastInstance hazelcastInstance() {
        Config config = new Config();
        config.setClusterName("test-cluster");
        config.getNetworkConfig().setPortAutoIncrement(true);
        config.setProperty("hazelcast.logging.type", "slf4j");
        return Hazelcast.newHazelcastInstance(config);
    }

    @Bean
    public FlowHandlerRegistry<String, FlowHandler> handlerRegistry() {
        FlowHandlerRegistry<String, FlowHandler> registry = new FlowHandlerRegistry<>();
        registry.register("myFlow", sampleFlowHandler());
        return registry;
    }

    @Bean
    public FlowHandlerInitializer flowHandlerInitializer(List<FlowConfig> configs,
                                                         Map<String, FlowHandler> handlerMap,
                                                         FlowHandlerRegistry<String, FlowHandler> registry,
                                                         HazelcastFlowBootstrap bootstrap) {
        return new FlowHandlerInitializer(configs, handlerMap, registry, bootstrap);
    }

    @Bean
    public FlowConfig flowConfig() {
        return new FlowConfig("myFlow", "req-topic" + UUID.randomUUID(), "res-topic", "map-", 1);
    }

    @Bean
    public List<FlowConfig> flowConfigs(FlowConfig flowConfig) {
        return List.of(flowConfig);
    }

    @Bean
    public Map<String, FlowHandler> handlerMap() {
        return Map.of("myFlow", sampleFlowHandler());
    }

    @Bean
    public FlowHandler sampleFlowHandler() {
        return new FlowHandler<Object, Object>() {
            private final ObjectMapper objectMapper = new ObjectMapper();

            @Override
            public Object deserializeRequest(byte[] data) {
                try {
                    return objectMapper.readValue(data, Map.class);
                } catch (Exception e) {
                    throw new RuntimeException("Deserialization failed", e);
                }
            }

            @Override
            public String extractCorrelationId(Object request) {
                return "corr-" + request.hashCode();
            }

            @Override
            public Object handleRequest(Object request) {
                if ("faultyRequest" .equals(request)) {
                    throw new RuntimeException("Expected failure");
                }
                return "response1";
            }

            @Override
            public Object wrapResponse(String correlationId, Object result) {
                return "wrappedResponse";
            }

            @Override
            public void sendResponse(HazelcastInstance hazelcastInstance, String topicName, Object response) {
                testCollector().recordSent(topicName, response);
            }

            @Override
            public String getFlowName() {
                return "myFlow";
            }
        };
    }

    @Bean
    public HazelcastFlowBootstrap hazelcastFlowBootstrap(GenericHazelcastRouter router,
                                                         GenericHazelcastConsumer consumer) {
        return new HazelcastFlowBootstrap(router, consumer);
    }

    @Bean
    public GenericHazelcastRouter hazelcastRouter(MetricsService metricsService,
                                                  HazelcastInstance hazelcastInstance,
                                                  List<FlowConfig> flowConfigs,
                                                  FlowHandlerRegistry<String, FlowHandler> registry) {
        return new GenericHazelcastRouter(metricsService, hazelcastInstance, flowConfigs, registry);
    }

    @Bean
    public GenericHazelcastConsumer hazelcastConsumer(MetricsService metricsService,
                                                      HazelcastInstance hazelcastInstance,
                                                      ThreadPoolTaskScheduler scheduler,
                                                      List<FlowConfig> flowConfigs,
                                                      FlowHandlerRegistry<String, FlowHandler> registry,
                                                      HazelcastConfigProps hazelcastConfigProps) {
        return new GenericHazelcastConsumer(metricsService, hazelcastInstance, scheduler,
                flowConfigs, registry, hazelcastConfigProps);
    }

    @Bean("flowTaskScheduler")
    public ThreadPoolTaskScheduler taskScheduler() {
        ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
        scheduler.setPoolSize(1);
        scheduler.setThreadNamePrefix("hazelcast-scheduler-");
        scheduler.initialize();
        return scheduler;
    }

    @Bean
    public TestCollector testCollector() {
        return new TestCollector();
    }

    @Bean
    @Primary
    public MetricsService metricsService() {
        return mock(MetricsService.class);
    }

    @Bean
    public ITopic<byte[]> reliableTopic(HazelcastInstance hazelcastInstance) {
        return hazelcastInstance.getReliableTopic("req-topic");
    }

    public static class TestCollector {
        private final Map<String, Object> sentResponses = new HashMap<>();

        public void recordSent(String topic, Object response) {
            sentResponses.put(topic, response);
        }

        public Object getSent(String topic) {
            return sentResponses.get(topic);
        }

        public boolean wasSent(String topic) {
            return sentResponses.containsKey(topic);
        }

        public void clear() {
            sentResponses.clear();
        }
    }
}
