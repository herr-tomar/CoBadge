@Override
public void onMessage(Message<byte[]> message) {
    try {
        // Leadership validation
        IMap<String, String> leaderMap = hazelcastInstance.getMap("router-leader-map");
        IMap<String, Long> heartbeatMap = hazelcastInstance.getMap("router-heartbeat-map");

        String currentLeader = leaderMap.get("active-router");
        Long lastHeartbeat = heartbeatMap.get("heartbeat");
        boolean heartbeatAlive = lastHeartbeat != null && (System.currentTimeMillis() - lastHeartbeat <= 5000);

        if (!routerInstanceId.equals(currentLeader) || heartbeatAlive) {
            LOGGER.info("Ignoring message as this router is not the current leader (ID={})", routerInstanceId);
            return;
        }

        T request = handler.deserializeRequest(message.getMessageObject());
        String correlationId = handler.extractCorrelationId(request);
        String lockKey = "route-lock-" + correlationId;

        IMap<String, String> routerMap = hazelcastInstance.getMap("router-claim-map");
        String uniqueId = UUID.randomUUID().toString();

        String existing = routerMap.putIfAbsent(lockKey, uniqueId);
        if (existing != null) {
            LOGGER.info("Skipped duplicate routing for correlationId={}", correlationId);
            metricsService.increaseCounter("hazelcast.message.received.duplicate", MetricTag.create("flowName", flowName));
            return;
        }

        int index = roundRobinCounters.get(flowName).getAndIncrement() % config.partitions();
        String mapKey = config.mapBase() + index;

        hazelcastInstance.getMap(mapKey).put(correlationId, request);
        LOGGER.info("Routed correlationId='{}' to map '{}'", correlationId, mapKey);

        metricsService.increaseCounter("hazelcast.message.received.valid", MetricTag.create("flowName", flowName));
    } catch (Exception e) {
        metricsService.increaseCounter(
                "hazelcast.message.received.error",
                MetricTag.create("flowName", flowName),
                MetricTag.create("exceptionClass", e.getClass().getCanonicalName())
        );
        LOGGER.error("Routing failure for flow '{}': {}", flowName, e.getMessage(), e);
    }
}
