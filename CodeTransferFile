package osplus.pkptuna.dispute.service.mapping;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mapstruct.factory.Mappers;
import osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto;
import osplus.pkptuna.rest.dispute.ibo.create.model.AmountDto;
import osplus.pkptuna.rest.dispute.ibo.create.model.DisputeEventRequestDto;
import osplus.pkptuna.rest.dispute.ibo.create.model.DisputeIboCreateRequestDto;
import osplus.pkptuna.rest.dispute.ibo.create.model.DisputePostingRequestDto;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

class DynsToIboCreateMapperTest {

    private DynsToIboCreateMapper mapper;

    @BeforeEach
    void setUp() {
        mapper = Mappers.getMapper(DynsToIboCreateMapper.class);
    }

    @Test
    void toIbo_mapsBasicFieldsAndComputedValues() {
        DisputeCreateRequestDto src = new DisputeCreateRequestDto();
        src.setReklaGrundKat1("reason1");
        src.setImpulsOid("impulse123");
        src.setReklaTeilbetragKz("J");
        src.setReklaBetrag("1000");
        src.setReklaBetragWs("EUR");

        DisputeIboCreateRequestDto out = mapper.toIbo(src);

        assertThat(out.getDisputeReason()).isEqualTo("reason1");
        assertThat(out.getIssuerDisputeExternalReference()).isEqualTo("impulse123");
        assertThat(out.getDeclareFraudIndicator()).isFalse();
        assertThat(out.getRefundRedebitIndicator()).isEqualTo("PARTIAL");
        assertThat(out.getRefundRedebitAmount()).isNotNull();
        assertThat(out.getDisputePostings()).isNotEmpty();
        assertThat(out.getDisputeEvents()).isNotEmpty();
        assertThat(out.getDisputeDocuments()).isEmpty();
    }

    @Test
    void calcIndicator_returnsPartialForJOtherwiseNone() {
        DisputeCreateRequestDto dto = new DisputeCreateRequestDto();
        dto.setReklaTeilbetragKz("J");
        assertThat(mapper.calcIndicator(dto)).isEqualTo("PARTIAL");

        dto.setReklaTeilbetragKz("N");
        assertThat(mapper.calcIndicator(dto)).isEqualTo("NONE");
    }

    @Test
    void buildRefundAmount_returnsNullWhenNotPartialOrMissingValues() {
        DisputeCreateRequestDto dto = new DisputeCreateRequestDto();
        dto.setReklaTeilbetragKz("N");
        assertThat(mapper.buildRefundAmount(dto)).isNull();

        dto.setReklaTeilbetragKz("J");
        dto.setReklaBetrag(null);
        assertThat(mapper.buildRefundAmount(dto)).isNull();
    }

    @Test
    void buildRefundAmount_returnsAmountForPartialWithValues() {
        DisputeCreateRequestDto dto = new DisputeCreateRequestDto();
        dto.setReklaTeilbetragKz("J");
        dto.setReklaBetrag("500");
        dto.setReklaBetragWs("USD");

        AmountDto amt = mapper.buildRefundAmount(dto);
        assertThat(amt).isNotNull();
        assertThat(amt.getValue()).isEqualTo(500);
        assertThat(amt.getIsoCode()).isEqualTo("USD");
        assertThat(amt.getExponent()).isEqualTo(2);
    }

    @Test
    void buildPostings_prefersOriginalAmountOverRefund() {
        DisputeCreateRequestDto dto = new DisputeCreateRequestDto();
        dto.setCrdVfggOrigBtrg("2000");
        dto.setCrdVfggOrigWs("CHF");
        dto.setReklaTeilbetragKz("J");
        dto.setReklaBetrag("500");
        dto.setReklaBetragWs("USD");

        List<DisputePostingRequestDto> postings = mapper.buildPostings(dto);
        assertThat(postings).hasSize(1);
        assertThat(postings.get(0).getPostingAmount().getIsoCode()).isEqualTo("CHF");
    }

    @Test
    void buildPostings_fallsBackToRefundAmountWhenPartialAndNoOriginal() {
        DisputeCreateRequestDto dto = new DisputeCreateRequestDto();
        dto.setReklaTeilbetragKz("J");
        dto.setReklaBetrag("500");
        dto.setReklaBetragWs("USD");

        List<DisputePostingRequestDto> postings = mapper.buildPostings(dto);
        assertThat(postings).hasSize(1);
        assertThat(postings.get(0).getPostingAmount().getIsoCode()).isEqualTo("USD");
    }

    @Test
    void buildPostings_returnsEmptyListWhenNoAmountsAvailable() {
        DisputeCreateRequestDto dto = new DisputeCreateRequestDto();
        assertThat(mapper.buildPostings(dto)).isEmpty();
    }

    @Test
    void buildEvents_returnsEventOnlyForPartialWithValues() {
        DisputeCreateRequestDto dto = new DisputeCreateRequestDto();
        dto.setReklaTeilbetragKz("J");
        dto.setReklaBetrag("500");
        dto.setReklaBetragWs("USD");

        List<DisputeEventRequestDto> events = mapper.buildEvents(dto);
        assertThat(events).hasSize(1);
        assertThat(events.get(0).getType()).isEqualTo("COMMENT");
        assertThat(events.get(0).getMessage()).contains("500 USD");
    }

    @Test
    void buildEvents_returnsEmptyWhenNotPartialOrMissingValues() {
        DisputeCreateRequestDto dto = new DisputeCreateRequestDto();
        dto.setReklaTeilbetragKz("N");
        assertThat(mapper.buildEvents(dto)).isEmpty();

        dto.setReklaTeilbetragKz("J");
        dto.setReklaBetrag(null);
        dto.setReklaBetragWs(null);
        assertThat(mapper.buildEvents(dto)).isEmpty();
    }

    @Test
    void isJ_and_isBlank_and_parseLongSafe_workAsExpected() {
        assertThat(mapper.isJ("J")).isTrue();
        assertThat(mapper.isJ("j")).isTrue();
        assertThat(mapper.isJ("N")).isFalse();

        assertThat(mapper.isBlank(null)).isTrue();
        assertThat(mapper.isBlank("")).isTrue();
        assertThat(mapper.isBlank(" ")).isTrue();
        assertThat(mapper.isBlank("x")).isFalse();

        assertThat(mapper.parseLongSafe("123", 0L)).isEqualTo(123L);
        assertThat(mapper.parseLongSafe("abc", 42L)).isEqualTo(42L);
    }
}


-------


/**
 * MapStruct-Mapper zur Umwandlung eines {@link osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto}
 * in ein {@link osplus.pkptuna.rest.dispute.ibo.create.model.DisputeIboCreateRequestDto}
 * für den Aufruf des externen IBO-Dispute-Create-Services.
 * <p>
 * Neben der direkten Feldzuordnung werden hier auch mehrere berechnete bzw. zusammengesetzte Felder
 * erzeugt, wie z.B.:
 * <ul>
 *   <li>Ermittlung des Refund/Redebit-Indikators abhängig vom Teilbetrags-Kennzeichen</li>
 *   <li>Aufbau von Betragsobjekten (Refund-Betrag, Originalbetrag) mit Währungs- und Exponentenangaben</li>
 *   <li>Erstellung von Posting- und Event-Listen je nach Vorhandensein relevanter Daten</li>
 * </ul>
 * Nicht gesetzte oder leere Quellwerte werden gemäß
 * {@link org.mapstruct.NullValuePropertyMappingStrategy#IGNORE} nicht gemappt.
 */

