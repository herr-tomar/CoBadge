package osplus.pkptuna.hazelcast.pubsub;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import com.hazelcast.topic.ITopic;
import com.hazelcast.topic.Message;
import com.hazelcast.topic.MessageListener;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.mockito.ArgumentCaptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import osplus.apl.core.test.utils.AplTestRunner;
import osplus.pkptuna.hazelcast.config.FlowConfig;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;
import osplus.pkptuna.hazelcast.test.config.FlowHandlerTestConfiguration;

import java.util.List;
import java.util.UUID;

import static org.mockito.Mockito.*;

@SpringBootTest(classes = {AplTestRunner.class, FlowHandlerTestConfiguration.class},
        webEnvironment = SpringBootTest.WebEnvironment.MOCK,
        properties = {
                "spring.main.allow-bean-definition-overriding=true",
                "generichazelcast.polling-rate=20",
                "apl.application.name=uui",
                "apl.application.version=0.0.1-TEST"
        })
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class GenericHazelcastRouterTest {

    @Autowired
    private HazelcastInstance hazelcastInstance;

    @Autowired
    private FlowHandlerRegistry handlerRegistry;

    @Autowired
    private FlowHandler sampleFlowHandler;

    @Autowired
    private FlowConfig flowConfig;

    private ITopic<byte[]> topic;
    private IMap<String, Object> leaderMap;
    private IMap<String, Object> heartbeatMap;
    private IMap<String, Object> routerMap;
    private IMap<String, Object> targetMap;

    private GenericHazelcastRouter router;

    private final String routerInstanceId = "instance-A";

    @BeforeEach
    public void setup() {
        topic = mock(ITopic.class);
        leaderMap = mock(IMap.class);
        heartbeatMap = mock(IMap.class);
        routerMap = mock(IMap.class);
        targetMap = mock(IMap.class);

        when(hazelcastInstance.getReliableTopic("req-topic")).thenReturn(topic);
        when(hazelcastInstance.getMap("router-leader-map")).thenReturn(leaderMap);
        when(hazelcastInstance.getMap("router-heartbeat-map")).thenReturn(heartbeatMap);
        when(hazelcastInstance.getMap("router-claim-map")).thenReturn(routerMap);
        when(hazelcastInstance.getMap(startsWith("map-"))).thenReturn(targetMap);

        // Simulate this node being elected as leader
        when(heartbeatMap.get("heartbeat")).thenReturn(null);
        when(leaderMap.get("active-router")).thenReturn(null);
        when(leaderMap.putIfAbsent("active-router", routerInstanceId)).thenReturn(null);

        router = new GenericHazelcastRouter(null, hazelcastInstance, List.of(flowConfig), handlerRegistry);
        router.setRouterInstanceId(routerInstanceId);
    }

    @Test
    public void testMessageRoutedSuccessfully() {
        router.initRouters();

        byte[] rawMessage = "anyRequest".getBytes();  // actual content not important
        Object deserialized = sampleFlowHandler.deserializeRequest(rawMessage);
        String corrId = sampleFlowHandler.extractCorrelationId(deserialized);

        when(routerMap.putIfAbsent("route-lock-" + corrId, routerInstanceId)).thenReturn(null);

        Message<byte[]> message = mock(Message.class);
        when(message.getMessageObject()).thenReturn(rawMessage);

        ArgumentCaptor<MessageListener<byte[]>> captor = ArgumentCaptor.forClass(MessageListener.class);
        verify(topic).addMessageListener(captor.capture());

        // Simulate message arrival
        captor.getValue().onMessage(message);

        verify(targetMap).put(eq(corrId), eq(deserialized));
    }

    @Test
    public void testDuplicateMessageNotProcessed() {
        router.initRouters();

        byte[] rawMessage = "anyRequest".getBytes();
        Object deserialized = sampleFlowHandler.deserializeRequest(rawMessage);
        String corrId = sampleFlowHandler.extractCorrelationId(deserialized);

        // Simulate that message is already routed
        when(routerMap.putIfAbsent("route-lock-" + corrId, routerInstanceId)).thenReturn("locked");

        Message<byte[]> message = mock(Message.class);
        when(message.getMessageObject()).thenReturn(rawMessage);

        ArgumentCaptor<MessageListener<byte[]>> captor = ArgumentCaptor.forClass(MessageListener.class);
        verify(topic).addMessageListener(captor.capture());

        captor.getValue().onMessage(message);

        verify(targetMap, never()).put(anyString(), any());
    }

    @Test
    public void testRoutingHandlerThrowsException() {
        router.initRouters();

        byte[] rawMessage = "faultyRequest".getBytes();

        Message<byte[]> message = mock(Message.class);
        when(message.getMessageObject()).thenReturn(rawMessage);

        ArgumentCaptor<MessageListener<byte[]>> captor = ArgumentCaptor.forClass(MessageListener.class);
        verify(topic).addMessageListener(captor.capture());

        // Faulty request triggers exception from handle
        captor.getValue().onMessage(message);

        verify(routerMap, never()).putIfAbsent(anyString(), anyString());
        verify(targetMap, never()).put(anyString(), any());
    }

    @Test
    public void testNotLeaderDoesNotSubscribeToTopics() {
        // Simulate another leader exists
        when(heartbeatMap.get("heartbeat")).thenReturn(System.currentTimeMillis());
        when(leaderMap.get("active-router")).thenReturn("another-instance");

        router.initRouters();

        verify(topic, never()).addMessageListener(any());
    }
}
