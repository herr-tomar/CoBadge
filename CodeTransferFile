@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@SpringBootTest(
        classes = {
                AplTestRunner.class,
                GenericHazelcastConsumerTest.LocalTestConfig.class,
                FlowHandlerTestConfiguration.class
        },
        webEnvironment = SpringBootTest.WebEnvironment.MOCK,
        properties = {
                "spring.main.allow-bean-definition-overriding=true",
                "generichazelcast.polling-rate=20",
                "apl.application.name=uui",
                "apl.application.version=0.0.1-TEST"
        }
)
@AutoConfigureMockMvc
public class GenericHazelcastConsumerTest extends BaseAplTest {

    @Autowired
    private FlowHandler sampleFlowHandler;

    @Autowired
    private FlowConfig flowConfig;

    @Autowired
    private HazelcastInstance hazelcastInstance;

    @Autowired
    private GenericHazelcastConsumer consumer;

    @Autowired
    private FlowHandlerTestConfiguration.TestCollector testCollector;

    private IMap<Object, Object> requestMap;
    private IMap<String, String> routerMap;

    @BeforeEach
    public void setUp() {
        requestMap = hazelcastInstance.getMap("map-0");
        routerMap = hazelcastInstance.getMap("router-claim-map");

        hazelcastInstance.getMap("router-leader-map").clear();
        hazelcastInstance.getMap("router-heartbeat-map").clear();
        routerMap.clear();
        requestMap.clear();
        testCollector.clear();
    }

    @Test
    public void testPollRequestMaps_PositiveFlow() {
        Map<String, Object> request = Map.of("key", "value");
        String correlationId = sampleFlowHandler.extractCorrelationId(request);

        requestMap.put(correlationId, request);
        routerMap.put("route-lock-" + correlationId, "router-uuid");  // Simulate router claiming the request

        consumer.pollRequestMaps();

        await()
                .atMost(2, TimeUnit.SECONDS)
                .pollInterval(50, TimeUnit.MILLISECONDS)
                .untilAsserted(() -> {
                    assertTrue(testCollector.wasSent(flowConfig.responseTopic()), "Expected response to be sent on topic");
                    assertEquals("wrappedResponse", testCollector.getSent(flowConfig.responseTopic()));
                    assertFalse(requestMap.containsKey(correlationId), "Message should be removed on success");
                    assertFalse(routerMap.containsKey("route-lock-" + correlationId), "Claim should be removed on success");
                });
    }

    @Test
    public void testPollRequestMaps_NoHandlerFound() {
        IMap<Object, Object> unknownMap = hazelcastInstance.getMap("mapX-0");
        String corrId = "id1";

        unknownMap.put(corrId, "request");
        hazelcastInstance.getMap("router-claim-map").put("route-lock-" + corrId, "router-uuid");

        consumer.pollRequestMaps();

        assertFalse(testCollector.wasSent(flowConfig.responseTopic()), "No response should be sent for unknown flow");
    }

    @Test
    public void testPollRequestMaps_HandlerThrowsException() {
        String corrId = "id123";

        requestMap.put(corrId, "faultyRequest");
        routerMap.put("route-lock-" + corrId, "router-uuid");

        consumer.pollRequestMaps();

        await()
                .atMost(2, TimeUnit.SECONDS)
                .pollInterval(50, TimeUnit.MILLISECONDS)
                .untilAsserted(() -> {
                    assertFalse(testCollector.wasSent(flowConfig.responseTopic()), "No response should be sent on handler error");
                    assertTrue(requestMap.containsKey(corrId), "Request should remain for retry");
                    assertEquals("router-uuid", routerMap.get("route-lock-" + corrId), "Claim should be reverted to original");
                });
    }

    @TestConfiguration
    static class LocalTestConfig {
        @Bean(destroyMethod = "shutdown")
        public HazelcastInstance hazelcastInstance() {
            Config config = new Config();
            config.setClusterName("test-cluster-" + UUID.randomUUID());
            config.getNetworkConfig().setPortAutoIncrement(true);
            config.setProperty("hazelcast.logging.type", "slf4j");
            return Hazelcast.newHazelcastInstance(config);
        }
    }
}
