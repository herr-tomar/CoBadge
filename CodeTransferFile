package osplus.pkptuna.dispute.service.validation;

import osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto;

import java.util.ArrayList;
import java.util.List;

public final class DisputeCreateValidator {

    private DisputeCreateValidator() {}

    public static List<Violation> validate(DisputeCreateRequestDto s) {
        List<Violation> v = new ArrayList<>();

        // Pflichtfelder
        req(v, s.getImpulsOid(), "impulsOid");
        req(v, s.getReklaGrundKat1(), "reklaGrundKat1");

        // Teil/Voll-Logik
        boolean isPartial = isJ(s.getReklaTeilbetragKz());
        if (isPartial) {
            // refundRedebitAmount benötigt Betrag + Währung
            req(v, s.getReklaBetrag(), "reklaBetrag");
            req(v, s.getReklaBetragWs(), "reklaBetragWs");
            numeric(v, s.getReklaBetrag(), "reklaBetrag");
        }

        // Posting-Quelle (TransactionBetrag/-währung) – paarig
        pairIfPresentMustBeBoth(v, s.getTransactionBetrag(), s.getCrdVfggOrigWs(),
                "transactionBetrag", "crdVfggOrigWs");
        if (notBlank(s.getTransactionBetrag())) {
            numeric(v, s.getTransactionBetrag(), "transactionBetrag");
        }

        return v;
    }

    private static void req(List<Violation> v, String val, String field) {
        if (val == null || val.trim().isEmpty()) {
            v.add(new Violation(field, "Pflichtfeld fehlt"));
        }
    }

    private static void numeric(List<Violation> v, String val, String field) {
        if (val == null) {
            return;
        }
        try { Long.parseLong(val.trim()); }
        catch (Exception e) { v.add(new Violation(field, "Muss numerisch (Ganzzahl in Minor Units) sein")); }
    }

    private static void pairIfPresentMustBeBoth(List<Violation> v, String a, String b, String fa, String fb) {
        boolean ha = notBlank(a), hb = notBlank(b);
        if (ha ^ hb) {
            v.add(new Violation(ha ? fb : fa, "Betrag/Währung müssen paarig vorkommen"));
        }
    }

    private static boolean notBlank(String s) { return s != null && !s.trim().isEmpty(); }
    private static boolean isJ(String v) { return v != null && v.trim().equalsIgnoreCase("J"); }
}
