package pkppuma.service;

import com.hazelcast.config.Config;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.topic.ITopic;
import com.hazelcast.topic.MessageListener;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import osplus.apl.core.test.utils.AplTestRunner;
import osplus.apl.core.test.utils.BaseAplTest;
import osplus.pkppuma.card.lookup.model.*;
import osplus.pkppuma.configprops.HazelRelTopicConfigProps;
import osplus.pkppuma.rest.card.lookup.model.CardLookupResponseDto;
import osplus.pkppuma.rest.card.lookup.model.mapper.CardLookupResponseDtoMapper;
import osplus.pkppuma.util.GenericResponseTracker;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@SpringBootTest(classes = {
        AplTestRunner.class,
        CardOrcaServiceTest.TestConfig.class
}, properties = {
        "hazelcast.topic.pan-to-card-req=PanToCardReqTopic",
        "hazelcast.topic.pan-to-card-res=PanToCardResTopic",
        "hazelcast.topic.friend-to-card-req=FriendToCardReqTopic",
        "hazelcast.topic.friend-to-card-res=FriendToCardResTopic",
        "apl.application.name=uui",
        "apl.application.version=0.0.1-TEST"
})
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class CardOrcaServiceTest extends BaseAplTest {

    @Autowired private CardOrcaService cardOrcaService;
    @Autowired private HazelcastInstance hazelcastInstance;
    @Autowired private GenericResponseTracker<CardLookupByPanResponseWrapperDto> panTracker;
    @Autowired private GenericResponseTracker<CardLookupByFriendResponseWrapperDto> friendTracker;
    @Autowired private HazelRelTopicConfigProps topicProps;

    private ITopic<byte[]> panTopic;
    private ITopic<byte[]> friendTopic;

    @BeforeEach
    void setupTopics() {
        panTopic = hazelcastInstance.getReliableTopic(topicProps.panToCardReq());
        friendTopic = hazelcastInstance.getReliableTopic(topicProps.friendToCardReq());
    }

    @Test
    void shouldProcessPanRequestAndSendResponse() {
        panTopic.addMessageListener((MessageListener<byte[]>) message -> {
            try {
                var req = CardLookupByPanRequestWrapperDto.parseFrom(message.getMessageObject());
                var card = CardDto.newBuilder().setCardNumber("9999").build();
                var response = CardLookupResponseDto.newBuilder().setCard(card).build();
                var wrapped = CardLookupByPanResponseWrapperDto.newBuilder()
                        .setCorrelationId(req.getCorrelationId())
                        .setResponse(response)
                        .build();
                panTracker.complete(req.getCorrelationId(), wrapped);
            } catch (Exception e) {
                throw new RuntimeException("PAN listener failed", e);
            }
        });

        String requestJson = """
            {
              "pan": {
                "cardNumber": "9999"
              }
            }
            """;

        var response = cardOrcaService.publishCardByPanRequest(requestJson);

        assertEquals(200, response.getStatusCodeValue());
        assertEquals("success", response.getBody().getStatus());
        assertEquals("9999", response.getBody().getData().getCard().getCardNumber());
    }

    @Test
    void shouldProcessFriendRequestAndSendResponse() {
        friendTopic.addMessageListener((MessageListener<byte[]>) message -> {
            try {
                var req = CardLookupByFriendRequestWrapperDto.parseFrom(message.getMessageObject());
                var card = CardDto.newBuilder().setCardNumber("1234").build();
                var response = CardLookupResponseDto.newBuilder().setCard(card).build();
                var wrapped = CardLookupByFriendResponseWrapperDto.newBuilder()
                        .setCorrelationId(req.getCorrelationId())
                        .setResponse(response)
                        .build();
                friendTracker.complete(req.getCorrelationId(), wrapped);
            } catch (Exception e) {
                throw new RuntimeException("Friend listener failed", e);
            }
        });

        String requestJson = """
            {
              "friend": {
                "firstName": "Alice",
                "lastName": "Smith"
              }
            }
            """;

        var response = cardOrcaService.publishCardByFriendRequest(requestJson);

        assertEquals(200, response.getStatusCodeValue());
        assertEquals("success", response.getBody().getStatus());
        assertEquals("1234", response.getBody().getData().getCard().getCardNumber());
    }

    @TestConfiguration
    @EnableConfigurationProperties(HazelRelTopicConfigProps.class)
    static class TestConfig {

        @Bean(destroyMethod = "shutdown")
        public HazelcastInstance hazelcastInstance() {
            Config config = new Config();
            config.setClusterName("test-cluster-" + UUID.randomUUID());
            config.getNetworkConfig().setPortAutoIncrement(true);
            config.setProperty("hazelcast.logging.type", "slf4j");
            return Hazelcast.newHazelcastInstance(config);
        }

        @Bean
        public CardLookupResponseDtoMapper responseMapper() {
            // Simple passthrough for test
            return proto -> CardLookupResponseDto.newBuilder()
                    .setCard(proto.getCard())
                    .build();
        }

        @Bean
        public GenericResponseTracker<CardLookupByPanResponseWrapperDto> panResponseTracker() {
            return new GenericResponseTracker<>();
        }

        @Bean
        public GenericResponseTracker<CardLookupByFriendResponseWrapperDto> friendResponseTracker() {
            return new GenericResponseTracker<>();
        }

        @Bean
        public CardOrcaService cardOrcaService(
                HazelcastInstance hazelcastInstance,
                GenericResponseTracker<CardLookupByPanResponseWrapperDto> panTracker,
                GenericResponseTracker<CardLookupByFriendResponseWrapperDto> friendTracker,
                CardLookupResponseDtoMapper mapper,
                HazelRelTopicConfigProps props
        ) {
            return new CardOrcaService(hazelcastInstance, panTracker, friendTracker, mapper, props);
        }
    }
}
