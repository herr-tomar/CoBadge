@Test
public void testDuplicateMessageNotProcessed() throws Exception {
    testCollector.clear();
    router.setRouterInstanceId("test-router-instance");
    router.initRouters();

    Map<String, Object> requestMap = Map.of("dup", "check");
    byte[] rawMessage = new ObjectMapper().writeValueAsBytes(requestMap);
    String corrId = sampleFlowHandler.extractCorrelationId(requestMap);

    // Simulate existing lock
    hazelcastInstance.getMap("router-claim-map").put("route-lock-" + corrId, "existing");

    topic.publish(rawMessage);
    Thread.sleep(300); // Wait for async processing

    assertFalse(testCollector.wasSent("res-topic"), "Duplicate message should not be routed or responded to");
}
----

@Test
public void testRoutingHandlerThrowsException() throws Exception {
    testCollector.clear();
    router.setRouterInstanceId("test-router-instance");
    router.initRouters();

    // This triggers a known failure in the test handler
    byte[] rawMessage = "faultyRequest".getBytes();

    topic.publish(rawMessage);
    Thread.sleep(300);

    assertFalse(testCollector.wasSent("res-topic"), "No response should be sent for faulty request");
}


--------

@Test
public void testNotLeaderDoesNotSubscribeToTopics() {
    testCollector.clear();

    // Simulate another router being active
    heartbeatMap.put("heartbeat", System.currentTimeMillis());
    leaderMap.put("active-router", "some-other-instance");

    router.setRouterInstanceId("test-router-instance");
    router.initRouters();

    topic.publish("{\"key\":\"value\"}".getBytes());

    try {
        Thread.sleep(300);
    } catch (InterruptedException ignored) {}

    assertFalse(testCollector.wasSent("res-topic"), "Non-leader router should not route or respond");
}
