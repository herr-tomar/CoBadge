  @Override
    public DisputeCreateResponseDto createDispute(DisputeCreateRequestDto disputeCreateRequestDto) {

        osplus.pkptuna.rest.dispute.create.model.DisputeCreateRequestDto disputeCreateRequestRestDto
                = disputeCreateRequestDtoMapper.toRestDto(disputeCreateRequestDto);

        // ----------------------Fetch the transaction identifier--------------------
        String issuerId = Optional.of(disputeCreateRequestRestDto.getIssuerId()).orElseThrow(
                () -> new RuntimeException("IssuerId is not present"));
        String acquiringReferenceNumber = Optional.of(disputeCreateRequestRestDto.getAcquiringReferenceNumber()).orElseThrow(
                () -> new RuntimeException("acquiringReferenceNumber is not present"));

        List<String> acquiringReferenceNumberList = new ArrayList<>();
        acquiringReferenceNumberList.add(acquiringReferenceNumber);

        DisputeIboTransactionRequestDto disputeIboTransactionRequestDto = new DisputeIboTransactionRequestDto();
        disputeIboTransactionRequestDto.setIssuerId(issuerId);

        disputeIboTransactionRequestDto.setAcquirerReferenceId(acquiringReferenceNumberList);

        DisputeIboTransactionResponseDto disputeIboTransactionResponseDto = lookUpIboTransactionId(disputeIboTransactionRequestDto);

        osplus.pkptuna.rest.dispute.ibo.transaction.identifier.model.ResponseMetadataDto responseMetadataDto =
                disputeIboTransactionResponseDto.getResponseMetadata();

        Optional.ofNullable(responseMetadataDto).ifPresent(dto -> new RuntimeException("Exception in fetching transaction identifier"));

        // ----------------------Create the dispute--------------------

        List<DataDto> dataList = disputeIboTransactionResponseDto.getData();
        String transactionId = "";
        if(!dataList.isEmpty()) {
            Optional<String> optionalTransactionId = Optional.ofNullable(dataList.getFirst().getTransactionIdentifier().getTransactionId());
            transactionId = optionalTransactionId.orElseThrow(() -> new RuntimeException("Transaction identifier not found"));
        }

        // Build DisputeIboCreateRequestDto Object
        DisputeIboCreateRequestDto disputeIboCreateRequestDto = DynsToIboCreateMapper.map(disputeCreateRequestRestDto);

        // Create the dispute
        DisputeIboCreateResponseDto disputeIboCreateResponseDto =
                createIboDisputeFolder(issuerId, transactionId, disputeIboCreateRequestDto);

        String disputeFolderReference = disputeIboCreateResponseDto.getData().getDisputeFolderIdentifier().getDisputeFolderReference();

        DisputeCreateResponseDto disputeCreateResponseDto = DisputeCreateResponseDto.newBuilder().
                build();
        
        return disputeCreateResponseDto;

    }

    // Private --------------------------------

    private DisputeIboCreateResponseDto createIboDisputeFolder(String issuerId,
                                                               String transactionId,
                                                               DisputeIboCreateRequestDto disputeIboCreateRequestDto) {
        try {
            // Basic Auth header
            String basicAuth = Base64.getEncoder().encodeToString(
                    (username + ":" + password).getBytes(StandardCharsets.UTF_8)
            );

            // POST call
            DisputeIboCreateResponseDto disputeIboCreateResponseDto = webClient.post()
                    .uri(uriBuilder -> {
                        URI builder = uriBuilder
                                .path(pathDisputeFolderCreate)
                                .build(issuerId, transactionId);
                        return builder;
                    })
                    .header("WL-Correlation-ID", "pkptuna-" + System.currentTimeMillis())
                    .header("WL-Origin", "pkptuna-service")
                    .header(HttpHeaders.AUTHORIZATION, "Basic " + basicAuth)
                    .header(HttpHeaders.CONTENT_TYPE, "application/json")
                    .header(HttpHeaders.ACCEPT, "application/json")
                    .bodyValue(disputeIboCreateRequestDto)
                    .retrieve()
                    .bodyToMono(DisputeIboCreateResponseDto.class)
                    .block();

            return disputeIboCreateResponseDto;

        } catch (WebClientResponseException e) {

            LOGGER.error("Exception during create dispute  (issuerId={}, transactionId={})", issuerId, transactionId, e);
            osplus.pkptuna.rest.dispute.ibo.create.model.ResponseMetadataDto responseMetadataDto =
                    new osplus.pkptuna.rest.dispute.ibo.create.model.ResponseMetadataDto();

            responseMetadataDto.setCorrelationId(e.getHeaders() != null
                            ? e.getHeaders().getFirst("WL-Correlation-ID")
                            : "");
            responseMetadataDto.setStatusMessage("HTTP " + e.getStatusCode().value() + " - " + e.getStatusText());
            responseMetadataDto.setStatusCode(e.getStatusCode().value());
            responseMetadataDto.setResponseDateTime(java.time.OffsetDateTime.now().toString());
            responseMetadataDto.setTimeTakenMs(0L);

            // Build a structured error response with metadata
            DisputeIboCreateResponseDto disputeIboCreateResponseDto =  new DisputeIboCreateResponseDto();
            disputeIboCreateResponseDto.setResponseMetadata(responseMetadataDto);
            return disputeIboCreateResponseDto;

        } catch (Exception e) {

            LOGGER.error("Exception during create dispute  (issuerId={}, transactionId={})", issuerId, transactionId, e);
            osplus.pkptuna.rest.dispute.ibo.create.model.ResponseMetadataDto responseMetadataDto =
                    new osplus.pkptuna.rest.dispute.ibo.create.model.ResponseMetadataDto();

            responseMetadataDto.setCorrelationId("");
            responseMetadataDto.setStatusMessage("ERROR - " + e.getClass().getSimpleName() + ": " + e.getMessage());
            responseMetadataDto.setStatusCode(500);
            responseMetadataDto.setResponseDateTime(java.time.OffsetDateTime.now().toString());
            responseMetadataDto.setTimeTakenMs(0L);

            // Build a structured error response with metadata
            DisputeIboCreateResponseDto disputeIboCreateResponseDto =  new DisputeIboCreateResponseDto();
            disputeIboCreateResponseDto.setResponseMetadata(responseMetadataDto);
            return disputeIboCreateResponseDto;
        }
    }


    private DisputeIboTransactionResponseDto lookUpIboTransactionId(DisputeIboTransactionRequestDto disputeIboTransactionRequestDto) {
        try {
            // Basic Auth header
            String basicAuth = Base64.getEncoder().encodeToString(
                    (username + ":" + password).getBytes(StandardCharsets.UTF_8)
            );

            // POST call
            DisputeIboTransactionResponseDto disputeIboTransactionResponseDto = webClient.post()
                    .uri(uriBuilder -> uriBuilder.path(pathLookupTransactionId).build())
                    .header("WL-Correlation-ID", "pkptuna-" + System.currentTimeMillis())
                    .header("WL-Origin", "pkptuna-service")
                    .header(HttpHeaders.AUTHORIZATION, "Basic " + basicAuth)
                    .header(HttpHeaders.CONTENT_TYPE, "application/json")
                    .header(HttpHeaders.ACCEPT, "application/json")
                    .bodyValue(disputeIboTransactionRequestDto)
                    .retrieve()
                    .bodyToMono(DisputeIboTransactionResponseDto.class)
                    .block();

            return disputeIboTransactionResponseDto;

        } catch (WebClientResponseException e) {
            LOGGER.error("Exception during transactionId lookup (issuerId={}, arn={})",
                    disputeIboTransactionRequestDto.getIssuerId(),
                    disputeIboTransactionRequestDto.getAcquirerReferenceId().getFirst(),
                    e);


            osplus.pkptuna.rest.dispute.ibo.transaction.identifier.model.ResponseMetadataDto responseMetadataDto
                    = new osplus.pkptuna.rest.dispute.ibo.transaction.identifier.model.ResponseMetadataDto();

            responseMetadataDto.setCorrelationId(e.getHeaders() != null
                    ? e.getHeaders().getFirst("WL-Correlation-ID")
                    : "");
            responseMetadataDto.setStatusMessage("HTTP " + e.getStatusCode().value() + " - " + e.getStatusText());
            responseMetadataDto .setStatusCode(e.getStatusCode().value());
            responseMetadataDto.setResponseDateTime(java.time.OffsetDateTime.now().toString());
            responseMetadataDto.setTimeTakenMs(0L);

            // Build a structured error response with metadata
            DisputeIboTransactionResponseDto disputeIboTransactionResponseDto =  new DisputeIboTransactionResponseDto();
            disputeIboTransactionResponseDto.setResponseMetadata(responseMetadataDto);
            return disputeIboTransactionResponseDto;

        } catch (Exception e) {
            LOGGER.error("Exception during transactionId lookup (issuerId={}, arn={})",
                    disputeIboTransactionRequestDto.getIssuerId(),
                    disputeIboTransactionRequestDto.getAcquirerReferenceId().getFirst(),
                    e);

            osplus.pkptuna.rest.dispute.ibo.transaction.identifier.model.ResponseMetadataDto responseMetadataDto
                    = new osplus.pkptuna.rest.dispute.ibo.transaction.identifier.model.ResponseMetadataDto();

            responseMetadataDto.setCorrelationId("");
            responseMetadataDto.setStatusMessage("ERROR - " + e.getClass().getSimpleName() + ": " + e.getMessage());
            responseMetadataDto .setStatusCode(500);
            responseMetadataDto.setResponseDateTime(java.time.OffsetDateTime.now().toString());
            responseMetadataDto.setTimeTakenMs(0L);

            // Build a structured error response with metadata
            DisputeIboTransactionResponseDto disputeIboTransactionResponseDto =  new DisputeIboTransactionResponseDto();
            disputeIboTransactionResponseDto.setResponseMetadata(responseMetadataDto);
            return disputeIboTransactionResponseDto;
        }
    }
