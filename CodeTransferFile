package osplus.pkptuna.hazelcast.pubsub;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import osplus.pkptuna.hazelcast.config.HazelcastConfigProps;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;
import osplus.pkptuna.hazelcast.test.config.BaseHazelcastTest;
import osplus.pkptuna.hazelcast.test.config.FlowHandlerTestConfiguration;

import java.util.UUID;

import static org.awaitility.Awaitility.await;
import static java.util.concurrent.TimeUnit.SECONDS;
import static org.junit.jupiter.api.Assertions.*;

public class GenericHazelcastConsumerTest extends BaseHazelcastTest {

    @Autowired
    private HazelcastConfigProps hazelcastConfigProps;

    @Autowired
    private FlowHandlerRegistry handlerRegistry;

    @Autowired
    private FlowHandler sampleFlowHandler;

    @Autowired
    private HazelcastInstance hazelcastInstance;

    @Autowired
    private GenericHazelcastConsumer consumer;

    @Autowired
    private FlowHandlerTestConfiguration.TestCollector testCollector;

    private IMap<Object, Object> requestMap;

    @BeforeEach
    public void setUp() {
        testCollector.clear();
        requestMap = hazelcastInstance.getMap("map-0");
        requestMap.clear();

        // Ensure map is cleared before starting
        await().atMost(1, SECONDS).until(requestMap::isEmpty);
    }

    @Test
    public void testPollRequestMaps_PositiveFlow() {
        requestMap.put("corrId1", "request1");

        consumer.pollRequestMaps();

        await().atMost(2, SECONDS).until(() -> testCollector.wasSent("res-topic"));

        assertEquals("wrappedResponse", testCollector.getSent("res-topic"));
    }

    @Test
    public void testPollRequestMaps_NoHandlerFound() {
        // Use a map that has no registered handler (invalid flow)
        IMap<Object, Object> invalidMap = hazelcastInstance.getMap("invalid-map-" + UUID.randomUUID());
        invalidMap.put("id1", "request");

        consumer.pollRequestMaps();

        assertFalse(testCollector.wasSent("res-topic"), "No response should be sent for unknown flow");
    }

    @Test
    public void testPollRequestMaps_HandlerThrowsException() {
        requestMap.put("id-faulty", "faultyRequest");

        consumer.pollRequestMaps();

        assertFalse(testCollector.wasSent("res-topic"), "No response should be sent when handler fails");
    }
}
