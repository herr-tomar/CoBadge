
try (Connection conn = (password == null || password.isEmpty())
        ? DriverManager.getConnection(jdbcUrl, user, (String) null)
        : DriverManager.getConnection(jdbcUrl, user, password)) {

    // Execute queries
}

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>db-client</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- Oracle JDBC Driver -->
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
            <version>19.16.0.0</version> <!-- Compatible with Oracle 11 -->
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>2.0.9</version>
        </dependency>
    </dependencies>
</project>


package com.example.dbclient;

import java.io.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.*;

public class DbClient {

    private static final String DB_CONFIG_FILE = "db.properties";
    private static final String QUERY_FILE = "queries.properties";
    private static final String OUTPUT_DIR = "output";

    public static void main(String[] args) {
        Properties dbProps = loadProperties(DB_CONFIG_FILE);
        Properties queries = loadProperties(QUERY_FILE);

        if (dbProps == null || queries == null) return;

        String jdbcUrl = dbProps.getProperty("db.url");
        String user = dbProps.getProperty("db.user");
        String password = dbProps.getProperty("db.password");

        new File(OUTPUT_DIR).mkdirs();

        try (Connection conn = DriverManager.getConnection(jdbcUrl, user, password)) {
            for (String key : queries.stringPropertyNames()) {
                String sql = queries.getProperty(key);
                System.out.println("Executing " + key + ": " + sql);
                executeQueryAndSave(conn, key, sql);
            }
        } catch (SQLException e) {
            System.err.println("Database connection failed: " + e.getMessage());
        }
    }

    private static Properties loadProperties(String fileName) {
        Properties props = new Properties();
        try (InputStream input = DbClient.class.getClassLoader().getResourceAsStream(fileName)) {
            if (input == null) {
                System.err.println("File not found: " + fileName);
                return null;
            }
            props.load(input);
        } catch (IOException e) {
            System.err.println("Failed to load " + fileName + ": " + e.getMessage());
            return null;
        }
        return props;
    }

    private static void executeQueryAndSave(Connection conn, String queryKey, String sql) {
        String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss_SSS").format(new Date());
        String fileName = OUTPUT_DIR + File.separator + queryKey + "_" + timestamp + ".csv";

        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql);
             PrintWriter writer = new PrintWriter(new FileWriter(fileName))) {

            ResultSetMetaData meta = rs.getMetaData();
            int columnCount = meta.getColumnCount();

            // Header
            for (int i = 1; i <= columnCount; i++) {
                writer.print(meta.getColumnName(i));
                if (i < columnCount) writer.print(",");
            }
            writer.println();

            // Data
            while (rs.next()) {
                for (int i = 1; i <= columnCount; i++) {
                    writer.print(rs.getString(i));
                    if (i < columnCount) writer.print(",");
                }
                writer.println();
            }

            System.out.println("Output written to " + fileName);

        } catch (SQLException | IOException e) {
            System.err.println("Error executing query [" + queryKey + "]: " + e.getMessage());
        }
    }
}

db.url=jdbc:oracle:thin:@//your-host:1521/your-service
db.user=your_username
db.password=your_password


query1=SELECT SYSDATE FROM dual
query2=SELECT * FROM all_users WHERE ROWNUM <= 3

