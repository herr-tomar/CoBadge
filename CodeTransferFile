package osplus.pkptuna.hazelcast.pubsub;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import osplus.pkptuna.hazelcast.config.HazelcastConfigProps;
import osplus.pkptuna.hazelcast.flows.FlowHandler;
import osplus.pkptuna.hazelcast.flows.FlowHandlerRegistry;
import osplus.pkptuna.hazelcast.test.config.BaseHazelcastTest;
import osplus.pkptuna.hazelcast.test.config.FlowHandlerTestConfiguration;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class GenericHazelcastConsumerTest extends BaseHazelcastTest {

    @Autowired
    private HazelcastConfigProps hazelcastConfigProps;

    @Autowired
    private FlowHandlerRegistry handlerRegistry;

    @Autowired
    private FlowHandler sampleFlowHandler;

    @Autowired
    private HazelcastInstance hazelcastInstance;

    @Autowired
    private GenericHazelcastConsumer consumer;

    @Autowired
    private FlowHandlerTestConfiguration.TestCollector testCollector;

    /**
     * Positiver Test: Überprüft, ob ein gültiger Flow korrekt verarbeitet wird.
     */
    @Test
    public void testPollRequestMaps_PositiveFlow() {
        testCollector.clear();

        IMap<Object, Object> testMap = hazelcastInstance.getMap("map-0");
        testMap.put("corrId1", "request1");

        consumer.pollRequestMaps();

        assertTrue(testCollector.wasSent("res-topic"), "Expected response to be sent on topic");
        assertEquals("wrappedResponse", testCollector.getSent("res-topic"));
    }

    /**
     * Negativer Test: Kein Handler für den Flow vorhanden.
     */
    @Test
    public void testPollRequestMaps_NoHandlerFound() {
        testCollector.clear();

        IMap<Object, Object> testMap = hazelcastInstance.getMap("map00");
        testMap.put("id1", "request");

        consumer.pollRequestMaps();

        assertFalse(testCollector.wasSent("responseTopic"), "No response should be sent for unknown flow");
    }

    /**
     * Negativer Test: Exception beim Verarbeiten der Anfrage.
     */
    @Test
    public void testPollRequestMaps_HandlerThrowsException() {
        testCollector.clear();

        IMap<Object, Object> testMap = hazelcastInstance.getMap("map00");
        testMap.put("id123", "faultyRequest");

        FlowHandler originalHandler = handlerRegistry.getHandler("myFlow");
        assertNotNull(originalHandler);

        consumer.pollRequestMaps();

        assertFalse(testCollector.wasSent("responseTopic"), "No response should be sent when handler fails");
    }
}
