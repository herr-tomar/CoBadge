package osplus.pkptuna.hazelcast.test.proto;

import com.google.protobuf.AbstractMessage;

public class DummyMessage extends AbstractMessage {
    @Override
    public int getSerializedSize() {
        return 0;
    }

    @Override
    public boolean isInitialized() {
        return true;
    }

    @Override
    public Builder newBuilderForType() {
        return null;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) {
    }

    @Override
    public com.google.protobuf.Parser<DummyMessage> getParserForType() {
        return null;
    }

    @Override
    public DummyMessage getDefaultInstanceForType() {
        return new DummyMessage();
    }

    @Override
    public Builder toBuilder() {
        return null;
    }
}


----

@Bean
public FlowHandler<DummyMessage, DummyMessage, DummyMessage> sampleFlowHandler() {
    return new FlowHandler<>() {

        @Override
        public DummyMessage deserializeRequest(byte[] data) {
            return new DummyMessage();
        }

        @Override
        public String extractCorrelationId(DummyMessage request) {
            return "corr-" + request.hashCode();
        }

        @Override
        public DummyMessage handleRequest(DummyMessage request) {
            return new DummyMessage();
        }

        @Override
        public DummyMessage wrapResponse(String correlationId, DummyMessage result) {
            return result;
        }

        @Override
        public void sendResponse(HazelcastInstance hazelcastInstance, String topicName, DummyMessage response) {
            LOGGER.info("[TestHandler] Sending response to topic: " + topicName);
            testCollector().recordSent(topicName, response);
        }

        @Override
        public String getFlowName() {
            return "myFlow";
        }
    };
}


------

@Bean
public FlowHandlerRegistry<DummyMessage, DummyMessage> handlerRegistry() {
    FlowHandlerRegistry<DummyMessage, DummyMessage> registry = new FlowHandlerRegistry<>();
    registry.register("myFlow", sampleFlowHandler());
    return registry;
}



------


@Bean
public GenericHazelcastRouter<DummyMessage, DummyMessage, DummyMessage> hazelcastRouter(
        MetricsService metricsService,
        HazelcastInstance hazelcastInstance,
        List<FlowConfig> flowConfigs,
        FlowHandlerRegistry<DummyMessage, DummyMessage> registry) {

    return new GenericHazelcastRouter<>(metricsService, hazelcastInstance, flowConfigs, registry);
}



-------


@Autowired
private FlowHandler<DummyMessage, DummyMessage, DummyMessage> sampleFlowHandler;

@Autowired
private GenericHazelcastRouter<DummyMessage, DummyMessage, DummyMessage> router;
