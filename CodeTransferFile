/**
 * Erstellt einen neuen Dispute-Ordner basierend auf den übergebenen Dispute-Daten.
 *
 * @param disputeCreateRequestDto die zur Erstellung notwendigen Dispute-Daten
 * @return ein {@link DisputeCreateResponseDto} mit der Referenz auf den neu erstellten Dispute-Ordner
 * @throws osplus.pkptuna.dispute.service.validation.FunctionalValidationException
 *         wenn die fachliche Validierung fehlschlägt
 * @throws RuntimeException wenn Pflichtdaten fehlen oder externe Aufrufe fehlschlagen
 */
DisputeCreateResponseDto createDispute(DisputeCreateRequestDto disputeCreateRequestDto);


--------


/**
 * {@inheritDoc}
 * <p>
 * Implementierungsschritte:
 * <ol>
 *   <li>Wandelt das eingehende Protobuf-DTO in das REST-DTO für den IBO-Service um.</li>
 *   <li>Ermittelt über die Acquirer Reference Number (ARN) die zugehörige Transaktions-ID
 *       durch einen Lookup beim externen Service.</li>
 *   <li>Führt eine fachliche Validierung der Eingabedaten durch und normalisiert diese ggf.</li>
 *   <li>Mappt die normalisierten Daten auf das IBO-spezifische Create-Request-DTO.</li>
 *   <li>Sendet die Create-Anfrage an den IBO-Service und prüft die Antwort auf Erfolg.</li>
 *   <li>Extrahiert und liefert die vom IBO-System vergebene DisputeFolderReference zurück.</li>
 * </ol>
 *
 * @throws osplus.pkptuna.dispute.service.validation.FunctionalValidationException
 *         wenn die fachliche Validierung fehlschlägt
 * @throws RuntimeException wenn Pflichtdaten fehlen, externe Aufrufe fehlschlagen
 *         oder die Antwort ungültig ist
 */
