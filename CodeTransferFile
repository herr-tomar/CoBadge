import reactor.netty.http.client.HttpClient;
import reactor.netty.resources.ConnectionProvider;
import org.springframework.http.client.reactive.ReactorClientHttpConnector;

class DisputeServiceImplCreateDisputeUnitTest {

  private MockWebServer server;
  private DisputeServiceImpl service;

  private ConnectionProvider provider; // keep a reference only if you want to dispose explicitly

  @BeforeEach
  void setUp() throws IOException {
    server = new MockWebServer();
    server.start();

    // no connection pool => no lingering threads
    provider = ConnectionProvider.newConnection();
    HttpClient httpClient = HttpClient.create(provider);

    WebClient webClient = WebClient.builder()
        .baseUrl(server.url("/").toString())
        .clientConnector(new ReactorClientHttpConnector(httpClient))
        .build();

    // ... construct props + mapper mocks as you already do ...
    service = new DisputeServiceImpl(webClient, props, requestMapper, dynsToIboCreateMapper, new ObjectMapper());
  }

  @AfterEach
  void tearDown() throws IOException {
    server.shutdown();
    // Not strictly necessary for newConnection(), but harmless:
    provider.disposeLater().block();
  }
}
