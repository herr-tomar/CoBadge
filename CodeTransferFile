package osplus.pkppuma.uimodule;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.protobuf.util.JsonFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import osplus.apl.uui.api.MethodType;
import osplus.apl.uui.api.UiModule;
import osplus.apl.uui.api.UiService;
import osplus.fi.core.logging.api.Logger;
import osplus.fi.core.logging.api.LoggerFactory;
import osplus.pkppuma.api.ApiResponse;
import osplus.pkppuma.card.lookup.model.CardDto;
import osplus.pkppuma.card.lookup.model.CardLookupResponseDto;
import osplus.pkppuma.card.lookup.model.FriendDto;
import osplus.pkppuma.card.lookup.model.PanDto;
import osplus.pkppuma.card.service.MappingService;
import osplus.pkppuma.rest.card.lookup.model.mapper.CardLookupResponseDtoMapper;
import osplus.pkppuma.service.CardOrcaService;

import java.util.Map;

@UiModule("cardUiModule")
public class CardUiModule {

    private static final Logger LOGGER = LoggerFactory.getLogger(CardUiModule.class);
    private static final ObjectMapper MAPPER = new ObjectMapper();
    private static final JsonFormat.Parser PARSER = JsonFormat.parser().ignoringUnknownFields();

    // Status constants
    private static final String STATUS_SUCCESS = "success";
    private static final String STATUS_ERROR = "error";
    private static final String GENERIC_ERROR_MESSAGE = "Internal server error";

    // Logging message constants
    private static final String MSG_RECEIVED_PAN_REQUEST = "Received getCardByPan request: {}";
    private static final String MSG_RECEIVED_FRIEND_REQUEST = "Received getCardByFriend request: {}";
    private static final String MSG_RECEIVED_PUBLISH_PAN = "Received publishCardByPan request: {}";
    private static final String MSG_RECEIVED_PUBLISH_FRIEND = "Received publishCardByFriend request: {}";

    private static final String LOG_FAILED_GET_PAN = "Failed to handle getCardByPan: {}";
    private static final String LOG_FAILED_GET_FRIEND = "Failed to handle getCardByFriend: {}";
    private static final String LOG_FAILED_PUBLISH_PAN = "Failed to handle publishCardByPan: {}";
    private static final String LOG_FAILED_PUBLISH_FRIEND = "Failed to handle publishCardByFriend: {}";

    private final MappingService mappingService;
    private final CardLookupResponseDtoMapper cardLookupResponseDtoMapper;
    private final CardOrcaService cardOrcaService;

    public CardUiModule(MappingService mappingService,
                        CardLookupResponseDtoMapper cardLookupResponseDtoMapper,
                        CardOrcaService cardOrcaService) {
        this.mappingService = mappingService;
        this.cardLookupResponseDtoMapper = cardLookupResponseDtoMapper;
        this.cardOrcaService = cardOrcaService;
    }

    @UiService(value = "getCardByPan", method = MethodType.POST, requiresAuthentication = false)
    @Deprecated
    public ResponseEntity<ApiResponse<osplus.pkppuma.rest.card.lookup.model.CardLookupResponseDto>> getCardByPan(@RequestBody Map<String, Object> requestPayload) {
        LOGGER.info(MSG_RECEIVED_PAN_REQUEST, requestPayload);
        try {
            String json = MAPPER.writeValueAsString(requestPayload);

            PanDto.Builder builder = PanDto.newBuilder();
            PARSER.merge(json, builder);
            PanDto panDto = builder.build();

            CardDto cardDto = mappingService.findCardByPan(panDto);

            CardLookupResponseDto cardLookupResponseDto = CardLookupResponseDto.newBuilder()
                    .setCard(cardDto)
                    .build();

            var restResponse = cardLookupResponseDtoMapper.toRestDto(cardLookupResponseDto);

            return ResponseEntity.ok(new ApiResponse<>(STATUS_SUCCESS, null, restResponse));

        } catch (Exception e) {
            LOGGER.error(LOG_FAILED_GET_PAN, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(STATUS_ERROR, GENERIC_ERROR_MESSAGE, null));
        }
    }

    @UiService(value = "getCardByFriend", method = MethodType.POST, requiresAuthentication = false)
    @Deprecated
    public ResponseEntity<ApiResponse<osplus.pkppuma.rest.card.lookup.model.CardLookupResponseDto>> getCardByFriend(@RequestBody Map<String, Object> requestPayload) {
        LOGGER.info(MSG_RECEIVED_FRIEND_REQUEST, requestPayload);
        try {
            String json = MAPPER.writeValueAsString(requestPayload);

            FriendDto.Builder builder = FriendDto.newBuilder();
            PARSER.merge(json, builder);
            FriendDto friendDto = builder.build();

            CardDto cardDto = mappingService.findCardByFriend(friendDto);

            CardLookupResponseDto cardLookupResponseDto = CardLookupResponseDto.newBuilder()
                    .setCard(cardDto)
                    .build();

            var restResponse = cardLookupResponseDtoMapper.toRestDto(cardLookupResponseDto);

            return ResponseEntity.ok(new ApiResponse<>(STATUS_SUCCESS, null, restResponse));

        } catch (Exception e) {
            LOGGER.error(LOG_FAILED_GET_FRIEND, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(STATUS_ERROR, GENERIC_ERROR_MESSAGE, null));
        }
    }

    @UiService(value = "publishGetCardByPan", method = MethodType.POST, requiresAuthentication = false)
    public ResponseEntity<ApiResponse<osplus.pkppuma.rest.card.lookup.model.CardLookupResponseDto>> getCardByPanOverHazelcast(@RequestBody Map<String, Object> requestPayload) {
        LOGGER.info(MSG_RECEIVED_PUBLISH_PAN, requestPayload);
        try {
            String json = MAPPER.writeValueAsString(requestPayload);
            return cardOrcaService.publishCardByPanRequest(json);

        } catch (JsonProcessingException e) {
            LOGGER.error(LOG_FAILED_PUBLISH_PAN, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(STATUS_ERROR, GENERIC_ERROR_MESSAGE, null));
        }
    }

    @UiService(value = "publishGetCardByFriend", method = MethodType.POST, requiresAuthentication = false)
    public ResponseEntity<ApiResponse<osplus.pkppuma.rest.card.lookup.model.CardLookupResponseDto>> getCardByFriendOverHazelcast(@RequestBody Map<String, Object> requestPayload) {
        LOGGER.info(MSG_RECEIVED_PUBLISH_FRIEND, requestPayload);
        try {
            String json = MAPPER.writeValueAsString(requestPayload);
            return cardOrcaService.publishCardByFriendRequest(json);

        } catch (JsonProcessingException e) {
            LOGGER.error(LOG_FAILED_PUBLISH_FRIEND, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(STATUS_ERROR, GENERIC_ERROR_MESSAGE, null));
        }
    }
}
