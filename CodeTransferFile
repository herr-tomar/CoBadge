package osplus.pkptuna.hazelcast.pubsub;


import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;
import osplus.fi.core.logging.api.Logger;
import osplus.fi.core.logging.api.LoggerFactory;

import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class RouterLeaderHeartbeat implements Runnable {

    private static final Logger LOGGER = LoggerFactory.getLogger(RouterLeaderHeartbeat.class);
    private final static String LEADER_KEY = "active-router";

    private final IMap<String, String> leaderMap;
    private final String routerInstanceId;

    private final long ttlSeconds;

    public RouterLeaderHeartbeat(
            HazelcastInstance hazelcastInstance,
            String routerInstanceId,
            long ttlSeconds) {
        this.leaderMap = hazelcastInstance.getMap("router-leader-map");
        this.routerInstanceId = routerInstanceId;
        this.ttlSeconds = ttlSeconds;
    }

    @Override
    public void run() {
        try {
            // Update with TTL
            leaderMap.put(LEADER_KEY, routerInstanceId, ttlSeconds, TimeUnit.SECONDS);
        } catch (Exception e) {
            LOGGER.error("refresh leader entry: " + e.getMessage());
        }
    }

    public void start() {
        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(
                this,
                0,
                ttlSeconds,
                TimeUnit.MILLISECONDS
        );
    }
}
