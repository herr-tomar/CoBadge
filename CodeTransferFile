private DisputeCreateResponseDto createDisputeFolder(String issuerId,
                                                     String arn,
                                                     DisputeTransactionsRequestDto requestDto) {
    try {
        // Build Basic auth
        String basicAuth = Base64.getEncoder().encodeToString(
                (username + ":" + password).getBytes(StandardCharsets.UTF_8)
        );

        // ---- POST call
        String json = webClient.post()
                .uri(uriBuilder -> uriBuilder.path(pathLookupTransactionId).build())
                .header("WL-Correlation-ID", "pkptuna-" + System.currentTimeMillis())
                .header("WL-Origin", "pkptuna-service")
                .header(HttpHeaders.AUTHORIZATION, "Basic " + basicAuth)
                .header(HttpHeaders.CONTENT_TYPE, "application/json")
                .header(HttpHeaders.ACCEPT, "application/json")
                .bodyValue(disputeTransactionsRequestDtoMapper.toRestDto(requestDto))
                .retrieve()
                .bodyToMono(String.class)
                .block();

        // ---- Parse JSON -> Proto
        DisputeTransactionsResponseDto.Builder respBuilder = DisputeTransactionsResponseDto.newBuilder();
        ProtobufJsonUtil.parseJsonToProto(json, respBuilder);
        DisputeTransactionsResponseDto resp = respBuilder.build();

        // ---- Extract transactionId (first hit)
        String transactionId = resp.getDataCount() > 0
                ? resp.getData(0).getTransactionIdentifier().getTransactionId()
                : null;

        if (transactionId == null || transactionId.isBlank()) {
            LOGGER.warn("No transactionId found for issuerId={} arn={}", issuerId, arn);
            return DisputeCreateResponseDto.newBuilder()
                    .setStatus("NOT_FOUND")
                    .build();
        }

        // From here you can call your real "create dispute folder" endpoint using issuerId + transactionId.
        // For now, we just return it in the response DTO so the caller can proceed.
        return DisputeCreateResponseDto.newBuilder()
                .setStatus("OK")
                .setTransactionId(transactionId) // <-- ensure your proto has this field
                .build();

    } catch (WebClientResponseException e) {
        LOGGER.warn("External API returned error: {} body={}", e.getStatusCode(), e.getResponseBodyAsString());
        return DisputeCreateResponseDto.newBuilder()
                .setStatus("ERROR_HTTP_" + e.getStatusCode().value())
                .build();
    } catch (Exception e) {
        LOGGER.error("Exception during transactionId lookup", e);
        return DisputeCreateResponseDto.newBuilder()
                .setStatus("ERROR")
                .build();
    }
}
