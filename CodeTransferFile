ERROR] osplus.pkptuna.service.DisputeOrcaServiceTest -- Time elapsed: 15.09 s <<< ERROR!
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@b807b32 testClass = osplus.pkptuna.service.DisputeOrcaServiceTest, locations = [], classes = [osplus.apl.core.test.utils.AplTestRunner, osplus.pkptuna.service.DisputeOrcaServiceTest.TestConfig], contextInitializerClasses = [], activeProfiles = [], propertySourceDescriptors = [PropertySourceDescriptor[locations=[classpath:/apl-local.properties, classpath:/apl-core.properties, classpath:/apl-administration.properties, classpath:/apl-httpclient.properties, classpath:/apl-auth-application.properties, classpath:/mkp-build.properties, classpath:/apl-grid.properties], ignoreResourceNotFound=false, name=null, propertySourceFactory=null, encoding=null]], propertySourceProperties = ["hazelcast.topic.dispute-detail-lookup-req=DisputeDetailRequestReliableTopic", "hazelcast.topic.dispute-detail-lookup-res=DisputeDetailResponseReliableTopic", "hazelcast.topic.disputes-lookup-req=DisputeLookupRequestReliableTopic", "hazelcast.topic.disputes-lookup-res=DisputeLookupResponseReliableTopic", "apl.application.name=uui", "apl.application.version=0.0.1-TEST", "org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [[ImportsContextCustomizer@57a94530 key = [@org.springframework.test.context.BootstrapWith(value=org.springframework.boot.test.context.SpringBootTestContextBootstrapper.class), @org.springframework.stereotype.Indexed(), @org.springframework.boot.test.context.SpringBootTest(args={}, classes={osplus.apl.core.test.utils.AplTestRunner.class, osplus.pkptuna.service.DisputeOrcaServiceTest.TestConfig.class}, properties={"hazelcast.topic.dispute-detail-lookup-req=DisputeDetailRequestReliableTopic", "hazelcast.topic.dispute-detail-lookup-res=DisputeDetailResponseReliableTopic", "hazelcast.topic.disputes-lookup-req=DisputeLookupRequestReliableTopic", "hazelcast.topic.disputes-lookup-res=DisputeLookupResponseReliableTopic", "apl.application.name=uui", "apl.application.version=0.0.1-TEST"}, useMainMethod=NEVER, value={"hazelcast.topic.dispute-detail-lookup-req=DisputeDetailRequestReliableTopic", "hazelcast.topic.dispute-detail-lookup-res=DisputeDetailResponseReliableTopic", "hazelcast.topic.disputes-lookup-req=DisputeLookupRequestReliableTopic", "hazelcast.topic.disputes-lookup-res=DisputeLookupResponseReliableTopic", "apl.application.name=uui", "apl.application.version=0.0.1-TEST"}, webEnvironment=MOCK), @org.springframework.context.annotation.Import(value={org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector.class}), @org.springframework.boot.test.context.TestConfiguration(proxyBeanMethods=true, value=""), @org.springframework.test.context.TestPropertySource(encoding="", factory=org.springframework.core.io.support.PropertySourceFactory.class, inheritLocations=true, inheritProperties=true, locations={"classpath:/apl-local.properties", "classpath:/apl-core.properties", "classpath:/apl-administration.properties", "classpath:/apl-httpclient.properties", "classpath:/apl-auth-application.properties", "classpath:/mkp-build.properties", "classpath:/apl-grid.properties"}, properties={}, value={"classpath:/apl-local.properties", "classpath:/apl-core.properties", "classpath:/apl-administration.properties", "classpath:/apl-httpclient.properties", "classpath:/apl-auth-application.properties", "classpath:/mkp-build.properties", "classpath:/apl-grid.properties"}), @org.springframework.context.annotation.Configuration(enforceUniqueMethods=true, proxyBeanMethods=true, value=""), @org.springframework.boot.context.properties.EnableConfigurationProperties({osplus.pkptuna.configprops.HazelRelTopicConfigProps.class}), @org.springframework.boot.test.context.TestComponent(value=""), @org.springframework.stereotype.Component(value=""), @org.springframework.context.annotation.Import(value={org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.class}), @org.springframework.boot.autoconfigure.ImportAutoConfiguration(classes={osplus.apl.core.test.utils.AplTestConfiguration.class}, exclude={}, value={osplus.apl.core.test.utils.AplTestConfiguration.class}), @org.apiguardian.api.API(consumers={"*"}, since="5.0", status=STABLE)]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@1339e7aa, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@12359a82, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@132e0cc, org.springframework.boot.test.web.reactive.server.WebTestClientContextCustomizer@26ceffa8, org.springframework.boot.test.web.reactor.netty.DisableReactorResourceFactoryGlobalResourcesContextCustomizerFactory$DisableReactorResourceFactoryGlobalResourcesContextCustomizerCustomizer@6c2c1385, org.springframework.boot.test.autoconfigure.OnFailureConditionReportContextCustomizerFactory$OnFailureConditionReportContextCustomizer@78641d23, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@1f, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizer@35432107, org.springframework.test.context.support.DynamicPropertiesContextCustomizer@0, org.springframework.boot.test.context.SpringBootTestAnnotation@245b78ed], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:180)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:200)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:139)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:159)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'disputeOrcaService' defined in osplus.pkptuna.service.DisputeOrcaServiceTest$TestConfig: Unsatisfied dependency expressed through method 'disputeOrcaService' parameter 5: No qualifying bean of type 'osplus.pkptuna.configprops.HazelRelTopicConfigProps' available: expected single matching bean but found 2: hazelcast.topic-osplus.pkptuna.configprops.HazelRelTopicConfigProps,topicConfigProps
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:804)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:546)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1222)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1188)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1123)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:144)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1461)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:563)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:144)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:110)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	... 18 more
Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'osplus.pkptuna.configprops.HazelRelTopicConfigProps' available: expected single matching bean but found 2: hazelcast.topic-osplus.pkptuna.configprops.HazelRelTopicConfigProps,topicConfigProps
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveNotUnique(DependencyDescriptor.java:218)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1722)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1628)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:913)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
	... 44 more
[INFO] 

--------


package osplus.pkptuna.service;

import com.hazelcast.config.Config;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.topic.ITopic;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import osplus.apl.core.test.utils.AplTestRunner;
import osplus.apl.core.test.utils.BaseAplTest;
import osplus.pkptuna.configprops.HazelRelTopicConfigProps;
import osplus.pkptuna.dispute.lookup.model.DisputeLookupResponseDto;
import osplus.pkptuna.dispute.model.DisputeResponseDto;
import osplus.pkptuna.rest.dispute.lookup.model.mapper.DisputeLookupResponseDtoMapper;
import osplus.pkptuna.rest.dispute.model.mapper.DisputeResponseDtoMapper;
import osplus.pkptuna.util.GenericResponseTracker;

import java.util.UUID;
import java.util.concurrent.CompletableFuture;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.reset;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@SpringBootTest(classes = {
        AplTestRunner.class,
        DisputeOrcaServiceTest.TestConfig.class
},
        properties= {
                "hazelcast.topic.dispute-detail-lookup-req=DisputeDetailRequestReliableTopic",
                "hazelcast.topic.dispute-detail-lookup-res=DisputeDetailResponseReliableTopic",
                "hazelcast.topic.disputes-lookup-req=DisputeLookupRequestReliableTopic",
                "hazelcast.topic.disputes-lookup-res=DisputeLookupResponseReliableTopic",
                "apl.application.name=uui",
                "apl.application.version=0.0.1-TEST" })

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestConfiguration
@EnableConfigurationProperties(HazelRelTopicConfigProps.class)
class DisputeOrcaServiceTest extends BaseAplTest {

    @Autowired
    private DisputeOrcaService disputeOrcaService;

    @Autowired
    private HazelcastInstance hazelcastInstance;

    @Autowired
    private ITopic mockTopic;

    @Autowired
    private GenericResponseTracker<DisputeLookupResponseDto> disputeLookupResponseTracker;

    @Autowired
    private GenericResponseTracker<DisputeResponseDto> disputeDetailResponseTracker;

    @Autowired
    private DisputeLookupResponseDtoMapper disputeLookupResponseDtoMapper;

    @Autowired
    private DisputeResponseDtoMapper disputeResponseDtoMapper;

    @Autowired
    private HazelRelTopicConfigProps hazelRelTopicConfigProps;

    @BeforeEach
    void setupMocks() {
        reset(disputeLookupResponseTracker, disputeDetailResponseTracker, disputeLookupResponseDtoMapper,
                disputeResponseDtoMapper, hazelcastInstance, mockTopic, hazelRelTopicConfigProps);

        when(hazelcastInstance.getReliableTopic(anyString())).thenReturn(mockTopic);
    }

    @Test
    void lookupDisputeFolder_shouldReturnSuccessResponse() {
        DisputeLookupResponseDto protoResponse = mock(DisputeLookupResponseDto.class);
        var restResponse = mock(osplus.pkptuna.rest.dispute.lookup.model.DisputeLookupResponseDto.class);

        when(hazelRelTopicConfigProps.disputesLookupReq()).thenReturn("topic-lookup-req");
        when(disputeLookupResponseTracker.await(anyString()))
                .thenReturn(CompletableFuture.completedFuture(protoResponse));
        when(disputeLookupResponseDtoMapper.toRestDto(protoResponse)).thenReturn(restResponse);

        var response = disputeOrcaService.lookupDisputeFolder("issuer", "cardRef");

        assertEquals(200, response.getStatusCodeValue());
        assertEquals("success", response.getBody().getStatus());
        assertEquals(restResponse, response.getBody().getData());

        verify(disputeLookupResponseTracker).register(anyString());
        verify(mockTopic).publish(any(byte[].class));
    }

    @Test
    void publishDisputeDetailRequest_shouldReturnSuccessResponse() {
        DisputeResponseDto protoResponse = mock(DisputeResponseDto.class);
        var restResponse = mock(osplus.pkptuna.rest.dispute.model.DisputeResponseDto.class);

        when(hazelRelTopicConfigProps.disputeDetailLookupReq()).thenReturn("topic-detail-req");
        when(disputeDetailResponseTracker.await(anyString()))
                .thenReturn(CompletableFuture.completedFuture(protoResponse));
        when(disputeResponseDtoMapper.toRestDto(protoResponse)).thenReturn(restResponse);

        var response = disputeOrcaService.publishDisputeDetailRequest("issuer", "folder123", "events,documents");

        assertEquals(200, response.getStatusCodeValue());
        assertEquals("success", response.getBody().getStatus());
        assertEquals(restResponse, response.getBody().getData());

        verify(disputeDetailResponseTracker).register(anyString());
        verify(mockTopic).publish(any(byte[].class));
    }

    @TestConfiguration
    static class TestConfig {

        @Bean(destroyMethod = "shutdown")
        public HazelcastInstance hazelcastInstance() {
            Config config = new Config();
            config.setClusterName("test-cluster-" + UUID.randomUUID());
            config.getNetworkConfig().setPortAutoIncrement(true);
            config.setProperty("hazelcast.logging.type", "slf4j");
            return Hazelcast.newHazelcastInstance(config);
        }

        @Bean
        public DisputeLookupResponseDtoMapper lookupMapper() {
            return mock(DisputeLookupResponseDtoMapper.class);
        }

        @Bean
        public DisputeResponseDtoMapper detailMapper() {
            return mock(DisputeResponseDtoMapper.class);
        }

        @Bean
        @SuppressWarnings("unchecked")
        public GenericResponseTracker<DisputeLookupResponseDto> lookupResponseTracker() {
            return mock(GenericResponseTracker.class);
        }

        @Bean
        @SuppressWarnings("unchecked")
        public GenericResponseTracker<DisputeResponseDto> detailResponseTracker() {
            return mock(GenericResponseTracker.class);
        }

        @Bean
        public HazelRelTopicConfigProps topicConfigProps() {
            return mock(HazelRelTopicConfigProps.class);
        }

        @Bean
        public DisputeOrcaService disputeOrcaService(
                HazelcastInstance hazelcastInstance,
                DisputeLookupResponseDtoMapper lookupMapper,
                DisputeResponseDtoMapper detailMapper,
                GenericResponseTracker<DisputeResponseDto> detailTracker,
                GenericResponseTracker<DisputeLookupResponseDto> lookupTracker,
                HazelRelTopicConfigProps props
        ) {
            return new DisputeOrcaService(
                    hazelcastInstance,
                    lookupMapper,
                    detailMapper,
                    detailTracker,
                    lookupTracker,
                    props
            );
        }
    }
}
